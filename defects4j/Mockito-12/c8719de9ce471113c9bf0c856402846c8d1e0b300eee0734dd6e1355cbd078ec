{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n * \n * @param field\n * @return\n */\npublic Class<?> getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof Class) {\n            return (Class<?>) actual;\n        } else if (actual instanceof ParameterizedType) {\n            return (Class<?>) ((ParameterizedType) actual).getRawType();\n        } else if (actual instanceof TypeVariable) {\n            // TypeVariable is not an instanceof Class and doesn't contain any useful info. \n            // In this case, let's return Object.class. \n            // See org.mockito.internal.util.reflection.GenericMasterTest.shouldDealWithTypeVariables\n            return Object.class;\n        } else if (actual instanceof GenericArrayType) {\n            Type componentType = ((GenericArrayType) actual).getGenericComponentType();\n            if (componentType instanceof Class) {\n                return Array.newInstance((Class<?>) componentType, 0).getClass();\n            } else {\n                // Not sure if this is the correct handling for nested generic arrays. \n                // Let's return Object.class for now.\n                return Object.class;\n            }\n        } else {\n            // If we can't handle it, let's return Object.class.\n            return Object.class;\n        }\n    }\n    \n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}