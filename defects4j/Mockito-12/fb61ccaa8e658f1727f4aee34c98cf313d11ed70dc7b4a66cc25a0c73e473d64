{
    "generation": "public Class getGenericType(Field field) {\n    Type genericType = field.getGenericType();\n    if (genericType instanceof ParameterizedType) {\n        Type[] typeArgs = ((ParameterizedType) genericType).getActualTypeArguments();\n        if (typeArgs.length > 0) {\n            Type typeArg = typeArgs[0];\n            // plain class\n            if (typeArg instanceof Class) {\n                return (Class<?>) typeArg;\n            }\n            // nested generics: return the raw type (e.g. List for List<String>)\n            if (typeArg instanceof ParameterizedType) {\n                Type rawType = ((ParameterizedType) typeArg).getRawType();\n                if (rawType instanceof Class) {\n                    return (Class<?>) rawType;\n                }\n            }\n            // wildcard generics: use the upper bound (e.g. Number for <? extends Number>)\n            if (typeArg instanceof WildcardType) {\n                Type[] bounds = ((WildcardType) typeArg).getUpperBounds();\n                if (bounds.length > 0 && bounds[0] instanceof Class) {\n                    return (Class<?>) bounds[0];\n                }\n            }\n            // array generics (e.g. T[])\n            if (typeArg instanceof GenericArrayType) {\n                Type comp = ((GenericArrayType) typeArg).getGenericComponentType();\n                if (comp instanceof Class) {\n                    return java.lang.reflect.Array\n                        .newInstance((Class<?>) comp, 0)\n                        .getClass();\n                }\n                if (comp instanceof ParameterizedType) {\n                    Type rawComp = ((ParameterizedType) comp).getRawType();\n                    if (rawComp instanceof Class) {\n                        return java.lang.reflect.Array\n                            .newInstance((Class<?>) rawComp, 0)\n                            .getClass();\n                    }\n                }\n            }\n        }\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}