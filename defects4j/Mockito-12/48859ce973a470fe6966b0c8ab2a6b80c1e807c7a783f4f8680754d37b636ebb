{
    "generation": "import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\n\n// Class definition would be here... Let's assume it exists.\n\n    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n     * If the field is generic e.g. List&lt;String&gt; it returns List.class.\n     * If the field is nested generic e.g. List&lt;Set&lt;String&gt;&gt; it returns Set.class.\n     *\n     * @param field the field to inspect\n     * @return the generic type, or Object.class if not applicable\n     */\n    public Class<?> getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) generic;\n            Type[] actualTypeArguments = pt.getActualTypeArguments();\n\n            // Ensure there is at least one type argument\n            if (actualTypeArguments.length > 0) {\n                Type firstTypeArgument = actualTypeArguments[0];\n\n                if (firstTypeArgument instanceof Class) {\n                    // Case: ArgumentCaptor<String> -> String.class\n                    return (Class<?>) firstTypeArgument;\n                } else if (firstTypeArgument instanceof ParameterizedType) {\n                    // Case: ArgumentCaptor<List<String>> -> List.class\n                    // Return the raw type of the nested ParameterizedType\n                    // This handles nested generics like List<Set<String>> as well, returning Set.class\n                    return (Class<?>) ((ParameterizedType) firstTypeArgument).getRawType();\n                }\n                // Other cases like TypeVariable, WildcardType, GenericArrayType\n                // fall through and return Object.class as per original behavior.\n            }\n        }\n\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}