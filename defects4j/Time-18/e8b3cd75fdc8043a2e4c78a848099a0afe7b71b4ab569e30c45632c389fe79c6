{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Try Julian first, in case date is only valid there (e.g. 1500-02-29).\n    long instant;\n    try {\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // Not valid in Julian, try Gregorian\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            throw e; // not valid in Julian or Gregorian before cutover\n        }\n        return instant;\n    }\n    if (instant >= iCutoverMillis) {\n        // Check whether date is valid in Gregorian calendar, as the instant is after cutover.\n        long gregorianInstant;\n        try {\n            gregorianInstant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // Not valid in Gregorian calendar, but instant is after cutover; treat as gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        if (gregorianInstant >= iCutoverMillis) {\n            return gregorianInstant;\n        } else {\n            // In the cutover gap\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}