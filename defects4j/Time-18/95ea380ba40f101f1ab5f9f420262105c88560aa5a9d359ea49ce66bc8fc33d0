{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Try Julian first\n    long instant;\n    try {\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // If Julian calendar rejects the date, try Gregorian\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // Gregorian accepts but before cutover -> invalid\n            throw e;\n        }\n        return instant;\n    }\n\n    if (instant >= iCutoverMillis) {\n        // Might be in Gregorian calendar, recheck\n        long gregorianInstant;\n        try {\n            gregorianInstant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // Gregorian calendar rejects, so keep Julian instant\n            return instant;\n        }\n        if (gregorianInstant < iCutoverMillis) {\n            return instant;\n        } else {\n            return gregorianInstant;\n        }\n    } else {\n        return instant;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}