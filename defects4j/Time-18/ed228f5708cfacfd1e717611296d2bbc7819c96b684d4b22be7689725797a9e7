{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Determine which chronology to use based on the approximate instant of the date.\n        // Use Julian chronology to calculate an estimate of the instant for the start of the day.\n        // Julian chronology progresses linearly, making it a reliable reference for this check.\n        long approxInstant;\n        try {\n            approxInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0, 0, 0, 0);\n        } catch (IllegalArgumentException e) {\n            // If even Julian chronology cannot parse the date (e.g., month/day out of range),\n            // it's an invalid date regardless of the calendar system. Re-throw the original exception.\n            throw e;\n        }\n\n        if (approxInstant < iCutoverMillis) {\n            // The approximate instant falls before the cutover.\n            // This means the date is in the Julian era. Use Julian chronology for the full instant.\n            return iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } else {\n            // The approximate instant falls on or after the cutover.\n            // This means the date is in the Gregorian era. Use Gregorian chronology for the full instant.\n            // If the date corresponds to one of the \"skipped\" days in the cutover (e.g., 1582-10-05 to 1582-10-14\n            // if interpreted as Gregorian dates), then iGregorianChronology will correctly throw an\n            // IllegalArgumentException (or subclass like IllegalFieldValueException).\n            return iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}