{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour,\n                                      secondOfMinute, millisOfSecond);\n    }\n\n    // Try Gregorian first\n    long instant = 0;\n    IllegalArgumentException gregException = null;\n    try {\n        instant = iGregorianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        // If it's on or after the cutover, we're done\n        if (instant >= iCutoverMillis) {\n            return instant;\n        }\n    } catch (IllegalArgumentException e) {\n        // Remember the error and fall through to Julian below\n        gregException = e;\n    }\n\n    // Try Julian (either Gregorian was before cutover or threw)\n    instant = iJulianChronology.getDateTimeMillis(\n        year, monthOfYear, dayOfMonth,\n        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    if (instant >= iCutoverMillis) {\n        // If Gregorian threw, and the Julian date is after cutover,\n        // it means the fields were valid only in Julian but date is post-cutover\n        if (gregException != null) {\n            throw gregException;\n        }\n        // Otherwise it's in the illegal cutover gap\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}