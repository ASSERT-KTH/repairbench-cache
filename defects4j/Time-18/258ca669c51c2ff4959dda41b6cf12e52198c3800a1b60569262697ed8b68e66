{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Try Julian first, since before cutover those dates may only be valid in Julian.\n        long instant = 0;\n        IllegalArgumentException julianException = null;\n        try {\n            instant = iJulianChronology.getDateTimeMillis(\n                year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond\n            );\n            if (instant < iCutoverMillis) {\n                return instant;\n            }\n        } catch (IllegalArgumentException ex) {\n            julianException = ex;\n        }\n\n        // Try Gregorian next.\n        try {\n            instant = iGregorianChronology.getDateTimeMillis(\n                year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond\n            );\n        } catch (IllegalArgumentException gregorianException) {\n            // If both failed, throw the Julian exception (to preserve old behavior).\n            if (julianException != null) {\n                throw julianException;\n            }\n            throw gregorianException;\n        }\n\n        if (instant < iCutoverMillis) {\n            // It should have been handled by Julian branch.\n            // But if Julian branch failed, it means the date does not exist.\n            throw (julianException != null) ? julianException : \n                new IllegalArgumentException(\"Specified date does not exist\");\n        }\n\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}