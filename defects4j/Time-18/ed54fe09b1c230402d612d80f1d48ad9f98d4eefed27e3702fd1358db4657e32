{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    long instant;\n    // Try Julian first, since for pre-cutover and cutover-leap-year dates, Julian may accept it\n    instant = iJulianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (instant >= iCutoverMillis) {\n        // It is after or at cutover instant; Gregorian might be more appropriate\n        long gregorianInstant;\n        try {\n            gregorianInstant = iGregorianChronology.getDateTimeMillis(\n                    year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // Illegal in Gregorian; check if Julian instant is acceptable\n            // but since instant >= cutover, and illegal in Gregorian, then it's invalid\n            throw e;\n        }\n        if (gregorianInstant < iCutoverMillis) {\n            // Gregorian date is before cutover instant, but calendar says otherwise, invalid\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        // use gregorianInstant, because date is post-cutover\n        instant = gregorianInstant;\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}