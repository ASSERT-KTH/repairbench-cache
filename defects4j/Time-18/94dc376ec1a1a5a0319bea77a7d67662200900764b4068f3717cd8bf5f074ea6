{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // First try Gregorian.\n    long instant;\n    try {\n        instant = iGregorianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // Not valid in Gregorian, maybe valid in Julian before the cutover.\n        long julianInstant = iJulianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (julianInstant < iCutoverMillis) {\n            return julianInstant;\n        }\n        // It's invalid or after cutover in Julian too, rethrow original\n        throw e;\n    }\n\n    // If the Gregorian result is before the cutover, check Julian\n    if (instant < iCutoverMillis) {\n        long julianInstant = iJulianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (julianInstant >= iCutoverMillis) {\n            // Falls into the illegal gap\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        instant = julianInstant;\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}