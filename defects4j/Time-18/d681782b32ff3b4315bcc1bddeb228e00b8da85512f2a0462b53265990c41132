{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Try Julian first, then Gregorian, since date could exist only in Julian (e.g., 1500-02-29)\n        long instant;\n        try {\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException ex) {\n            // If not valid in Julian, try Gregorian\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                // Invalid in both calendars before cutover\n                throw ex;\n            }\n            return instant;\n        }\n        if (instant >= iCutoverMillis) {\n            // After cutover, use Gregorian if valid, else illegal\n            long gregorianInstant;\n            try {\n                gregorianInstant = iGregorianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } catch (IllegalArgumentException ex) {\n                // Not valid in Gregorian\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            if (gregorianInstant >= iCutoverMillis) {\n                return gregorianInstant;\n            } else {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}