{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        long instant;\n        try {\n            // Attempt to get the date time using Gregorian rules first.\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // If the Gregorian calculation fails, it might be a Julian date\n            // that is invalid in the Gregorian calendar (e.g., 1500-02-29).\n            // Attempt to get the date time using Julian rules.\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            \n            // If the Julian instant falls on or after the cutover point,\n            // it means the date is invalid in Gregorian (which should apply after cutover)\n            // but valid in Julian (which should apply before cutover), and the Julian\n            // interpretation pushes it past the cutover. This implies the date\n            // truly doesn't exist in GJChronology.\n            if (julianInstant >= iCutoverMillis) {\n                throw e; // Re-throw the original Gregorian exception as it's more indicative of the ultimate problem.\n            }\n            // Otherwise, it's a valid Julian date before the cutover.\n            return julianInstant;\n        }\n\n        // If the Gregorian calculation succeeded:\n        if (instant < iCutoverMillis) {\n            // If the Gregorian instant is before the cutover, it means it's in the period\n            // where Julian rules are often preferred. We need to check for the cutover gap.\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            \n            // If the Gregorian date falls before the cutover, but the Julian date\n            // falls on or after the cutover, it means this date is in the illegal cutover gap.\n            if (julianInstant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            // If Julian instant is also before the cutover, the Julian one is considered correct for this period.\n            return julianInstant;\n        }\n\n        // If the Gregorian instant is at or after the cutover, the Gregorian interpretation is correct.\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}