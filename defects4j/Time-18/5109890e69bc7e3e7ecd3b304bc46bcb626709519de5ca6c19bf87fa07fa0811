{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        long instant;\n        boolean triedGregorianAndSucceeded = false;\n        try {\n            // Assume date is Gregorian.\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            triedGregorianAndSucceeded = true;\n        } catch (IllegalArgumentException e) {\n            // Gregorian calculation failed. This typically means the date (e.g., Feb 29, 1500)\n            // is invalid in Gregorian but might be valid in Julian for years before the cutover.\n            // We proceed to try the Julian calculation.\n        }\n\n        if (triedGregorianAndSucceeded && instant >= iCutoverMillis) {\n            // The Gregorian interpretation succeeded and falls at or after the cutover point.\n            // This is the correct interpretation for dates in the Gregorian era.\n            return instant;\n        } else {\n            // We reach this block if either:\n            // 1. The Gregorian calculation failed (caught IllegalArgumentException).\n            // 2. The Gregorian calculation succeeded, but the resulting instant was before the cutover.\n            // In both these cases, the date should be interpreted using the Julian calendar.\n            \n            // Try Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            \n            // After attempting Julian, check if the resulting instant falls within the\n            // \"cutover gap\" (the period of 10 skipped days during the calendar transition).\n            // If it does, the specified date does not exist in GJChronology.\n            // This condition covers cases where a Julian date, if it were to exist at or\n            // after the cutover point, would fall into the Gregorian calendar's skipped days.\n            if (instant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            \n            // Otherwise, it's a valid Julian date that falls before the cutover point.\n            return instant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}