{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // The original code always tries Gregorian first, which is not correct for dates pre-cutover.\n    // Instead, determine which calendar should be used by constructing the millis via both chronologies,\n    // and then choose the correct chronology based on the cutover and which one succeeds.\n\n    // Try Julian first; if the result is before the cutover, use it; otherwise, use Gregorian.\n    long instant;\n    try {\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            return instant;\n        }\n    } catch (IllegalArgumentException je) {\n        // Ignore and try Gregorian below.\n    }\n\n    // Try Gregorian\n    try {\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            return instant;\n        }\n    } catch (IllegalArgumentException ge) {\n        // Ignore\n    }\n\n    // If neither calendar produces a valid instant, throw exception (cutover gap or invalid date).\n    throw new IllegalArgumentException(\"Specified date does not exist\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}