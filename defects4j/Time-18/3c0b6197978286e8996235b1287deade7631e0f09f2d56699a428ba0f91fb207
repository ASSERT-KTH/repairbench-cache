{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Try Julian first, as dates before cutover should be evaluated in Julian\n    long instant = 0L;\n    IllegalArgumentException julianEx = null;\n    try {\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            return instant;\n        }\n    } catch (IllegalArgumentException ex) {\n        julianEx = ex;\n    }\n\n    // Try Gregorian\n    try {\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            return instant;\n        }\n    } catch (IllegalArgumentException ex) {\n        // If both Julian and Gregorian fail, throw Julian's exception\n        if (julianEx != null) {\n            throw julianEx;\n        }\n        throw ex;\n    }\n\n    // If the instant is in the cutover gap\n    throw new IllegalArgumentException(\"Specified date does not exist\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}