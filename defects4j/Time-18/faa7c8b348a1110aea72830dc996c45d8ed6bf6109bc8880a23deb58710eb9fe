{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n        try {\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // If Gregorian fails, it implies the date might be valid in Julian\n            // and possibly before the cutover (e.g., 1500-02-29).\n            // Try the Julian chronology as a fallback.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // If the Julian date is valid but falls on or after the cutover,\n                // it implies the date is in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            // Date is valid in Julian and before cutover, return Julian instant.\n            return instant;\n        }\n\n        // If we reach here, the Gregorian instant was successfully computed.\n        // Now check if this Gregorian instant is before the cutover.\n        if (instant < iCutoverMillis) {\n            // If the Gregorian date is valid and falls before the cutover,\n            // it means it's a historical date. We should prefer the Julian interpretation.\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            \n            if (julianInstant >= iCutoverMillis) {\n                // This is a crucial check: if the Gregorian date is valid\n                // and before the cutover, but the *same* calendar date in Julian\n                // falls on or after the cutover (i.e., in the cutover gap),\n                // then this date does not exist in the combined chronology.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            // Use the Julian instant for dates effectively before the cutover.\n            return julianInstant;\n        }\n        // If the Gregorian instant is on or after the cutover, use it.\n        return instant;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}