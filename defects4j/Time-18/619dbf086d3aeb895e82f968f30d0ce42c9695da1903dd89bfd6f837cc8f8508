{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour,\n                                      secondOfMinute, millisOfSecond);\n    }\n\n    long instant = 0;\n    boolean useJulian = false;\n    try {\n        // Try Gregorian first\n        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                         hourOfDay, minuteOfHour,\n                                                         secondOfMinute, millisOfSecond);\n        // If it's before the cutover, switch to Julian\n        if (instant < iCutoverMillis) {\n            useJulian = true;\n        }\n    } catch (IllegalArgumentException e) {\n        // Invalid in Gregorian, try Julian\n        useJulian = true;\n    }\n\n    if (useJulian) {\n        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                      hourOfDay, minuteOfHour,\n                                                      secondOfMinute, millisOfSecond);\n        // If that lands inside the cutover gap, it's invalid\n        if (instant >= iCutoverMillis) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}