{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Compute cutover date fields from iCutoverMillis using Gregorian rules.\n        // These are typically pre-computed in GJChronology's constructor but computed here\n        // for method-local scope as they are not explicitly class fields in the provided snippet.\n        long cutoverMillis = iCutoverMillis;\n        int cutoverYear = iGregorianChronology.year().get(cutoverMillis);\n        int cutoverMonth = iGregorianChronology.monthOfYear().get(cutoverMillis);\n        int cutoverDayOfMonth = iGregorianChronology.dayOfMonth().get(cutoverMillis); // This is 15 for standard cutover (1582-10-15)\n\n        // The Julian cutover day (October 4th) is a fixed value relative to the Gregorian.\n        // In Joda-Time's GJChronology, this constant is hardcoded or derived from context.\n        final int JULIAN_LAST_DAY_OF_MONTH_CUTOVER = 4; // This is 4 for Oct 4, 1582\n\n        long instant;\n        try {\n            // Assume date is Gregorian first.\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n            // If Gregorian was successful, check its relation to the cutover.\n            if (instant < cutoverMillis) {\n                // Gregorian instant is before cutover. This implies Julian rules should apply.\n                // Re-parse using Julian and check for the cutover gap.\n                long julianInstant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n                // If the Julian instant falls on or after the Gregorian cutover point,\n                // it means this date (interpreted as Julian) is in the missing 10-day gap.\n                if (julianInstant >= cutoverMillis) {\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n                return julianInstant; // Valid Julian date before cutover\n            } else {\n                // Gregorian instant is on or after cutover. This is the expected chronology.\n                // However, still need to check for the cutover gap.\n                // The gap is between Julian 1582-10-04 and Gregorian 1582-10-15.\n                // So, Gregorian dates from 1582-10-05 to 1582-10-14 should not exist.\n                if (year == cutoverYear && monthOfYear == cutoverMonth &&\n                    dayOfMonth > JULIAN_LAST_DAY_OF_MONTH_CUTOVER && dayOfMonth < cutoverDayOfMonth)\n                {\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n                return instant; // Valid Gregorian date on or after cutover\n            }\n        } catch (IllegalArgumentException e) {\n            // Gregorian date parsing failed (e.g., 1500-02-29).\n            // This *might* be a valid Julian date before the cutover, or a date in the gap,\n            // or a genuinely invalid date.\n\n            // If the date (year/month/day) is clearly after the cutover point,\n            // the Gregorian failure means it's a genuine invalid date.\n            if (year > cutoverYear ||\n                (year == cutoverYear && (monthOfYear > cutoverMonth ||\n                                         (monthOfYear == cutoverMonth && dayOfMonth >= cutoverDayOfMonth))))\n            {\n                throw e; // Rethrow original exception if outside cutover period\n            }\n\n            // Otherwise, it's before or at the cutover year, so it could be a Julian date\n            // or a date in the cutover gap (e.g., 1582-10-05 to 1582-10-14, which are valid in pure Julian).\n            try {\n                instant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } catch (IllegalArgumentException e2) {\n                // If Julian also failed, then it's genuinely invalid in both relevant chronologies.\n                throw e; // Rethrow original Gregorian exception.\n            }\n\n            // Julian parse succeeded. Now check if it's in the cutover gap.\n            // If the Julian instant falls on or after the Gregorian cutover point,\n            // it means this date (interpreted as Julian) is in the missing 10-day gap.\n            if (instant >= cutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return instant; // Valid Julian date before cutover\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}