{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Try using Julian chronology first\n    long instantJulian;\n    try {\n        instantJulian = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // Date is invalid in Julian, proceed to try Gregorian\n        try {\n            instantJulian = -1; // Indicate failure\n        } catch (IllegalArgumentException ex) {\n            throw ex;\n        }\n    }\n    if (instantJulian != -1 && instantJulian < iCutoverMillis) {\n        return instantJulian;\n    }\n\n    // Try using Gregorian chronology\n    long instantGregorian;\n    try {\n        instantGregorian = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n    if (instantGregorian >= iCutoverMillis) {\n        return instantGregorian;\n    }\n\n    // Date is either invalid or in the cutover gap\n    throw new IllegalArgumentException(\"Specified date does not exist\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}