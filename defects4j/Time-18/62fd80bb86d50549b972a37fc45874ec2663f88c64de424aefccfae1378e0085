{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // First try Julian calendar, since historically dates before cutover were Julian\n    long instant = iJulianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (instant >= iCutoverMillis) {\n        // Or maybe it's Gregorian\n        long gregorianInstant;\n        try {\n            gregorianInstant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException ex) {\n            // Gregorian calendar doesn't support this date (e.g. Feb 29, 1500), so use Julian\n            gregorianInstant = instant;\n        }\n        if (gregorianInstant < iCutoverMillis) {\n            instant = gregorianInstant;\n        } else {\n            if (instant >= iCutoverMillis) {\n                // Date falls into the illegal cutover gap\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}