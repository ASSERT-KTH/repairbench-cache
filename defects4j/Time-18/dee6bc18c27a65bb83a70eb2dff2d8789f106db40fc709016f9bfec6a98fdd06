{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Attempt Julian first, then Gregorian to handle cutover correctly.\n        try {\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (julianInstant < iCutoverMillis) {\n                return julianInstant;\n            } else {\n                // Julian date is after cutover; check Gregorian.\n                long gregorianInstant = iGregorianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                if (gregorianInstant >= iCutoverMillis) {\n                    return gregorianInstant;\n                }\n                // The Gregorian date is before cutover, which is invalid.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        } catch (IllegalArgumentException e) {\n            // Julian date is invalid; attempt Gregorian.\n            long gregorianInstant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (gregorianInstant >= iCutoverMillis) {\n                return gregorianInstant;\n            }\n            // Gregorian date is invalid or before cutover with no valid Julian alternative.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}