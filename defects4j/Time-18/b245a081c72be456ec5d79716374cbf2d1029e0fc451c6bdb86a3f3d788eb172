{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // First try Gregorian chronology\n        try {\n            long instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                return instant;  // Valid Gregorian date\n            }\n        } catch (IllegalFieldValueException ex) {\n            // Gregorian validation failed, try Julian chronology\n        }\n\n        // If Gregorian validation failed or date is before cutover, try Julian\n        try {\n            long instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                return instant;  // Valid Julian date\n            }\n        } catch (IllegalFieldValueException ex) {\n            // Julian validation failed, try Gregorian validation again\n        }\n\n        // Both chronologies failed validation or we're in the gap period\n        // Try Gregorian again to ensure we're not in the gap period\n        long instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            return instant;  // It's actually a valid Gregorian date after cutover\n        }\n\n        // Now try Julian to ensure we're not in the gap period from the other side\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            return instant;  // It's actually a valid Julian date before cutover\n        }\n\n        // Okay, it's in the illegal cutover gap or invalid in both chronologies\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}