{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // First, try Julian calendar for pre-cutover dates or when Gregorian rejects day (e.g., Feb 29 1500)\n    long instant;\n    try {\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // Gregorian calendar rejected the input, try Julian\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // Julian result is in Gregorian calendar zone, so invalid date\n            throw e;\n        }\n        return instant;\n    }\n\n    if (instant < iCutoverMillis) {\n        // instant before cutover may require Julian treatment\n        long instantJulian = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instantJulian < iCutoverMillis) {\n            return instantJulian;\n        }\n    }\n\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}