{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        long instant;\n        try {\n            // First, try with Gregorian chronology\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                // If the date is before the cutover, it might be Julian\n                try {\n                    instant = iJulianChronology.getDateTimeMillis\n                        (year, monthOfYear, dayOfMonth,\n                         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                    if (instant >= iCutoverMillis) {\n                        // If Julian date is after or equal to cutover, it's in the illegal gap\n                        throw new IllegalArgumentException(\"Specified date does not exist\");\n                    }\n                } catch (IllegalFieldValueException e) {\n                    // If Julian chronology throws an exception, rethrow the original Gregorian exception\n                    throw new IllegalFieldValueException(e.getFieldName(), e.getValue(), e.getMessage());\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            // If Gregorian chronology throws an exception, try Julian chronology\n            try {\n                instant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                if (instant >= iCutoverMillis) {\n                    // If Julian date is after or equal to cutover, it's in the illegal gap\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n            } catch (IllegalFieldValueException ex) {\n                // If both chronologies throw an exception, rethrow the original exception\n                throw e;\n            }\n        }\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}