{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Try Julian first if clearly before cutover (by year)\n    if (year < iCutoverYear) {\n        return iJulianChronology.getDateTimeMillis(\n                year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Try Gregorian first\n    long instant;\n    try {\n        instant = iGregorianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // Maybe it's valid in Julian\n        instant = iJulianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return instant;\n    }\n    if (instant < iCutoverMillis) {\n        // Double check if it's valid in Julian\n        long julianInstant;\n        try {\n            julianInstant = iJulianChronology.getDateTimeMillis(\n                year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // Not valid in Julian, so propagate error from Gregorian\n            throw e;\n        }\n        if (julianInstant < iCutoverMillis) {\n            return julianInstant;\n        } else {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}