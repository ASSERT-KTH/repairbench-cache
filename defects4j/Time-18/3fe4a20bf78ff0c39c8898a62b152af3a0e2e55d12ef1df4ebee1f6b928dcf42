{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base = getBase();\n    if (base != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n    \n    long instant;\n    \n    // First try to compute the date using the Gregorian rules.\n    // For dates after the cutover this must succeed.\n    try {\n        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            return instant;\n        }\n    } catch (IllegalFieldValueException e) {\n        // If the gregorian calculation fails (for example, 1500-02-29, which is illegal in Gregorian)\n        // then fall through to try the Julian conversion.\n    }\n    \n    // Use the Julian chronology for dates prior to the cutover.\n    instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (instant >= iCutoverMillis) {\n        // The local date falls in the illegal gap.\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}