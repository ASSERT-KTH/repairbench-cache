{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // First try Gregorian (default assumption)\n        try {\n            long instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n            // If the instant is before cutover, try Julian\n            if (instant < iCutoverMillis) {\n                long julianInstant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n                // If it's a valid Julian date before cutover, use it\n                if (julianInstant < iCutoverMillis) {\n                    return julianInstant;\n                }\n            }\n            return instant;\n        } catch (IllegalArgumentException e) {\n            // Try Julian calendar if Gregorian fails\n            try {\n                long julianInstant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n                // Only use Julian date if it's before cutover\n                if (julianInstant < iCutoverMillis) {\n                    return julianInstant;\n                }\n            } catch (IllegalArgumentException ex) {\n                // If both fail, rethrow the original exception\n                throw e;\n            }\n        }\n\n        // If we got here, it means:\n        // 1. The date is valid in Julian calendar but after cutover (invalid)\n        // 2. Or some other edge case we haven't handled\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}