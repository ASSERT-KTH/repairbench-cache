{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Always try Julian first to allow valid Julian dates before cutover.\n    long instant = 0L;\n    boolean julianValid = true;\n    try {\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        julianValid = false;\n    }\n\n    if (julianValid && instant < iCutoverMillis) {\n        return instant;\n    } else {\n        // Try Gregorian for at or after cutover\n        try {\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // If fails for Gregorian, and not a valid Julian, bubble up exception\n            if (!julianValid) {\n                throw e;\n            } else {\n                // Otherwise, for historical broken dates, throw \"gap\"\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        if (instant < iCutoverMillis) {\n            // Result landed before cutover, but Gregorian field would not exist there (should not happen)\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return instant;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}