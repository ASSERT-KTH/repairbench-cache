{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException {\n    Chronology base = getBase();\n    if (base != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    long gregorianMillis = 0L;\n    boolean gregorianValid = false;\n    try {\n        gregorianMillis = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        gregorianValid = true;\n    } catch (IllegalFieldValueException ex) {\n        // Gregorian calculation failed. This may occur for dates that are valid in Julian.\n        gregorianValid = false;\n    }\n\n    // If the Gregorian result is valid and the computed instant is on or after the cutover,\n    // then we use the Gregorian result.\n    if (gregorianValid && gregorianMillis >= iCutoverMillis) {\n        return gregorianMillis;\n    }\n\n    // Otherwise, compute the instant using the Julian chronology.\n    long julianMillis = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (julianMillis >= iCutoverMillis) {\n        // The resulting instant lies in the cutover gap.\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n    return julianMillis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}