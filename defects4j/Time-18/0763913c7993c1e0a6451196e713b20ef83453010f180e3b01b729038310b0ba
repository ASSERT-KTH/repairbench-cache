{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        long instant;\n        try {\n            // Assume date is Gregorian.\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // If Gregorian fails for a date, it might be valid in Julian.\n            // This is especially true for dates before the Gregorian cutover year.\n            // iGregorianCutoverYear is typically 1582.\n            // Check if the year is in the range where Julian is relevant.\n            if (year < iGregorianCutoverYear + 1) { // If year is potentially in Julian territory or very close to cutover\n                try {\n                    instant = iJulianChronology.getDateTimeMillis\n                        (year, monthOfYear, dayOfMonth,\n                         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                } catch (IllegalArgumentException e2) {\n                    // Julian also failed. This date is invalid in both.\n                    // Rethrow the original Gregorian exception, as it's the primary check.\n                    throw e;\n                }\n                // If Julian conversion succeeded, check if it falls into the cutover gap.\n                // If a Julian date maps to an instant >= cutoverMillis, it means\n                // this specific date (Julian interpretation) falls into what would be\n                // Gregorian territory, but the Gregorian conversion failed. This is the gap.\n                if (instant >= iCutoverMillis) {\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n                // Valid Julian date before cutover, return its instant.\n                return instant;\n            } else {\n                // Gregorian failed, and the year is too far after the cutover for Julian to apply.\n                // Re-throw the Gregorian exception.\n                throw e;\n            }\n        }\n\n        // Original logic: If Gregorian date resulted in an instant before the cutover,\n        // it might be a Julian date. This handles cases where Gregorian is valid\n        // but results in a timestamp that chronologically belongs to the Julian era.\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (julianInstant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return julianInstant;\n        }\n        return instant; // Gregorian instant >= cutover, so it's a Gregorian date.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}