{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Try Gregorian first\n    long instant = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    // If Gregorian fails (throws exception), but it's before cutover, try Julian\n    try {\n        // Only check if instant is valid\n        if (instant < iCutoverMillis) {\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n            if (julianInstant < iCutoverMillis) {\n                return julianInstant;\n            }\n        }\n    } catch (IllegalArgumentException ex) {\n        // Try Julian if Gregorian failed and date is before cutover\n        if (year < 1582) {  // Approximate cutover year\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n            if (julianInstant < iCutoverMillis) {\n                return julianInstant;\n            }\n        }\n        throw new IllegalArgumentException(ex.getMessage());\n    }\n\n    // Check for illegal cutover gap\n    if (instant < iCutoverMillis) {\n        // If we get here, Gregorian worked but is before cutover - try Julian\n        long julianInstant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n        if (julianInstant >= iCutoverMillis) {\n            // Okay, it's in the illegal cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return julianInstant;\n    }\n\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}