{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // First try Julian chronology if date is before cutover year, otherwise Gregorian\n        long instant;\n        boolean isJulianLeap = false;\n        try {\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalFieldValueException e) {\n            // Try Julian: could be in Julian leap year not valid in Gregorian\n            try {\n                instant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                if (instant >= iCutoverMillis) {\n                    // Still not valid, so illegal cutover gap\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n            } catch (IllegalFieldValueException je) {\n                // Not valid in either calendar\n                throw e; // propagate original Gregorian exception\n            }\n            return instant;\n        }\n        if (instant < iCutoverMillis) {\n            // double-check for gap\n            long julianInstant;\n            try {\n                julianInstant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } catch (IllegalFieldValueException e) {\n                // Not valid in Julian: keep instant as is\n                return instant;\n            }\n            if (julianInstant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}