{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // First try Gregorian, which is more restrictive\n    try {\n        long instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // It might be a Julian date that Gregorian rejects\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (julianInstant >= iCutoverMillis) {\n                // Illegal cutover gap\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return julianInstant;\n        }\n        return instant;\n    } catch (IllegalArgumentException e) {\n        // Try with Julian calendar if Gregorian fails\n        long julianInstant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (julianInstant < iCutoverMillis) {\n            return julianInstant;\n        }\n        // If Julian gives a date after cutover, it's invalid\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}