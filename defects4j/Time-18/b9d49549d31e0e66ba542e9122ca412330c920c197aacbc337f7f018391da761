{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        long instant;\n        try {\n            // First, try to form the date using the Gregorian rules.\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n            // If the Gregorian calculation succeeded and the resulting instant is before the cutover,\n            // then according to GJChronology rules, this date should be interpreted using Julian rules.\n            // We proceed to try Julian.\n            if (instant < iCutoverMillis) {\n                long julianInstant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                \n                // If the Julian interpretation places the date on or after the cutover,\n                // it implies this date (interpreted as Julian) falls into the non-existent gap.\n                if (julianInstant >= iCutoverMillis) {\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n                // Otherwise, the Julian interpretation is valid and before the cutover.\n                return julianInstant;\n            }\n            // If the Gregorian calculation succeeded and the resulting instant is on or after the cutover,\n            // then it's a valid Gregorian date.\n            return instant;\n\n        } catch (IllegalArgumentException e) {\n            // The Gregorian calculation failed.\n            // This can happen if the date is invalid in Gregorian but valid in Julian\n            // (e.g., Feb 29, 1500), or if the date is in the cutover gap (e.g., Oct 5-14, 1582).\n            // In either case, we must now attempt to interpret the date using Julian rules.\n\n            long julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n            // If the Julian interpretation produces an instant that is on or after the cutover,\n            // and the Gregorian interpretation failed, then this date is in the cutover gap.\n            if (julianInstant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            // Otherwise, the Julian interpretation is valid and before the cutover.\n            // This handles cases like Feb 29, 1500, which are valid Julian dates before the cutover.\n            return julianInstant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}