{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour,\n                                      secondOfMinute, millisOfSecond);\n    }\n\n    long instant;\n    try {\n        // Try Gregorian first\n        instant = iGregorianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (org.joda.time.IllegalFieldValueException ifve) {\n        // If Gregorian rejects the date, it may be valid in Julian\n        instant = iJulianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // Falls into the cutover gap\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return instant;\n    }\n\n    if (instant < iCutoverMillis) {\n        // Before cutover according to Gregorian, so try Julian\n        long julianInstant = iJulianChronology.getDateTimeMillis(\n            year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (julianInstant < iCutoverMillis) {\n            instant = julianInstant;\n        } else {\n            // In the illegal cutover gap\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}