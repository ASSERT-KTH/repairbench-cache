{
    "generation": "private Node tryMinimizeIf(Node n) {\n    Node parent = n.getParent();\n    Node cond = n.getFirstChild();\n\n    if (NodeUtil.isLiteralValue(cond, true)) {\n        return n;\n    }\n\n    Node thenBranch = cond.getNext();\n    Node elseBranch = thenBranch.getNext();\n\n    if (elseBranch == null) {\n        if (isFoldableExpressBlock(thenBranch)) {\n            Node expr = getBlockExpression(thenBranch);\n            if (!late && isPropertyAssignmentInExpression(expr)) {\n                return n;\n            }\n\n            if (cond.isNot()) {\n                if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n                    isLowerPrecedenceInExpression(expr.getFirstChild(), OR_PRECEDENCE)) {\n                    return n;\n                }\n\n                Node or = IR.or(cond.removeFirstChild(), expr.removeFirstChild()).srcref(n);\n                Node newExpr = NodeUtil.newExpr(or);\n                parent.replaceChild(n, newExpr);\n                reportCodeChange();\n                return newExpr;\n            }\n\n            if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                isLowerPrecedenceInExpression(expr.getFirstChild(), AND_PRECEDENCE)) {\n                return n;\n            }\n\n            n.removeChild(cond);\n            Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);\n            Node newExpr = NodeUtil.newExpr(and);\n            parent.replaceChild(n, newExpr);\n            reportCodeChange();\n            return newExpr;\n        } else {\n            if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) {\n                Node innerIf = thenBranch.getFirstChild();\n                if (innerIf.isIf()) {\n                    Node innerCond = innerIf.getFirstChild();\n                    Node innerThenBranch = innerCond.getNext();\n                    Node innerElseBranch = innerThenBranch.getNext();\n\n                    if (innerElseBranch == null &&\n                        !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                           isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n                        n.detachChildren();\n                        n.addChildToBack(IR.and(cond, innerCond.detachFromParent()).srcref(cond));\n                        n.addChildrenToBack(innerThenBranch.detachFromParent());\n                        reportCodeChange();\n                        return n;\n                    }\n                }\n            }\n            return n;\n        }\n    }\n\n    tryRemoveRepeatedStatements(n);\n\n    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n        n.replaceChild(cond, cond.removeFirstChild());\n        n.removeChild(thenBranch);\n        n.addChildToBack(thenBranch);\n        reportCodeChange();\n        return n;\n    }\n\n    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n        Node thenExpr = getBlockReturnExpression(thenBranch);\n        Node elseExpr = getBlockReturnExpression(elseBranch);\n        n.removeChild(cond);\n        thenExpr.detachFromParent();\n        elseExpr.detachFromParent();\n\n        Node returnNode = IR.returnNode(IR.hook(cond, thenExpr, elseExpr).srcref(n));\n        parent.replaceChild(n, returnNode);\n        reportCodeChange();\n        return returnNode;\n    }\n\n    boolean thenIsExpression = isFoldableExpressBlock(thenBranch);\n    boolean elseIsExpression = isFoldableExpressBlock(elseBranch);\n\n    if (thenIsExpression && elseIsExpression) {\n        Node thenExpr = getBlockExpression(thenBranch).getFirstChild();\n        Node elseExpr = getBlockExpression(elseBranch).getFirstChild();\n\n        if (thenExpr.getType() == elseExpr.getType() &&\n            NodeUtil.isAssignmentOp(thenExpr)) {\n            Node lhs = thenExpr.getFirstChild();\n            if (areNodesEqualForInlining(lhs, elseExpr.getFirstChild()) &&\n                !mayEffectMutableState(lhs)) {\n                n.removeChild(cond);\n                thenExpr.removeChild(lhs);\n                Node assign = new Node(thenExpr.getType(), lhs, IR.hook(cond, thenExpr, elseExpr).srcref(n));\n                Node expr = NodeUtil.newExpr(assign);\n                parent.replaceChild(n, expr);\n                reportCodeChange();\n                return expr;\n            }\n        }\n        if (thenExpr.getType() == elseExpr.getType()) {\n            n.removeChild(cond);\n            thenExpr = getBlockExpression(thenBranch).getFirstChild().detachFromParent();\n            elseExpr = getBlockExpression(elseBranch).getFirstChild().detachFromParent();\n            Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node expr = NodeUtil.newExpr(hook);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n            return expr;\n        }\n    }\n\n    if (thenIsExpression && elseIsExpression) {\n        Node thenExpr = getBlockExpression(thenBranch).getFirstChild();\n        Node elseExpr = getBlockExpression(elseBranch).getFirstChild();\n        if (thenExpr.getType() == elseExpr.getType()) {\n            n.removeChild(cond);\n            thenExpr = getBlockExpression(thenBranch).getFirstChild().detachFromParent();\n            elseExpr = getBlockExpression(elseBranch).getFirstChild().detachFromParent();\n            Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node expr = NodeUtil.newExpr(hook);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n            return expr;\n        }\n    }\n\n    boolean thenIsVar = isVarBlock(thenBranch);\n    boolean elseIsVar = isVarBlock(elseBranch);\n\n    if ((thenIsVar && elseIsExpression) || (elseIsVar && thenIsExpression)) {\n        if (thenIsVar) {\n            Node var = getBlockVar(thenBranch);\n            Node assign = getBlockExpression(elseBranch).getFirstChild();\n            if (assign.isAssign()) {\n                Node lhs = var.getFirstChild();\n                Node assignLhs = assign.getFirstChild();\n                if (lhs.getString().equals(assignLhs.getString())) {\n                    Node thenExpr = var.removeChild(lhs).detachFromParent();\n                    Node elseExpr = assign.removeChild(assignLhs).detachFromParent();\n                    Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n                    lhs.addChildrenToBack(hook);\n                    parent.replaceChild(n, var);\n                    reportCodeChange();\n                    return var;\n                }\n            }\n        } else {\n            Node var = getBlockVar(elseBranch);\n            Node assign = getBlockExpression(thenBranch).getFirstChild();\n            if (assign.isAssign()) {\n                Node lhs = var.getFirstChild();\n                Node assignLhs = assign.getFirstChild();\n                if (lhs.getString().equals(assignLhs.getString())) {\n                    Node thenExpr = assign.removeChild(assignLhs).detachFromParent();\n                    Node elseExpr = var.removeChild(lhs).detachFromParent();\n                    Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n                    lhs.addChildrenToBack(hook);\n                    parent.replaceChild(n, var);\n                    reportCodeChange();\n                    return var;\n                }\n            }\n        }\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}