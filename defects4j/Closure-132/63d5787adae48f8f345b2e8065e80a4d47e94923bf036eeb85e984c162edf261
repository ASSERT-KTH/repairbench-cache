{
    "generation": "  private Node tryMinimizeIf(Node n) {\n    Node parent = n.getParent();\n    Node cond = n.getFirstChild();\n\n    if (NodeUtil.isLiteralValue(cond, true)) {\n      return n;\n    }\n\n    Node thenBranch = cond.getNext();\n    Node elseBranch = thenBranch.getNext();\n\n    if (elseBranch == null) {\n      if (isFoldableExpressBlock(thenBranch)) {\n        Node expr = getBlockExpression(thenBranch);\n        if (!late && isPropertyAssignmentInExpression(expr)) {\n          return n;\n        }\n\n        if (cond.isNot()) {\n          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(), OR_PRECEDENCE)) {\n            return n;\n          }\n\n          Node or = IR.or(cond.removeFirstChild(), expr.removeFirstChild()).srcref(n);\n          Node newExpr = NodeUtil.newExpr(or);\n          parent.replaceChild(n, newExpr);\n          reportCodeChange();\n          return newExpr;\n        }\n\n        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(), AND_PRECEDENCE)) {\n          return n;\n        }\n\n        n.removeChild(cond);\n        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);\n        Node newExpr = NodeUtil.newExpr(and);\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n        return newExpr;\n      } else {\n        if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) {\n          Node innerIf = thenBranch.getFirstChild();\n          if (innerIf.isIf()) {\n            Node innerCond = innerIf.getFirstChild();\n            Node innerThenBranch = innerCond.getNext();\n            Node innerElseBranch = innerThenBranch.getNext();\n\n            if (innerElseBranch == null) {\n              if (!(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                    isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n                n.detachChildren();\n                n.addChildToBack(IR.and(cond, innerCond.detachFromParent()).srcref(cond));\n                n.addChildrenToBack(innerThenBranch.detachFromParent());\n                reportCodeChange();\n                return n;\n              }\n            }\n          }\n        }\n        return n;\n      }\n    }\n\n    tryRemoveRepeatedStatements(n);\n\n    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n      n.replaceChild(cond, cond.removeFirstChild());\n      n.removeAllChildrenExcept(cond, thenBranch, elseBranch);\n      reportCodeChange();\n      return n;\n    }\n\n    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n      Node thenExpr = getBlockReturnExpression(thenBranch);\n      Node elseExpr = getBlockReturnExpression(elseBranch);\n      n.removeChild(cond);\n      thenExpr.detachFromParent();\n      elseExpr.detachFromParent();\n      Node returnNode = IR.returnNode(IR.hook(cond, thenExpr, elseExpr).srcref(n));\n      parent.replaceChild(n, returnNode);\n      reportCodeChange();\n      return returnNode;\n    }\n\n    boolean thenIsExpression = isFoldableExpressBlock(thenBranch);\n    boolean elseIsExpression = isFoldableExpressBlock(elseBranch);\n    if (thenIsExpression && elseIsExpression) {\n      Node thenExpr = getBlockExpression(thenBranch);\n      Node elseExpr = getBlockExpression(elseBranch);\n      if (thenExpr.getFirstChild().getType() == Token.WALRUS) {\n        thenExpr = thenExpr.getFirstChild().getFirstChild();\n      }\n      if (elseExpr.getFirstChild().getType() == Token.WALRUS) {\n        elseExpr = elseExpr.getFirstChild().getFirstChild();\n      }\n      if (thenExpr.getType() == elseExpr.getType()) {\n        if (NodeUtil.isAssignmentOp(thenExpr)) {\n          Node lhs = thenExpr.getFirstChild();\n          Node rhs = thenExpr.getLastChild();\n          if (areNodesEqualForInlining(lhs, elseExpr.getFirstChild()) &&\n              !lhs.hasSideEffects() && !rhs.hasSideEffects()) {\n            Node hookNode = IR.hook(cond, rhs, elseExpr.getLastChild()).srcref(n);\n            parent.replaceChild(n, hookNode);\n            reportCodeChange();\n            return hookNode;\n          }\n        }\n      }\n      Node hookNode = IR.hook(cond, getBlockExpression(thenBranch), getBlockExpression(elseBranch)).srcref(n);\n      parent.replaceChild(n, hookNode);\n      reportCodeChange();\n      return hookNode;\n    }\n\n    if (thenIsExpression && elseIsExpression) {\n      Node thenExpr = getBlockExpression(thenBranch);\n      Node elseExpr = getBlockExpression(elseBranch);\n      parent.replaceChild(n, IR.hook(cond, thenExpr, elseExpr).srcref(n));\n      reportCodeChange();\n      return IR.hook(cond, thenExpr, elseExpr).srcref(n);\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}