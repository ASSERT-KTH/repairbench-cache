{
    "generation": "    /**\n     * Set the name of the entry.\n     * @param name the name to use\n     */\n    protected void setName(String name) {\n        if (name != null) {\n            // Windows archives may use \\ instead of / as path separator\n            // - see https://issues.apache.org/jira/browse/COMPRESS-176\n            // java.io.File#list uses \\ on Windows, don't convert those\n            // if the entry has been created by java.io.File#list\n            final boolean isDirectory = isDirectory(); // Store optimization\n            if (!isDirectory && name.endsWith(\"/\")) {\n                // Some tools create directory entries that lack the\n                // explicit directory flag. Note that this is not defined\n                // in the spec and violates the PKZIP appnote.\n                name = name.substring(0, name.length() -1);\n            }\n            // We should normalize backslashes here ONLY if the entry is not marked\n            // as a directory entry and does not end with a forward slash.\n            // If isDirectory() is true or name ends with \"/\", we might have a directory\n            // entry created on Windows via File.list() where the separator should be '\\'.\n            // However, the tests specifically target reading entries created externally (like WinZip)\n            // where '\\' should be treated as '/'. The most straightforward fix for COMPRESS-176\n            // is to always normalize '\\' to '/'. Let's re-evaluate if this causes issues\n            // with Windows directory entries created via File.list().\n            // Based on the failing tests and COMPRESS-176, normalization is required.\n            this.name = name.replace('\\\\', '/');\n        } else {\n            this.name = null;\n        }\n\n        // This ZipArchiveEntry is backed by memory, so clear the extra data cache\n        setExtraFields(ExtraFieldUtils.EMPTY_EXTRA_FIELD_ARRAY);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}