{
    "generation": "    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {\n        if (input == null) // empty body\n            return new Document(baseUri);\n        input = ConstrainableInputStream.wrap(input, bufferSize, 0);\n\n        Document doc = null;\n        boolean fullyRead = false;\n\n        // read the start of the stream and look for a BOM or meta charset\n        input.mark(bufferSize);\n        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed.\n        fullyRead = input.read() == -1; // Check if fully read\n        input.reset(); // Reset input stream to position before reading firstBytes\n\n        // look for BOM - overrides any other header or input\n        BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n        if (bomCharset != null && bomCharset.charset != null) { // Check bomCharset.charset nullness\n            charsetName = bomCharset.charset; // Assign found charset name\n        }\n\n        if (charsetName == null) { // determine from meta. safe first parse as UTF-8\n            firstBytes.rewind(); // Ensure buffer is read from the start for decoding\n            // defaultCharset is used for the initial parse if no BOM/header found\n            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();\n            doc = parser.parseInput(docData, baseUri);\n\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n            String foundCharset = null; // if not found, will keep utf-8 as best attempt\n            for (Element meta : metaElements) {\n                if (meta.hasAttr(\"http-equiv\"))\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\"))\n                    foundCharset = meta.attr(\"charset\");\n                if (foundCharset != null)\n                    break;\n            }\n\n            // look for <?xml encoding='ISO-8859-1'?>\n            if (foundCharset == null && doc.childNodeSize() > 0) {\n                Node first = doc.childNode(0);\n                XmlDeclaration decl = null;\n                if (first instanceof XmlDeclaration)\n                    decl = (XmlDeclaration) first;\n                else if (first instanceof Comment) {\n                    Comment comment = (Comment) first;\n                    if (comment.isXmlDeclaration()) // Use built-in check\n                        decl = comment.asXmlDeclaration();\n                }\n                if (decl != null) {\n                    if (decl.name().equalsIgnoreCase(\"xml\")) // Check name is 'xml'\n                        foundCharset = decl.attr(\"encoding\"); // Get encoding attribute\n                }\n            }\n\n            foundCharset = validateCharset(foundCharset);\n            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)\n                // found a different charset, need to reparse\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\"); // Sanitize\n                charsetName = foundCharset;\n                doc = null; // Discard initial parse, signal for reparse\n            } else if (!fullyRead) {\n                // The charset is default, but the input stream was truncated. Need to reparse with default charset.\n                doc = null; // Discard initial parse, signal for reparse\n                charsetName = defaultCharset; // Ensure charsetName is set for reparsing\n            } else {\n                 // Fully read and charset is default (or not found). Initial parse is sufficient.\n                 // Ensure charsetName reflects the default for later use.\n                 charsetName = defaultCharset;\n            }\n        } else { // charsetName provided by BOM or user/header\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        }\n\n        if (doc == null) { // Reparse needed (or initial parse was discarded)\n            if (charsetName == null) { // Safety check, should be set by now\n                charsetName = defaultCharset;\n            }\n            // We need to read the whole stream with the correct charset.\n            // Input stream position should be at the start due to input.reset() earlier.\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n\n            if (bomCharset != null && bomCharset.offset) {\n                // Skip BOM character read by BufferedReader. Keeping original logic for minimal change.\n                 reader.skip(1);\n            }\n\n            try {\n                doc = parser.parseInput(reader, baseUri);\n            } catch (UncheckedIOException e) {\n                // io exception when parsing (not seen before because reading the stream as we go)\n                throw e.ioException();\n            }\n            // Set the charset that was used for parsing this final document.\n            Charset parsedCharset = Charset.forName(charsetName);\n            doc.outputSettings().charset(parsedCharset);\n\n        }\n        // If doc was not null, it means the initial parse was used. Its charset should be defaultCharset.\n        // The final check below will ensure output settings are correctly set and handle encodability.\n\n        // Final step: ensure charset is set and check encodability.\n        // This applies whether doc came from initial parse or reparse.\n        Validate.notNull(doc, \"Doc should not be null\"); // Ensure doc exists\n\n        Charset currentCharset = doc.outputSettings().charset(); // Get the current charset setting\n        if (currentCharset == null) {\n             // If doc is from initial parse, output setting might be null.\n             // Set it based on the determined charsetName (which is defaultCharset in this case).\n             if (charsetName == null) charsetName = defaultCharset; // Extra safety\n             currentCharset = Charset.forName(charsetName);\n             doc.outputSettings().charset(currentCharset);\n        }\n\n        // THE FIX: Check if the current charset can encode. If not, update to defaultCharset (UTF-8).\n        if (!currentCharset.canEncode()) {\n            Charset fallbackCharset = Charset.forName(defaultCharset); // Use the defined default charset\n            doc.charset(fallbackCharset); // Use doc.charset() to update both output settings and the meta tag\n        }\n\n        input.close(); // Close the outermost InputStream\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}