{
    "generation": "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {\n    if (input == null)\n        return new Document(baseUri);\n    input = ConstrainableInputStream.wrap(input, bufferSize, 0);\n\n    Document doc = null;\n    boolean fullyRead = false;\n\n    // Read a peek at the start of the stream for BOM or meta charset\n    input.mark(bufferSize);\n    ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1: read extra to check for completion\n    fullyRead = input.read() == -1;\n    input.reset();\n\n    // Look for a BOM that overrides all other charsets\n    BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n    if (bomCharset != null)\n        charsetName = bomCharset.charset;\n\n    if (charsetName == null) { // try to determine from meta, first parse as UTF-8\n        String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // Look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n        String foundCharset = null;\n        for (Element meta : metaElements) {\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\"))\n                foundCharset = meta.attr(\"charset\");\n            if (foundCharset != null)\n                break;\n        }\n\n        // Look for <?xml encoding='ISO-8859-1'?>\n        if (foundCharset == null && doc.childNodeSize() > 0) {\n            Node first = doc.childNode(0);\n            XmlDeclaration decl = null;\n            if (first instanceof XmlDeclaration)\n                decl = (XmlDeclaration) first;\n            else if (first instanceof Comment) {\n                Comment comment = (Comment) first;\n                if (comment.isXmlDeclaration())\n                    decl = comment.asXmlDeclaration();\n            }\n            if (decl != null && decl.name().equalsIgnoreCase(\"xml\"))\n                foundCharset = decl.attr(\"encoding\");\n        }\n        foundCharset = validateCharset(foundCharset);\n        if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n            charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            doc = null;\n        } else if (!fullyRead) {\n            doc = null;\n        }\n    } else {\n        // If a charset was specified (e.g. from header or user), ensure it is not empty.\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n\n    if (doc == null) {\n        if (charsetName == null)\n            charsetName = defaultCharset;\n        BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n        if (bomCharset != null && bomCharset.offset)\n            reader.skip(1);\n        try {\n            doc = parser.parseInput(reader, baseUri);\n        } catch (UncheckedIOException e) {\n            throw e.ioException();\n        }\n        // Check if the selected charset can actually be used for output.\n        Charset outCharset = Charset.forName(charsetName);\n        if (!outCharset.canEncode()) {\n            outCharset = Charset.forName(\"UTF-8\");\n            charsetName = \"UTF-8\";\n        }\n        doc.outputSettings().charset(outCharset);\n        // Update any <meta charset> element to reflect the new output charset.\n        Element metaCharset = doc.selectFirst(\"meta[charset]\");\n        if (metaCharset != null) {\n            metaCharset.attr(\"charset\", charsetName);\n        } else {\n            Element head = doc.head();\n            if (head != null) {\n                head.prependElement(\"meta\").attr(\"charset\", charsetName);\n            }\n        }\n    }\n    input.close();\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}