{
    "generation": "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {\n    if (input == null)\n        return new Document(baseUri);\n    input = ConstrainableInputStream.wrap(input, bufferSize, 0);\n\n    Document doc = null;\n    boolean fullyRead = false;\n\n    // read the start of the stream and look for a BOM or meta charset\n    input.mark(bufferSize);\n    ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1);\n    fullyRead = input.read() == -1;\n    input.reset();\n\n    // look for BOM - overrides any other header or input\n    BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n    if (bomCharset != null)\n        charsetName = bomCharset.charset;\n\n    if (charsetName == null) {\n        // safe first parse as UTF-8\n        String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // look for <meta http-equiv=\"Content-Type\" content=\"\u2026charset=\u2026\"> or HTML5 <meta charset=\"\u2026\">\n        Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n        String foundCharset = null;\n        for (Element meta : metaElements) {\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\"))\n                foundCharset = meta.attr(\"charset\");\n            if (foundCharset != null)\n                break;\n        }\n        // look for <?xml encoding='\u2026'?>\n        if (foundCharset == null && doc.childNodeSize() > 0) {\n            Node first = doc.childNode(0);\n            XmlDeclaration decl = null;\n            if (first instanceof XmlDeclaration) {\n                decl = (XmlDeclaration) first;\n            } else if (first instanceof Comment) {\n                Comment comment = (Comment) first;\n                if (comment.isXmlDeclaration())\n                    decl = comment.asXmlDeclaration();\n            }\n            if (decl != null && \"xml\".equalsIgnoreCase(decl.name()))\n                foundCharset = decl.attr(\"encoding\");\n        }\n        foundCharset = validateCharset(foundCharset);\n        if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n            // need to re-decode\n            foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            charsetName = foundCharset;\n            doc = null; \n        } else if (!fullyRead) {\n            doc = null;\n        }\n    } else {\n        // specified by content type header (or by user)\n        Validate.notEmpty(charsetName,\n            \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n\n    if (doc == null) {\n        if (charsetName == null)\n            charsetName = defaultCharset;\n        BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n        if (bomCharset != null && bomCharset.offset)\n            reader.skip(1);\n        try {\n            doc = parser.parseInput(reader, baseUri);\n        } catch (UncheckedIOException e) {\n            throw e.ioException();\n        }\n\n        Charset charset = Charset.forName(charsetName);\n        doc.outputSettings().charset(charset);\n\n        // some charsets can read but not encode; switch to UTF-8 and update the meta element\n        if (!charset.canEncode()) {\n            Charset utf8 = Charset.forName(defaultCharset);\n            doc.outputSettings().charset(utf8);\n            // update HTML5 <meta charset=\u2026>\n            for (Element meta : doc.select(\"meta[charset]\")) {\n                meta.attr(\"charset\", utf8.name());\n            }\n            // update legacy <meta http-equiv=\"content-type\">\n            for (Element meta : doc.select(\"meta[http-equiv=content-type]\")) {\n                meta.attr(\"content\", \"text/html; charset=\" + utf8.name());\n            }\n        }\n    }\n\n    input.close();\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}