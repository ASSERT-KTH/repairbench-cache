{
    "generation": "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete = !beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n            ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps != null);\n\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n            .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals != null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n        ignored = ignorals.getIgnored();\n        for (String propName : ignored) {\n            builder.addIgnorable(propName);\n        }\n    } else {\n        ignored = Collections.emptySet();\n    }\n\n    // Any-setter (method or field)?\n    AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n    AnnotatedMember anySetterField = null;\n    if (anySetterMethod != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n    } else {\n        anySetterField = beanDesc.findAnySetterField();\n        if (anySetterField != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n        }\n    }\n    // If no any-setter, add explicit @JsonIgnore properties as ignorable\n    if (anySetterMethod == null && anySetterField == null) {\n        Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n        if (ignored2 != null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n\n    final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n            && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n\n    // First pass: filter out property definitions\n    List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n            beanDesc, builder, beanDesc.findProperties(), ignored);\n\n    // Re\u2010include any properties that were only @JsonIgnore on the getter,\n    // but still have a setter or field to allow deserialization\n    Collection<String> explicitIgnored = beanDesc.getIgnoredPropertyNames();\n    if (explicitIgnored != null && !explicitIgnored.isEmpty()) {\n        // remember which names we already have\n        Set<String> existing = new HashSet<>();\n        for (BeanPropertyDefinition pd : propDefs) {\n            existing.add(pd.getName());\n        }\n        // inspect all bean properties\n        for (BeanPropertyDefinition pd : beanDesc.findProperties()) {\n            String name = pd.getName();\n            if (existing.contains(name) || !explicitIgnored.contains(name)) {\n                continue;\n            }\n            // if the getter was ignored, but setter/field exist and are not ignored\n            AnnotatedMethod getter = pd.getGetter();\n            boolean getterIgnored = (getter != null\n                    && getter.getAnnotation(com.fasterxml.jackson.annotation.JsonIgnore.class) != null);\n            if (!getterIgnored) {\n                continue;\n            }\n            AnnotatedMethod setter = pd.getSetter();\n            AnnotatedMember field = pd.getField();\n            boolean setterOk = (setter != null\n                    && setter.getAnnotation(com.fasterxml.jackson.annotation.JsonIgnore.class) == null);\n            boolean fieldOk = (field != null\n                    && field.getAnnotation(com.fasterxml.jackson.annotation.JsonIgnore.class) == null);\n            if (setterOk || fieldOk) {\n                propDefs.add(pd);\n            }\n        }\n    }\n\n    // Allow any custom modifiers to adjust the list\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n\n    // Finally, construct the actual SettableBeanProperty instances\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop = null;\n        if (propDef.hasSetter()) {\n            JavaType propertyType = propDef.getSetter().getParameterType(0);\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            JavaType propertyType = propDef.getField().getType();\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters && propDef.hasGetter()) {\n            AnnotatedMethod getter = propDef.getGetter();\n            Class<?> rawType = getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawType)\n                    || Map.class.isAssignableFrom(rawType)) {\n                prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        // handle constructor (creator) properties\n        if (hasCreatorProps && propDef.hasConstructorParameter()) {\n            final String name = propDef.getName();\n            CreatorProperty cprop = null;\n            if (creatorProps != null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\n                        cprop = (CreatorProperty) cp;\n                        break;\n                    }\n                }\n            }\n            if (cprop == null) {\n                List<String> n = new ArrayList<>();\n                for (SettableBeanProperty cp : creatorProps) {\n                    n.add(cp.getName());\n                }\n                ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                        \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                        name, n);\n                continue;\n            }\n            if (prop != null) {\n                cprop.setFallbackSetter(prop);\n            }\n            prop = cprop;\n            builder.addCreatorProperty(cprop);\n            continue;\n        }\n        if (prop != null) {\n            Class<?>[] views = propDef.findViews();\n            if (views == null && !ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                views = NO_VIEWS;\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}