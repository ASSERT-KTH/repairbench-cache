{
    "generation": "    /**\n     * Method called to figure out settable properties for the\n     * bean deserializer to use.\n     *<p>\n     * Note: designed to be overridable, and effort is made to keep interface\n     * similar between versions.\n     */\n    protected void addBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n    {\n        final boolean isConcrete = !beanDesc.getType().isAbstract();\n        final SettableBeanProperty[] creatorProps = isConcrete\n                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n                : null;\n        final boolean hasCreatorProps = (creatorProps != null);\n        \n        // 01-May-2016, tatu: Which base type to use here gets tricky, since\n        //   it may often make most sense to use general type for overrides,\n        //   but what we have here may be more specific impl type. But for now\n        //   just use it as is.\n        JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n                .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                        beanDesc.getClassInfo());\n        Set<String> ignored;\n\n        if (ignorals != null) {\n            boolean ignoreAny = ignorals.getIgnoreUnknown();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n            // Or explicit/implicit definitions?\n            ignored = ignorals.getIgnored();\n            for (String propName : ignored) {\n                builder.addIgnorable(propName);\n            }\n        } else {\n            ignored = Collections.emptySet();\n        }\n\n        // Also, do we have a fallback \"any\" setter?\n        AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n        AnnotatedMember anySetterField = null;\n        if (anySetterMethod != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n        }\n        else {\n        \tanySetterField = beanDesc.findAnySetterField();\n        \tif(anySetterField != null) {\n        \t\tbuilder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n        \t}\n        }\n        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter\n        // Implicit ones via @JsonIgnore and equivalent?\n        if (anySetterMethod == null && anySetterField == null) {\n            Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n            if (ignored2 != null) {\n                for (String propName : ignored2) {\n                    // allow ignoral of similarly named JSON property, but do not force;\n                    // latter means NOT adding this to 'ignored':\n                    builder.addIgnorable(propName);\n                }\n            }\n        }\n        final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n\n        // Ok: let's then filter out property definitions\n        List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n                beanDesc, builder, beanDesc.findProperties(), ignored);\n\n        // After which we can let custom code change the set\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n            }\n        }\n        \n        // At which point we still have all kinds of properties; not all with mutators:\n        for (BeanPropertyDefinition propDef : propDefs) {\n            SettableBeanProperty prop = null;\n            /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             */\n            // Priority:\n            // 1. Explicit setter method (reported by propDef)\n            // 2. Field (reported by propDef)\n            // 3. Setterless (getter-based for collections/maps)\n            // 4. Fallback for cases like [databind#1595] where setter is logically present but not via propDef.getSetter()\n\n            if (propDef.hasSetter()) {\n                JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField()) {\n                JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                /* May also need to consider getters\n                 * for Map/Collection properties; but with lowest precedence\n                 */\n                AnnotatedMethod getter = propDef.getGetter();\n                // should only consider Collections and Maps, for now?\n                Class<?> rawPropertyType = getter.getRawType();\n                if (Collection.class.isAssignableFrom(rawPropertyType)\n                        || Map.class.isAssignableFrom(rawPropertyType)) {\n                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                }\n            }\n\n            // [databind#1595] workaround: If property was not found as writable (setter/field)\n            // but is marked as \"writable\" by BeanPropertyDefinition (meaning it was probably meant\n            // to have one, but was lost due to getter being ignored or similar internal issue).\n            // This is a LAST RESORT.\n            if (prop == null && propDef.isWritable() && !propDef.hasConstructorParameter()) {\n                // Try to find the setter method directly, ignoring any implicit ignoral\n                // that might have affected `propDef.getSetter()`'s internal state.\n                // This is a heuristic based on standard JavaBeans conventions.\n                AnnotatedMethod actualSetter = beanDesc.findMethod(\n                    ClassUtil.setterMethodName(propDef.getName()), // e.g., \"setName\"\n                    1 // assumes single parameter setter\n                );\n                // Additional checks: ensure the method is actually a setter by signature (void return, single param)\n                // and it's not explicitly @JsonIgnore'd itself.\n                if (actualSetter != null\n                        && actualSetter.getRawParameterTypes().length == 1\n                        && actualSetter.getRawReturnType() == Void.TYPE\n                        && !actualSetter.hasAnnotation(JsonIgnore.class)) // Ensure setter itself is not @JsonIgnore'd\n                {\n                    // This is a setter that was missed by `propDef.getSetter()` when `propDef` was built.\n                    // We need to create a `SettableBeanProperty` using this actual setter.\n                    // Since `constructSettableProperty` relies on `propDef.getSetter()` being non-null,\n                    // and we cannot modify `propDef` here, we must create a new `BeanPropertyDefinition`\n                    // with the correct setter. This is a common pattern for such workarounds.\n                    \n                    // Create a \"fixed\" BeanPropertyDefinition that includes the found setter.\n                    // Note: This relies on internal details of BeanPropertyDefinition construction,\n                    // and is a workaround for a bug that ideally should be fixed upstream in POJOPropertyBuilder.\n                    BeanPropertyDefinition fixedPropDef = BeanPropertyDefinition.construct(\n                        ctxt.getConfig(),\n                        actualSetter, // Use the actual setter as the primary mutator\n                        propDef.getName(),\n                        propDef.getMetadata(),\n                        propDef.getPrimaryType() // Or actualSetter.getParameterType(0)\n                    );\n                    // Copy other info from original propDef (getter, field, constructor param, etc.)\n                    // This is simplified; a full copy might be more complex depending on Jackson version.\n                    // For typical cases, just assigning the setter and name might be sufficient if\n                    // other properties are inferred.\n                    \n                    // The minimal necessary for `constructSettableProperty` is usually the setter/field member.\n                    // Let's ensure the 'fixed' definition has the setter:\n                    fixedPropDef.setSetter(actualSetter);\n                    // Use the original propDef's annotations and type if possible, or derive from setter\n                    JavaType propertyType = actualSetter.getParameterType(0);\n                    \n                    prop = constructSettableProperty(ctxt, beanDesc, fixedPropDef, propertyType);\n                }\n            }\n\n\n            // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n            //   (since they are never used anyway)\n            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                /* If property is passed via constructor parameter, we must\n                 * handle things in special way. Not sure what is the most optimal way...\n                 * for now, let's just call a (new) method in builder, which does nothing.\n                 */\n                // but let's call a method just to allow custom builders to be aware...\n                final String name = propDef.getName();\n                CreatorProperty cprop = null;\n                if (creatorProps != null) {\n                    for (SettableBeanProperty cp : creatorProps) {\n                        if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\n                            cprop = (CreatorProperty) cp;\n                            break;\n                        }\n                    }\n                }\n                if (cprop == null) {\n                    List<String> n = new ArrayList<>();\n                    for (SettableBeanProperty cp : creatorProps) {\n                        n.add(cp.getName());\n                    }\n                    ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                            \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                            name, n);\n                    continue;\n                }\n                if (prop != null) {\n                    cprop.setFallbackSetter(prop);\n                }\n                prop = cprop;\n                builder.addCreatorProperty(cprop);\n                continue;\n            }\n\n            if (prop != null) {\n                Class<?>[] views = propDef.findViews();\n                if (views == null) {\n                    // one more twist: if default inclusion disabled, need to force empty set of views\n                    if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                        views = NO_VIEWS;\n                    }\n                }\n                // one more thing before adding to builder: copy any metadata\n                prop.setViews(views);\n                builder.addProperty(prop);\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}