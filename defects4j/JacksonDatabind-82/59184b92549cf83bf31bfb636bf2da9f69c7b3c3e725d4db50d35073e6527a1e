{
    "generation": "    /**\n     * Method called to figure out settable properties for the\n     * bean deserializer to use.\n     *<p>\n     * Note: designed to be overridable, and effort is made to keep interface\n     * similar between versions.\n     */\n    protected void addBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n    {\n        final boolean isConcrete = !beanDesc.getType().isAbstract();\n        final SettableBeanProperty[] creatorProps = isConcrete\n                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n                : null;\n        final boolean hasCreatorProps = (creatorProps != null);\n        \n        // 01-May-2016, tatu: Which base type to use here gets tricky, since\n        //   it may often make most sense to use general type for overrides,\n        //   but what we have here may be more specific impl type. But for now\n        //   just use it as is.\n        JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n                .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                        beanDesc.getClassInfo());\n        \n        // 23-Oct-2019, tatu: [databind#1595] allowGetters/allowSetters changes interpretation\n        //    of ignoral for properties that have them.\n        //    Logic must be careful: if allowSetters true, property MUST NOT be ignored IF it has a setter.\n        //    Problem: `filterBeanProps` (in BasicDeserializerFactory) determines if property is to be kept.\n        //    It internally uses `beanDesc.findJsonIgnoreProperties().getAllowSetters()`, which is broken\n        //    as it only finds class-level.\n        //    So, we must modify the `ignored` set passed to `filterBeanProps` to reflect the correct\n        //    `allowSetters` logic from the `ignorals` object computed here.\n\n        Set<String> effectivelyIgnoredForFiltering = new HashSet<>();\n        Set<String> propertiesToAddAsIgnorable = new HashSet<>();\n\n        if (ignorals != null) {\n            boolean ignoreAny = ignorals.getIgnoreUnknown();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n            \n            final Boolean allowSetters = ignorals.getAllowSetters();\n            final Boolean allowGetters = ignorals.getAllowGetters(); // For #1595 test case where allowGetters implies allowing setters\n\n            // Iterate through ALL bean properties to determine which should effectively be ignored for setting.\n            // This allows checking `hasSetter()` which is not available from just the `ignored` string set.\n            for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n                String propName = propDef.getName();\n                if (ignorals.getIgnored().contains(propName)) {\n                    // This property is declared ignored. Now check if allowSetters (or allowGetters per test logic) overrides this.\n                    boolean reallyIgnoreForSetter = true;\n                    if (allowSetters != null && allowSetters.booleanValue()) {\n                        if (propDef.hasSetter() || propDef.hasField()) {\n                            reallyIgnoreForSetter = false; // allowSetters is true, and it has a setter/field, so DO NOT ignore\n                        }\n                    } else if (allowGetters != null && allowGetters.booleanValue()) {\n                         // This branch handles specific interpretation for [databind#1595] where `allowGetters=true`\n                         // on a field implies property should not be ignored for deserialization if it has a setter/field.\n                         if (propDef.hasSetter() || propDef.hasField()) {\n                             reallyIgnoreForSetter = false;\n                         }\n                    }\n\n                    if (reallyIgnoreForSetter) {\n                        effectivelyIgnoredForFiltering.add(propName);\n                        // Also add to builder's ignorable set for consistency (filterBeanProps will also add if removed)\n                        propertiesToAddAsIgnorable.add(propName);\n                    }\n                }\n            }\n        }\n\n        // Apply explicitly ignored properties to the builder\n        for (String propName : propertiesToAddAsIgnorable) {\n            builder.addIgnorable(propName);\n        }\n\n        // Also, do we have a fallback \"any\" setter?\n        AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n        AnnotatedMember anySetterField = null;\n        if (anySetterMethod != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n        }\n        else {\n        \tanySetterField = beanDesc.findAnySetterField();\n        \tif(anySetterField != null) {\n        \t\tbuilder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n        \t}\n        }\n        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter\n        // Implicit ones via @JsonIgnore and equivalent?\n        if (anySetterMethod == null && anySetterField == null) {\n            Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n            if (ignored2 != null) {\n                for (String propName : ignored2) {\n                    // Only add implicit ignores if they are not already handled as effectively un-ignored by explicit rules\n                    if (!effectivelyIgnoredForFiltering.contains(propName)) {\n                        builder.addIgnorable(propName);\n                    }\n                }\n            }\n        }\n        final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n\n        // Ok: let's then filter out property definitions\n        // Pass the `effectivelyIgnoredForFiltering` set which now correctly represents\n        // properties that should be filtered out from bean properties.\n        List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n                beanDesc, builder, beanDesc.findProperties(), effectivelyIgnoredForFiltering);\n\n        // After which we can let custom code change the set\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n            }\n        }\n        \n        // At which point we still have all kinds of properties; not all with mutators:\n        for (BeanPropertyDefinition propDef : propDefs) {\n            SettableBeanProperty prop = null;\n            /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             */\n            if (propDef.hasSetter()) {\n                JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField()) {\n                JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                /* May also need to consider getters\n                 * for Map/Collection properties; but with lowest precedence\n                 */\n                AnnotatedMethod getter = propDef.getGetter();\n                // should only consider Collections and Maps, for now?\n                Class<?> rawPropertyType = getter.getRawType();\n                if (Collection.class.isAssignableFrom(rawPropertyType)\n                        || Map.class.isAssignableFrom(rawPropertyType)) {\n                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                }\n            }\n            // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n            //   (since they are never used anyway)\n            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                /* If property is passed via constructor parameter, we must\n                 * handle things in special way. Not sure what is the most optimal way...\n                 * for now, let's just call a (new) method in builder, which does nothing.\n                 */\n                // but let's call a method just to allow custom builders to be aware...\n                final String name = propDef.getName();\n                CreatorProperty cprop = null;\n                if (creatorProps != null) {\n                    for (SettableBeanProperty cp : creatorProps) {\n                        if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\n                            cprop = (CreatorProperty) cp;\n                            break;\n                        }\n                    }\n                }\n                if (cprop == null) {\n                    List<String> n = new ArrayList<>();\n                    for (SettableBeanProperty cp : creatorProps) {\n                        n.add(cp.getName());\n                    }\n                    ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                            \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                            name, n);\n                    continue;\n                }\n                if (prop != null) {\n                    cprop.setFallbackSetter(prop);\n                }\n                prop = cprop;\n                builder.addCreatorProperty(cprop);\n                continue;\n            }\n\n            if (prop != null) {\n                Class<?>[] views = propDef.findViews();\n                if (views == null) {\n                    // one more twist: if default inclusion disabled, need to force empty set of views\n                    if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                        views = NO_VIEWS;\n                    }\n                }\n                // one more thing before adding to builder: copy any metadata\n                prop.setViews(views);\n                builder.addProperty(prop);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}