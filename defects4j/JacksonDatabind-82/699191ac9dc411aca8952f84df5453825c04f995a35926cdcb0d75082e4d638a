{
    "generation": "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete = !beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n            ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps != null);\n\n    // First: combine properties to ignore from configuration and introspection.\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n            .getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo());\n    Set<String> ignored = new HashSet<>();\n    if (ignorals != null) {\n        // Retain \"ignore unknown\" setting from annotations/config\n        builder.setIgnoreUnknownProperties(ignorals.getIgnoreUnknown());\n        ignored.addAll(ignorals.getIgnored());\n    }\n    // Also add any properties the introspector has found as \"ignored\"\n    Collection<String> ignoredFromDesc = beanDesc.getIgnoredPropertyNames();\n    if (ignoredFromDesc != null) {\n        ignored.addAll(ignoredFromDesc);\n    }\n    // For \"ignore getter not setter\" support, if a property has an explicit mutator (setter or field),\n    // then it is not to be ignored for deserialization.\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.hasSetter() || propDef.hasField()) {\n            ignored.remove(propDef.getName());\n        }\n    }\n\n    // Determine if there is an \"any setter\"\n    AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n    AnnotatedMember anySetterField = beanDesc.findAnySetterField();\n    // Only add ignorable names if there is no any-setter (which would otherwise catch unknowns)\n    if (anySetterMethod == null && anySetterField == null) {\n        for (String propName : ignored) {\n            builder.addIgnorable(propName);\n        }\n    }\n\n    // Then, see if there is an explicit any-setter to handle unknown properties\n    if (anySetterMethod != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n    } else if (anySetterField != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n    }\n\n    final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n            && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n\n    // Filter property definitions using the (now cleaned) set of ignored names.\n    List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n            beanDesc, builder, beanDesc.findProperties(), ignored);\n\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n\n    // And then add creator and non-creator properties\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop = null;\n        if (propDef.hasSetter()) {\n            JavaType propertyType = propDef.getSetter().getParameterType(0);\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            JavaType propertyType = propDef.getField().getType();\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters && propDef.hasGetter()) {\n            // Only allow setterless properties for Collection/Map types:\n            AnnotatedMethod getter = propDef.getGetter();\n            Class<?> rawPropertyType = getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType)\n                    || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (hasCreatorProps && propDef.hasConstructorParameter()) {\n            final String name = propDef.getName();\n            CreatorProperty cprop = null;\n            if (creatorProps != null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\n                        cprop = (CreatorProperty) cp;\n                        break;\n                    }\n                }\n            }\n            if (cprop == null) {\n                List<String> n = new ArrayList<>();\n                for (SettableBeanProperty cp : creatorProps) {\n                    n.add(cp.getName());\n                }\n                ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                        \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                        name, n);\n                continue;\n            }\n            if (prop != null) {\n                cprop.setFallbackSetter(prop);\n            }\n            prop = cprop;\n            builder.addCreatorProperty(cprop);\n            continue;\n        }\n\n        if (prop != null) {\n            Class<?>[] views = propDef.findViews();\n            if (views == null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views = NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}