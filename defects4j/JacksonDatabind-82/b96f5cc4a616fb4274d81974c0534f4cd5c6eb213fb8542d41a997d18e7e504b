{
    "generation": "@Override\nprotected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete = !beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n            ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps != null);\n\n    // 1) class\u2010level ignorals (@JsonIgnoreProperties)\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n            .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals != null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n        ignored = ignorals.getIgnored();\n        for (String propName : ignored) {\n            builder.addIgnorable(propName);\n        }\n    } else {\n        ignored = Collections.emptySet();\n    }\n\n    // 2) any\u2010setter\n    AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n    AnnotatedMember anySetterField = null;\n    if (anySetterMethod != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n    } else {\n        anySetterField = beanDesc.findAnySetterField();\n        if (anySetterField != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n        }\n    }\n    // also skip explicit ignores from BeanDescription if no any\u2010setter\n    if (anySetterMethod == null && anySetterField == null) {\n        Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n        if (ignored2 != null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n\n    final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n            && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n\n    // 3) manually filter bean properties so that @JsonIgnore on getter\n    //    does NOT block a non\u2010ignored setter\n    List<BeanPropertyDefinition> raw = beanDesc.findProperties();\n    List<BeanPropertyDefinition> propDefs = new ArrayList<>(raw.size());\n    for (BeanPropertyDefinition propDef : raw) {\n        String name = propDef.getName();\n        // a) skip class\u2010level ignores\n        if (ignored.contains(name)) {\n            continue;\n        }\n        // b) skip explicit @JsonIgnore only if it applies to setter/field (not mere getter)\n        if (propDef.isExplicitlyIgnored()) {\n            AnnotatedMethod setter = propDef.getSetter();\n            AnnotatedField  field  = propDef.getField();\n            boolean skip = true;\n            if (setter != null\n                && setter.getAnnotation(com.fasterxml.jackson.annotation.JsonIgnore.class) == null) {\n                // setter present and not ignored => keep\n                skip = false;\n            }\n            if (skip && field != null\n                && field.getAnnotation(com.fasterxml.jackson.annotation.JsonIgnore.class) == null) {\n                // field present and not ignored => keep\n                skip = false;\n            }\n            if (skip) {\n                builder.addIgnorable(name);\n                continue;\n            }\n        }\n        // c) require at least one mutator: setter or field, or (optionally) collection/map getter\n        if (propDef.hasSetter() || propDef.hasField()) {\n            // OK\n        } else if (useGettersAsSetters && propDef.hasGetter()) {\n            AnnotatedMethod gm = propDef.getGetter();\n            Class<?> rt = gm.getRawType();\n            if (Collection.class.isAssignableFrom(rt)\n                    || Map.class.isAssignableFrom(rt)) {\n                // OK, will be treated as setterless\n            } else {\n                continue;\n            }\n        } else {\n            continue;\n        }\n        propDefs.add(propDef);\n    }\n\n    // 4) allow custom modifiers to tweak property list\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n\n    // 5) build SettableBeanProperty instances\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop = null;\n        if (propDef.hasSetter()) {\n            JavaType type = propDef.getSetter().getParameterType(0);\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, type);\n        } else if (propDef.hasField()) {\n            JavaType type = propDef.getField().getType();\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, type);\n        } else if (useGettersAsSetters && propDef.hasGetter()) {\n            AnnotatedMethod getter = propDef.getGetter();\n            Class<?> rt = getter.getRawType();\n            if (Collection.class.isAssignableFrom(rt)\n                    || Map.class.isAssignableFrom(rt)) {\n                prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        // handle creator\u2010properties (constructor args)\n        if (hasCreatorProps && propDef.hasConstructorParameter()) {\n            String pname = propDef.getName();\n            CreatorProperty cprop = null;\n            if (creatorProps != null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (pname.equals(cp.getName()) && cp instanceof CreatorProperty) {\n                        cprop = (CreatorProperty) cp;\n                        break;\n                    }\n                }\n            }\n            if (cprop == null) {\n                List<String> names = new ArrayList<>();\n                for (SettableBeanProperty cp : creatorProps) {\n                    names.add(cp.getName());\n                }\n                ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                        \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                        pname, names);\n                continue;\n            }\n            if (prop != null) {\n                cprop.setFallbackSetter(prop);\n            }\n            prop = cprop;\n            builder.addCreatorProperty(cprop);\n            continue;\n        }\n        // finally add it\n        if (prop != null) {\n            Class<?>[] views = propDef.findViews();\n            if (views == null && !ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                views = NO_VIEWS;\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}