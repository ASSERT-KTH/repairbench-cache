{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n\n            // To ensure the longest possible time zone ID is matched first,\n            // we sort the IDs by length in descending order. This prevents\n            // shorter, partial matches (e.g., \"America/Dawson\") from being\n            // picked before longer, correct matches (e.g., \"America/Dawson_Creek\").\n            //\n            // Since ALL_IDS is a static Set and its iteration order is not guaranteed\n            // to be by length, we create a temporary sorted list for parsing.\n            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);\n            java.util.Collections.sort(sortedIds, (s1, s2) -> s2.length() - s1.length());\n\n            for (String id : sortedIds) {\n                if (str.startsWith(id)) {\n                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));\n                    return position + id.length();\n                }\n            }\n            return ~position;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}