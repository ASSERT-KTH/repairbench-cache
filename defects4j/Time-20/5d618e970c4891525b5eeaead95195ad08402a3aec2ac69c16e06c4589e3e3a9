{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            String bestMatchId = null;\n            int bestMatchLength = 0;\n\n            // Find the longest matching ID\n            for (String id : ALL_IDS) {\n                if (str.startsWith(id)) {\n                    int idLength = id.length();\n                    // Ensure it's a better match than what we have already\n                    // Also check that it's not just a partial match followed by non-separator chars\n                    // (although time zone IDs rarely contain ambiguous separators like '/')\n                    if (idLength > bestMatchLength) {\n                         // Basic check: if the text is longer than the matched ID,\n                         // ensure the next character isn't something that could\n                         // continue a valid ID (though this specific check might\n                         // not be strictly necessary for standard TZ IDs which are usually well-defined)\n                         // For this specific bug (\"America/Dawson\" vs \"America/Dawson_Creek\"),\n                         // simply finding the longest prefix match is sufficient.\n                        bestMatchId = id;\n                        bestMatchLength = idLength;\n                    }\n                }\n            }\n\n            if (bestMatchId != null) {\n                bucket.setZone(DateTimeZone.forID(bestMatchId));\n                return position + bestMatchLength;\n            }\n\n            return ~position;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}