{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            \n            // To correctly parse time zone IDs, especially when some IDs are prefixes of others\n            // (e.g., \"America/Dawson\" and \"America/Dawson_Creek\"),\n            // we must attempt to match the longest IDs first.\n            // ALL_IDS is likely an unordered Set or a List not sorted by length,\n            // so we create a temporary sorted list for the parsing logic.\n            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);\n            java.util.Collections.sort(sortedIds, new java.util.Comparator<String>() {\n                @Override\n                public int compare(String s1, String s2) {\n                    // Sort by length in descending order (longest first)\n                    int cmp = s2.length() - s1.length();\n                    if (cmp == 0) {\n                        // For IDs of the same length, sort alphabetically to ensure deterministic behavior\n                        cmp = s1.compareTo(s2);\n                    }\n                    return cmp;\n                }\n            });\n\n            for (String id : sortedIds) {\n                if (str.startsWith(id)) {\n                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));\n                    return position + id.length();\n                }\n            }\n            return ~position;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}