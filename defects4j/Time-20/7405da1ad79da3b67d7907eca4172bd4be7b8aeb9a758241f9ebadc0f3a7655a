{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n\n            // Sort by length descending to try longest matches first\n            List<String> sortedIds = new ArrayList<>(Arrays.asList(ALL_IDS));\n            sortedIds.sort((a, b) -> Integer.compare(b.length(), a.length()));\n\n            for (String id : sortedIds) {\n                if (str.startsWith(id)) {\n                    // Make sure the character after the ID isn't a valid ID character (whitelist approach would be better)\n                    if (id.length() == str.length() || !Character.isLetterOrDigit(str.charAt(id.length()))) {\n                        bucket.setZone(DateTimeZone.forID(id));\n                        return position + id.length();\n                    }\n                }\n            }\n            return ~position;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}