{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            // To ensure that longer, more specific time zone IDs are matched before shorter,\n            // less specific ones (e.g., \"America/Dawson_Creek\" before \"America/Dawson\"),\n            // the available IDs must be processed in order of descending length.\n            // Although sorting on every call is not optimal for performance, it's necessary\n            // here to fix the bug within the scope of this single function.\n            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);\n            java.util.Collections.sort(sortedIds, new java.util.Comparator<String>() {\n                @Override\n                public int compare(String s1, String s2) {\n                    return s2.length() - s1.length(); // Sort by length in descending order\n                }\n            });\n\n            for (String id : sortedIds) {\n                if (str.startsWith(id)) {\n                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));\n                    return position + id.length();\n                }\n            }\n            return ~position;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}