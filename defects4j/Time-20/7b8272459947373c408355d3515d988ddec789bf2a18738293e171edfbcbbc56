{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            \n            // To ensure that longer time zone IDs are matched before shorter, prefix-matching IDs,\n            // we need to iterate through the IDs sorted by length in descending order.\n            // This prevents issues like \"America/Dawson\" being matched instead of \"America/Dawson_Creek\".\n            // Creating and sorting a new list on every call has a performance overhead.\n            // In a real-world library, 'ALL_IDS' would ideally be pre-sorted once (e.g., in a static initializer)\n            // into a dedicated list for parsing, but given the constraint to modify only this function,\n            // a local sort is applied.\n            java.util.List<String> sortedIds = new java.util.ArrayList<>(ALL_IDS);\n            java.util.Collections.sort(sortedIds, (s1, s2) -> s2.length() - s1.length());\n\n            for (String id : sortedIds) {\n                if (str.startsWith(id)) {\n                    bucket.setZone(org.joda.time.DateTimeZone.forID(id));\n                    return position + id.length();\n                }\n            }\n            return ~position;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}