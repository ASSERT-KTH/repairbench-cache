{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            String bestMatchId = null;\n            int bestMatchLength = 0;\n\n            // Iterate through all known IDs to find the longest match.\n            // This is necessary because some IDs are prefixes of others (e.g., \"America/Dawson\" and \"America/Dawson_Creek\").\n            for (String id : ALL_IDS) {\n                // Check length first for a potential optimization, avoiding startsWith if the id is shorter than the current best match.\n                // Then check if the substring starts with the current ID.\n                if (id.length() > bestMatchLength && str.startsWith(id)) {\n                    // If this ID is longer than the previous best match, update the best match.\n                    bestMatchId = id;\n                    bestMatchLength = id.length();\n                }\n            }\n\n            // If a best match was found...\n            if (bestMatchId != null) {\n                // Set the zone in the bucket using the longest matching ID found.\n                bucket.setZone(DateTimeZone.forID(bestMatchId));\n                // Return the position after the parsed ID.\n                return position + bestMatchLength;\n            }\n            \n            // If no match was found, return the inverted position as per the API contract.\n            return ~position;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}