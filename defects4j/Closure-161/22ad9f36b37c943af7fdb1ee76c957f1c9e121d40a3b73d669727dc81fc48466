{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    // or \"[][1] = 1;\". The fold attempt leads to an error even though\n    // the assignment itself might be meaningless or an error at runtime.\n    // We shouldn't report compiler errors for potentially correct runtime behavior\n    // or for code that will error at runtime anyway.\n    if (NodeUtil.isLValue(n)) {\n      return n;\n    }\n\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      // We can't fold Array accesses with out-of-bounds indices that\n      // aren't defined statically. It might be that at runtime the\n      // array has been lengthened. Let the runtime handle the error.\n      // error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // If the element is empty, replace it with undefined.\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      // Otherwise, detach the element from the array literal, marking the array\n      // literal as potentially modified.\n      left.removeChild(elem);\n      compiler.reportChangeToChangeScope(left); // Report change to the array scope\n    }\n\n    // Replace the entire GETELEM with the element value.\n    n.getParent().replaceChild(n, elem);\n    compiler.reportChangeToChangeScope(n.getParent()); // Report change to the parent scope\n    reportCodeChange(); // General report for peephole opt\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}