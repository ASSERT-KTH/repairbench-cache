{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target, don't fold it\n    // For cases like \"[][0] = 1\" or \"[][0] += 1\"\n    if (parentCouldIsAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      return n; // Don't report error since we might be in assignment context\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }\n\n  private boolean parentCouldIsAssignmentTarget(Node n) {\n    Node parent = n.getParent();\n    if (parent == null) return false;\n\n    int parentType = parent.getType();\n    if (parentType == Token.ASSIGN ||\n        parentType == Token.ASSIGN_ADD ||\n        parentType == Token.ASSIGN_SUB ||\n        parentType == Token.ASSIGN_MUL ||\n        parentType == Token.ASSIGN_DIV ||\n        parentType == Token.ASSIGN_MOD ||\n        parentType == Token.ASSIGN_BITOR ||\n        parentType == Token.ASSIGN_BITXOR ||\n        parentType == Token.ASSIGN_BITAND ||\n        parentType == Token.ASSIGN_LSH ||\n        parentType == Token.ASSIGN_RSH ||\n        parentType == Token.ASSIGN_URSH) {\n      return true;\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}