{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (parent != null) {\n    int pType = parent.getType();\n    // bail out on simple and compound assignments when this GETELEM is the LHS\n    if ((pType == Token.ASSIGN\n         || pType == Token.ADD_ASSIGN\n         || pType == Token.SUB_ASSIGN\n         || pType == Token.MUL_ASSIGN\n         || pType == Token.DIV_ASSIGN\n         || pType == Token.MOD_ASSIGN\n         || pType == Token.SHL_ASSIGN\n         || pType == Token.SHR_ASSIGN\n         || pType == Token.USHR_ASSIGN\n         || pType == Token.BIT_OR_ASSIGN\n         || pType == Token.BIT_XOR_ASSIGN\n         || pType == Token.BIT_AND_ASSIGN)\n        && parent.getFirstChild() == n) {\n      return n;\n    }\n    // bail out on ++/-- when this GETELEM is the operand\n    if ((pType == Token.INC || pType == Token.DEC)\n        && parent.getFirstChild() == n) {\n      return n;\n    }\n  }\n\n  if (right.getType() != Token.NUMBER) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left.getFirstChild();\n  for (int i = 0; elem != null && i < intIndex; i++) {\n    elem = elem.getNext();\n  }\n\n  if (elem == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    left.removeChild(elem);\n  }\n\n  // Replace the entire GETELEM with the value\n  n.getParent().replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}