{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (parent != null && parent.getFirstChild() == n) {\n    int pType = parent.getType();\n    if (pType == Token.ASSIGN\n        || pType == Token.ASSIGN_ADD\n        || pType == Token.ASSIGN_SUB\n        || pType == Token.ASSIGN_MUL\n        || pType == Token.ASSIGN_DIV\n        || pType == Token.ASSIGN_MOD\n        || pType == Token.ASSIGN_BITOR\n        || pType == Token.ASSIGN_BITXOR\n        || pType == Token.ASSIGN_BITAND\n        || pType == Token.ASSIGN_LSH\n        || pType == Token.ASSIGN_RSH\n        || pType == Token.ASSIGN_URSH\n        || pType == Token.INC\n        || pType == Token.DEC) {\n      return n;\n    }\n  }\n\n  if (right.getType() != Token.NUMBER) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left.getFirstChild();\n  for (int i = 0; elem != null && i < intIndex; i++) {\n    elem = elem.getNext();\n  }\n\n  if (elem == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    left.removeChild(elem);\n  }\n\n  // Replace the entire GETELEM with the value\n  n.getParent().replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}