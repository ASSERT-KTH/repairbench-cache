{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target or other L-value operations,\n    // the array literal is acting as a temporary. We cannot fold it here.\n    // Examples: \"[][0] += 1\", \"[][1] = 1\", \"delete [][0]\"\n    if (NodeUtil.isLValue(n)) {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    // In JavaScript, accessing an array beyond its current length or an empty slot\n    // results in 'undefined', not an error (unless the index is negative, which is checked above).\n    // So, if elem is null (out of bounds) or an EMPTY node (sparse array hole),\n    // we should replace the access with an 'undefined' node.\n    if (elem == null || elem.getType() == Token.EMPTY) {\n      // Create an 'undefined' node. Use 'n' for source info as 'elem' might be null.\n      elem = NodeUtil.newUndefinedNode(n);\n    } else {\n      // If a real element is found, remove it from the array literal.\n      // This is crucial for correctly folding arrays like [1, 2][0] -> 1.\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}