{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as an assignment target the array literal is\n  // acting as a temporary, so we cannot fold it.\n  // For example, in \"[][0] += 1;\" n is the GETELEM node and is the left-hand side\n  // of an assignment. In such cases we must not fold.\n  if (parent != null && parent.getFirstChild() == n) {\n    return n;\n  }\n\n  if (right.getType() != Token.NUMBER) {\n    // Sometimes complex expressions are used for indexing.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left.getFirstChild();\n  for (int i = 0; elem != null && i < intIndex; i++) {\n    elem = elem.getNext();\n  }\n\n  if (elem == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    left.removeChild(elem);\n  }\n\n  // Replace the entire GETELEM with the folded value.\n  parent.replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}