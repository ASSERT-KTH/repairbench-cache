{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    // or \"[][0] = 1\"\n    if (parent != null && NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Traverse the array left to right catching holes.\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      // Either the array is too short or the index is within a hole.\n      // GWT represents holes in array literals as EMPTY nodes. Let's\n      // find out which case we are in.\n      int knownLength = left.getChildCount();\n      if (intIndex < knownLength) {\n         // The index is within a hole. A read should result in undefined.\n         elem = NodeUtil.newUndefinedNode(n); // Use 'n' for source info\n      } else {\n         // The array is too short.\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n      }\n    } else if (elem.getType() == Token.EMPTY) {\n       // We found a hole. A read should result in undefined.\n       elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n       // We found the element, detach it from the ARRAYLIT node.\n       left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the element value.\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}