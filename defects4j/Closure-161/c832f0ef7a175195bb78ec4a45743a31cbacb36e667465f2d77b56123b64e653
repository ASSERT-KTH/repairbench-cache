{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\" or \"[][0] = 1\" or \"[][0]++\"\n    // Check if n is the LValue in an assignment or the operand of INC/DEC\n    if (parent != null) {\n      // Check assignments, including compound assignments\n      if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n        return n;\n      }\n      // Check increment/decrement\n      int parentType = parent.getType();\n      if ((parentType == Token.INC || parentType == Token.DEC) && parent.getFirstChild() == n) {\n        return n;\n      }\n    }\n\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    // Use NumberUtil comparisons to avoid floating point issues.\n    if (!Double.isFinite(index) || intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // Negative indices are trivially out of bounds.\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    // Check if the index is out of bounds\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // If the element is empty, replace it with undefined.\n    if (elem.getType() == Token.EMPTY) {\n      // Accessing an empty slot results in \"undefined\". Fold to an UNDEFINED node.\n      // Create a new UNDEFINED node, copying source info from the EMPTY node.\n      Node undefinedNode = NodeUtil.newUndefinedNode(elem);\n      // Replace the original GETELEM node with the new UNDEFINED node.\n      // No need to remove the EMPTY node from the original array literal,\n      // as we are replacing the parent operation (GETELEM) directly.\n      n.getParent().replaceChild(n, undefinedNode);\n      reportCodeChange();\n      return undefinedNode; // Return the new undefined node\n    } else {\n      // For non-empty elements, remove the element from the original array literal.\n      // This is safe because we've already checked that this GETELEM is not\n      // an L-value (assignment target).\n      left.removeChild(elem);\n\n      // Replace the entire GETELEM node with the element node.\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem; // Return the element node that replaced n\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}