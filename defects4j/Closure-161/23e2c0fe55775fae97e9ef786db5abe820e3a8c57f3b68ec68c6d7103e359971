{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] = 1\"\n    //    \"delete [][0]\"\n    // Check this *before* performing validity checks like bounds checks.\n    if (NodeUtil.isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    // Check index validity now, only if we might fold.\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element at the integer index.\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    // Check bounds validity now, only if we might fold.\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node replacementNode;\n    // Handle holes (EMPTY nodes). Replace with 'undefined'.\n    if (elem.isEmpty()) { // Use isEmpty() check for EMPTY nodes\n      replacementNode = NodeUtil.newUndefinedNode(elem); // Create a new 'undefined' node\n    } else {\n      // Detach the element node from the array literal.\n      left.removeChild(elem);\n      replacementNode = elem; // Use the original element node.\n    }\n\n    // Replace the entire GETELEM node with the replacement node.\n    parent.replaceChild(n, replacementNode);\n    reportCodeChange();\n\n    // Return the node that replaced the original GETELEM node.\n    return replacementNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}