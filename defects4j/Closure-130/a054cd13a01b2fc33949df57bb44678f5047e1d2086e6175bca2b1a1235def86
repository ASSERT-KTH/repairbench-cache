{
    "generation": "import com.google.common.collect.Lists;\nimport com.google.javascript.jscomp.GlobalNamespace.Name;\nimport com.google.javascript.jscomp.GlobalNamespace.Ref;\nimport com.google.javascript.jscomp.GlobalNamespace.Ref.Type;\nimport com.google.javascript.rhino.Node;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.List;\n\n  /**\n   * For each qualified name N in the global scope, we check if:\n   * (a) No ancestor of N is ever aliased or assigned an unknown value type.\n   *     (If N = \"a.b.c\", \"a\" and \"a.b\" are never aliased).\n   * (b) N has exactly one write, and it lives in the global scope.\n   * (c) N is aliased in a local scope.\n   *\n   * If (a) is true, then GlobalNamespace must know all the writes to N.\n   * If (a) and (b) are true, then N cannot change during the execution of\n   *    a local scope.\n   * If (a) and (b) and (c) are true, then the alias can be inlined if the\n   *    alias obeys the usual rules for how we decide whether a variable is\n   *    inlineable.\n   * @see InlineVariables\n   */\n  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Condition (b): N has exactly one global write, no local writes.\n      // Condition (c) check: N is aliased at least once (locally).\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n\n        // Make a copy to avoid concurrent modification issues if\n        // name.removeRef modifies the underlying list.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          // Check if the reference is a local alias.\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c) for this specific alias ref.\n\n            // *** FIX START ***\n            // Check if the value being aliased is the 'arguments' object.\n            // ref.getNode() returns the RHS node in an assignment like 'var x = node;'\n            // or 'x = node;'. In the case of 'var args = arguments', ref.getNode()\n            // should be the NAME node for 'arguments'.\n            Node rhsNode = ref.getNode();\n\n            // Check if the reference node is the identifier \"arguments\". If it is,\n            // don't attempt to inline it, as inlining 'arguments' is unsafe,\n            // especially when it's captured in closures (like in Issue 931).\n            boolean isArgumentsAlias = rhsNode != null && rhsNode.isName() &&\n                \"arguments\".equals(rhsNode.getString());\n\n            // If it's not an alias of 'arguments', proceed with the inlining check.\n            if (!isArgumentsAlias) {\n              if (inlineAliasIfPossible(ref, namespace)) {\n                // Inlining successful, remove the reference. This updates\n                // name.aliasingGets implicitly via name.removeRef.\n                name.removeRef(ref);\n              }\n            }\n            // Else: It is an alias of 'arguments'. We do nothing, leaving the\n            // reference and the alias count intact. This prevents the unsafe\n            // optimization.\n            // *** FIX END ***\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above. If not, and it's an object/function,\n      // its properties might now meet condition (a) and can be processed.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}