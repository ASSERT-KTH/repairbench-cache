{
    "generation": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // Only inline aliases for names that have exactly one global write,\n    // no local writes, and that are actually aliased.\n    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n      // We get a copy of the list of references because inlining\n      // may remove some of them.\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        // Previously the test was only \"ref.scope.isLocal()\", but that\n        // would allow inlining a reference that occurs in an inner (nested)\n        // function.  For example, in the code:\n        //\n        //   function f() {\n        //     return function () {\n        //       var args = arguments;\n        //       setTimeout(function() { alert(args); }, 0);\n        //     }\n        //   }\n        //\n        // the alias \"args\" is defined in one function but used inside a nested\n        // callback. Inlining in that situation would replace \"args\" with\n        // \"arguments\" inside the callback \u2013 but then \"arguments\" in the callback\n        // will reference the callback\u2019s own arguments, not those of the enclosing\n        // function. To avoid this, we ensure that we inline only when the alias\n        // usage is in the same scope as the definition.\n        if (ref.type == Type.ALIASING_GET && ref.scope == name.scope) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n\n    // If the name is for an object literal or function and there are no\n    // remaining aliasing gets, then all of its children meet condition (a)\n    // so they can be added to the worklist.\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}