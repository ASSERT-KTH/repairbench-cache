{
    "generation": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // Only inline the alias if:\n    //   (b) It has exactly one write (and that write is global), and no local writes,\n    //   (c) There is at least one aliasing get,\n    // and its initializer is not the special \"arguments\" name.\n    if (name.globalSets == 1 && name.localSets == 0 &&\n        name.aliasingGets > 0 &&\n        !(name.getDeclarationValue() != null &&\n          name.getDeclarationValue().isName() &&\n          \"arguments\".equals(name.getDeclarationValue().getString()))) {\n      // {@code name} meets condition (b). Find all of its local aliases and try to inline them.\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          // {@code name} meets condition (c). Try to inline it.\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n\n    // Check if {@code name} has any aliases left after the\n    // local-alias-inlining above. If not, add its children to the workList.\n    if ((name.type == Name.Type.OBJECTLIT ||\n         name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}