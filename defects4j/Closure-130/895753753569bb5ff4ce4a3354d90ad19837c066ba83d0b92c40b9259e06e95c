{
    "generation": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // Condition (b): exactly one write in global, none in locals, and\n    // at least one aliasing get.\n    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n      // Collect the alias\u2010definition refs for this name.\n      List<Ref> aliasSets = Lists.newArrayList();\n      for (Ref r : name.getRefs()) {\n        if (r.type == Type.ALIASING_SET) {\n          aliasSets.add(r);\n        }\n      }\n      // Only proceed if there is exactly one alias\u2010definition.\n      if (aliasSets.size() == 1) {\n        Ref setRef = aliasSets.get(0);\n        // Try to inline each alias\u2010use that lives in the *same* scope\n        // as the definition.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET &&\n              // only inline in the very same local scope\n              ref.scope.equals(setRef.scope)) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n    }\n\n    // Condition (a) for children: if no aliases remain on this name,\n    // its children are now eligible for inlining.\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}