{
    "generation": "  /**\n   * For each qualified name N in the global scope, we check if:\n   * (a) No ancestor of N is ever aliased or assigned an unknown value type.\n   *     (If N = \"a.b.c\", \"a\" and \"a.b\" are never aliased).\n   * (b) N has exactly one write, and it lives in the global scope.\n   * (c) N is aliased in a local scope.\n   *\n   * If (a) is true, then GlobalNamespace must know all the writes to N.\n   * If (a) and (b) are true, then N cannot change during the execution of\n   *    a local scope.\n   * If (a) and (b) and (c) are true, then the alias can be inlined if the\n   *    alias obeys the usual rules for how we decide whether a variable is\n   *    inlineable.\n   * @see InlineVariables\n   */\n  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Condition (b): Check if the name is constant during local execution.\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n\n        // Make a copy to avoid ConcurrentModificationException if\n        // removeRef modifies the list.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          // Condition (c): Check if the name is aliased in a local scope.\n          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n\n            // Aliasing the 'arguments' object requires special handling\n            // by the variable inliner. Do not attempt to inline here\n            // if the original name ('name') corresponds to the 'arguments'\n            // object, as this pass is not equipped to handle it correctly,\n            // especially if it escapes the local scope.\n            // See https://github.com/google/closure-compiler/issues/931\n            Node refNode = ref.getNode();\n            if (refNode != null && refNode.isName() && \"arguments\".equals(refNode.getString())) {\n              // This reference is to the keyword 'arguments'. Skip it.\n              // The aliasing variable ('args' in 'var args = arguments') might be\n              // inlined by InlineVariables later, which has specific checks\n              // for 'arguments'.\n              continue;\n            }\n\n            // {@code name} meets condition (c). Try to inline the alias.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              // If inlining was successful, remove the reference\n              // from the original name.\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above. If not, and it's an object or function,\n      // we can process its properties.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}