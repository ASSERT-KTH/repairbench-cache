{
    "generation": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n\n        // Don't attempt to inline a getter or setter property as a variable.\n        if (name.getType() == Name.Type.GET || name.getType() == Name.Type.SET) {\n            continue;\n        }\n\n        if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n            name.getAliasingGets() > 0) {\n            // {@code name} meets condition (b). Find all of its local aliases\n            // and try to inline them.\n            List<Ref> refs = Lists.newArrayList(name.getRefs());\n            for (Ref ref : refs) {\n                if (ref.getType() == Type.ALIASING_GET && ref.getScope().isLocal()) {\n                    // {@code name} meets condition (c). Try to inline it.\n                    if (inlineAliasIfPossible(ref, namespace)) {\n                        name.removeRef(ref);\n                    }\n                }\n            }\n        }\n\n        // Check if {@code name} has any aliases left after the\n        // local-alias-inlining above.\n        if ((name.getType() == Name.Type.OBJECTLIT ||\n             name.getType() == Name.Type.FUNCTION ||\n             name.getType() == Name.Type.ARGUMENTS) &&\n            name.getAliasingGets() == 0) {\n            // All of {@code name}'s children meet condition (a), so they can be\n            // added to the worklist.\n            if (name.getProps() != null) {\n                workList.addAll(name.getProps());\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}