{
    "generation": "/**\n * For each qualified name N in the global scope, we check if:\n * (a) No ancestor of N is ever aliased or assigned an unknown value type.\n * (b) N has exactly one write, and it lives in the global scope.\n * (c) N is aliased in a local scope.\n *\n * If (a) is true, then GlobalNamespace must know all the writes to N.\n * If (a) and (b) are true, then N cannot change during the execution of\n *    a local scope.\n * If (a) and (b) and (c) are true, then the alias can be inlined if the\n *    alias obeys the usual rules for how we decide whether a variable is\n *    inlineable.\n * @see InlineVariables\n */\nprivate void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // Don't inline the special 'arguments' object, since inlining it\n    // into a deeper closure would change semantics.\n    if (\"arguments\".equals(name.name)) {\n      continue;\n    }\n\n    // Condition (b): exactly one global write, no local writes, and at least\n    // one aliasing get.\n    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n      // Find all of its local aliases and try to inline them.\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          // Condition (c): inline this alias.\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n\n    // If there are no aliasing gets left on this name, and it\n    // represents an object literal or function, we can descend into\n    // its children (they still satisfy condition (a)).\n    if ((name.type == Name.Type.OBJECTLIT ||\n         name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 &&\n        name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}