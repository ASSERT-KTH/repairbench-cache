{
    "generation": "import com.google.javascript.jscomp.GlobalNamespace.Name;\nimport com.google.javascript.jscomp.GlobalNamespace.Ref;\nimport com.google.javascript.jscomp.GlobalNamespace.Ref.Type;\nimport com.google.common.collect.Lists;\nimport com.google.javascript.rhino.Node; // Import Node\n\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.List;\n\n\n  /**\n   * For each qualified name N in the global scope, we check if:\n   * (a) No ancestor of N is ever aliased or assigned an unknown value type.\n   *     (If N = \"a.b.c\", \"a\" and \"a.b\" are never aliased).\n   * (b) N has exactly one write, and it lives in the global scope.\n   * (c) N is aliased in a local scope.\n   *\n   * If (a) is true, then GlobalNamespace must know all the writes to N.\n   * If (a) and (b) are true, then N cannot change during the execution of\n   *    a local scope.\n   * If (a) and (b) and (c) are true, then the alias can be inlined if the\n   *    alias obeys the usual rules for how we decide whether a variable is\n   *    inlineable.\n   * @see InlineVariables\n   */\n  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Conditions (a) and (b) must be true.\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n\n        // Make a copy to avoid ConcurrentModificationException when removing refs.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          // Make sure this is a local alias reference. This checks condition (c).\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n\n            // Check if this is an alias of the 'arguments' object. If so, don't inline it,\n            // as this is problematic with closures and potentially mutating 'arguments'.\n            // See https://github.com/google/closure-compiler/issues/931\n            Node aliasNode = ref.getNode();\n            // We assume ref.getNode() points to the alias NAME node (the LHS).\n            if (aliasNode != null && aliasNode.isName()) {\n              Node parent = aliasNode.getParent();\n              if (parent != null) {\n                // Case: var args = arguments;\n                // AST: VAR -> NAME(args) -> NAME(arguments)\n                if (parent.isVar() && aliasNode == parent.getFirstChild() && aliasNode.hasChildren()) {\n                  Node rhs = aliasNode.getFirstChild();\n                  if (rhs != null && rhs.isName() && \"arguments\".equals(rhs.getString())) {\n                    continue; // Skip inlining attempt for arguments alias\n                  }\n                }\n                // Case: args = arguments;\n                // AST: ASSIGN -> NAME(args) -> NAME(arguments)\n                else if (parent.isAssign() && aliasNode == parent.getFirstChild()) {\n                  Node rhs = aliasNode.getNext();\n                  if (rhs != null && rhs.isName() && \"arguments\".equals(rhs.getString())) {\n                    continue; // Skip inlining attempt for arguments alias\n                  }\n                }\n              }\n            }\n\n            // {@code name} meets condition (c) and is not an alias of 'arguments'. Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              // If inlining is successful, remove the reference.\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      // If the name is an object literal or function, and it has no remaining\n      // aliases, then its properties can also be collapsed. Add them to the\n      // work list.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}