{
    "generation": "  /**\n   * For each qualified name N in the global scope, we check if:\n   * (a) No ancestor of N is ever aliased or assigned an unknown value type.\n   *     (If N = \"a.b.c\", \"a\" and \"a.b\" are never aliased).\n   * (b) N has exactly one write, and it lives in the global scope.\n   * (c) N is aliased in a local scope.\n   *\n   * If (a) is true, then GlobalNamespace must know all the writes to N.\n   * If (a) and (b) are true, then N cannot change during the execution of\n   *    a local scope.\n   * If (a) and (b) and (c) are true, then the alias can be inlined if the\n   *    alias obeys the usual rules for how we decide whether a variable is\n   *    inlineable.\n   * @see InlineVariables\n   */\n  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Special case: Do not inline variables that alias 'arguments'.\n      // These variables behave dynamically and their inlining can change semantics,\n      // especially in callbacks or when passed across scopes.\n      // This applies to definitions like 'var x = arguments;' or 'x = arguments;'.\n      Node definitionNode = name.getDefinition();\n      if (definitionNode != null) {\n        Node initializer = null;\n        if (definitionNode.isVar()) {\n          // For 'var x = y;', definitionNode is the VAR node. Its children are NAME (x) and y.\n          // The initializer (y) is at index 1 if present (i.e., childCount > 1).\n          if (definitionNode.getChildCount() > 1) {\n            initializer = definitionNode.getChildAtIndex(1);\n          }\n        } else if (definitionNode.isAssign()) {\n          // For 'x = y;', definitionNode is the ASSIGN node. Its children are LHS (x) and RHS (y).\n          // The initializer (y) is the last child (RHS).\n          initializer = definitionNode.getLastChild();\n        }\n\n        if (initializer != null && initializer.isName() && initializer.getString().equals(\"arguments\")) {\n          continue; // Skip this name as it aliases 'arguments'\n        }\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c). Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}