{
    "generation": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Never try to inline getters or setters.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // Do not inline aliases for the special \"arguments\" object.\n    // Inlining an alias for \"arguments\" may change its binding in inner functions.\n    if (\"arguments\".equals(name.getBaseName())) {\n      continue;\n    }\n\n    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n      // This name satisfies condition (b). Look at all of its aliasing gets.\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          // Condition (c) holds. Try to inline the alias.\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n\n    // After attempting to inline, if there are no aliasing gets left and\n    // the name is an object literal or function then all of its children\n    // satisfy condition (a) and can be processed.\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}