{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\n\n// NOTE: Assumes existence of StringUtils.isBlank and internal helper methods:\n// isAllZeros(String), createInteger(String), createLong(String), createBigInteger(String),\n// createFloat(String), createDouble(String), createBigDecimal(String)\n// These helpers are expected to handle basic format checks and throw NumberFormatException.\n// These would typically be private static methods within the NumberUtils class itself.\n\npublic class NumberUtils { // Renamed back to original class name for context\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (or\n     * <code>0X</code> or <code>-0X</code>), it will be interpreted as a\n     * hexadecimal integer.  Values with leading <code>0</code>'s will not\n     * be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // '--' is invalid. Java's standard parsers will throw an exception for this anyway.\n        if (str.startsWith(\"--\")) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        // Handle hex numbers (delegating parsing logic to helper methods)\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            // The original code delegated to createInteger. Assuming createInteger (or a similar helper)\n            // correctly handles hex format and potential conversion to Long or BigInteger if the value exceeds Integer limits.\n            return createInteger(str);\n        }\n\n        char lastChar = str.charAt(str.length() - 1);\n        String mant; // Mantissa part (before decimal or exponent)\n        String exp;  // Exponent part (digits after 'e' or 'E')\n\n        int decPos = str.indexOf('.');\n        // Correctly find the exponent indicator ('e' or 'E')\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n        // Check for type qualifiers (L, F, D) at the end of the string\n        if (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L') {\n            int endPos = str.length() - 1; // Position of the qualifier\n            String numeric = str.substring(0, endPos); // The numeric part without the qualifier\n\n            // Parse the numeric part to determine its characteristics for validation and checks\n            int numericDecPos = numeric.indexOf('.');\n            int numericExpPos = numeric.indexOf('e');\n            if (numericExpPos == -1) {\n                numericExpPos = numeric.indexOf('E');\n            }\n            boolean numericHasExp = numericExpPos > -1;\n\n            // Basic structural validation of the numeric part:\n            // - Exponent indicator ('e'/'E') cannot be the last character of the numeric part (e.g., \"1eF\")\n            if (numericHasExp && numericExpPos == numeric.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            // - Exponent indicator must appear after the decimal point if both exist (e.g., \"1e.5F\" is invalid)\n            if (numericDecPos > -1 && numericHasExp && numericExpPos < numericDecPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n            // Extract mantissa and exponent from the numeric part for the 'allZeros' check.\n            // This check helps determine if a zero result from Float/Double parsing is due to underflow or if the number was actually zero.\n            if (numericDecPos > -1) { // Numeric part has a decimal point\n                mant = numeric.substring(0, numericDecPos);\n                exp = numericHasExp ? numeric.substring(numericExpPos + 1) : null;\n            } else { // Numeric part has no decimal point\n                mant = numericHasExp ? numeric.substring(0, numericExpPos) : numeric;\n                exp = numericHasExp ? numeric.substring(numericExpPos + 1) : null;\n            }\n            // Assuming isAllZeros(null) returns true\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    // A Long type must not have a decimal point or an exponent part\n                    if (numericDecPos > -1 || numericHasExp) {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                    // Delegate final format validation (e.g., non-digits, empty string, \"-\") to createLong/createBigInteger\n                    try {\n                        return createLong(numeric); // Attempt to parse as Long\n                    } catch (NumberFormatException nfe) {\n                        // If Long parsing fails (likely due to overflow), attempt BigInteger\n                        return createBigInteger(numeric); // Throws NFE if format is invalid (e.g., \"-\")\n                    }\n\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = createFloat(numeric);\n                        // Check if Float provides a reasonable representation:\n                        // - Not infinite (overflow)\n                        // - Not zero due to underflow, unless the original number's mantissa and exponent were all zeros\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f; // Float is adequate\n                        }\n                        // Otherwise, Float representation is not suitable, fall through to try Double\n                    } catch (NumberFormatException nfe) { /* Ignore NFE from createFloat */ }\n                    // Fall through intended\n\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = createDouble(numeric);\n                        // Check if Double provides a reasonable representation:\n                        // - Not infinite (overflow)\n                        // - Not zero due to underflow, unless the original number's mantissa and exponent were all zeros\n                        // Corrected: use doubleValue() for comparison instead of floatValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d; // Double is adequate\n                        }\n                        // Otherwise, Double representation is not suitable, fall through to try BigDecimal\n                    } catch (NumberFormatException nfe) { /* Ignore NFE from createDouble */ }\n                    try {\n                        // If Float/Double are not suitable (due to precision, overflow, underflow), use BigDecimal\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { /* Ignore NFE from BigDecimal */ }\n                    // Fall through intended\n\n                default: // Should not be reachable due to the outer 'if' checking the qualifier characters\n                    break;\n            }\n            // If execution reaches here, parsing failed for 'F' or 'D' suffix types at all stages (Float, Double, BigDecimal)\n            throw new NumberFormatException(str + \" is not a valid number.\");\n\n        } else {\n            // No type qualifier: parse the full string 'str' and determine the best type\n            boolean hasDecPoint = decPos > -1;\n            boolean hasExp = expPos > -1;\n\n            // Basic structural validation of the string:\n            // - Exponent indicator ('e'/'E') cannot be the last character (e.g., \"1e\")\n            if (hasExp && expPos == str.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            // - Exponent indicator must appear after the decimal point if both exist (e.g., \"1e.5\" is invalid)\n            if (hasDecPoint && hasExp && expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n            // Extract mantissa and exponent from the full string for the 'allZeros' check\n            if (hasDecPoint) { // Has decimal point\n                mant = str.substring(0, decPos);\n                exp = hasExp ? str.substring(expPos + 1) : null;\n            } else { // No decimal point\n                mant = hasExp ? str.substring(0, expPos) : str;\n                exp = hasExp ? str.substring(expPos + 1) : null;\n            }\n            // Assuming isAllZeros(null) returns true\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            if (!hasDecPoint && !hasExp) {\n                // String has no decimal and no exponent, likely an integer type (Integer, Long, BigInteger)\n                // Let helper methods handle specific format errors (e.g., non-digits, empty, \"-\")\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { /* ignore, try next type */ }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { /* ignore, try next type */ }\n                // Use BigInteger for potentially very large integers or if others fail format check\n                return createBigInteger(str); // Throws NFE if invalid format\n\n            } else {\n                // String has a decimal point or an exponent, likely a floating-point type (Float, Double, BigDecimal)\n                try {\n                    Float f = createFloat(str);\n                    // Check if Float provides a reasonable representation\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore, try next type */ }\n                try {\n                    Double d = createDouble(str);\n                    // Check if Double provides a reasonable representation\n                    // Corrected: use doubleValue() for comparison instead of floatValue()\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore, try next type */ }\n                // Use BigDecimal for large or precise numbers, or if others fail format check/precision check\n                return createBigDecimal(str); // Throws NFE if invalid format\n            }\n        }\n    }\n\n    // --- Assume helper methods (isAllZeros, createInteger, etc.) are defined elsewhere ---\n    // --- Also assume StringUtils.isBlank is available ---\n    // Dummy helper methods for compilation context (replace with actual implementations)\n    private static class StringUtils { static boolean isBlank(String s) { return s == null || s.trim().isEmpty(); } }\n    private static boolean isAllZeros(String s) { if (s == null) return true; for(char c: s.toCharArray()) if (c != '0') return false; return !s.isEmpty(); } // Basic impl.\n    private static Integer createInteger(String s) { return Integer.decode(s); } // Simplistic impl.\n    private static Long createLong(String s) { return Long.valueOf(s); } // Simplistic impl.\n    private static BigInteger createBigInteger(String s) { return new BigInteger(s); }\n    private static Float createFloat(String s) { return Float.valueOf(s); }\n    private static Double createDouble(String s) { return Double.valueOf(s); }\n    private static BigDecimal createBigDecimal(String s) { return new BigDecimal(s); }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}