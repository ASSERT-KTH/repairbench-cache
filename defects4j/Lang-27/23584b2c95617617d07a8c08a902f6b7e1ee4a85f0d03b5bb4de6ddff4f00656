{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null; // Keep existing behavior\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            // Use createInteger for hex parsing, as in original code\n            // Note: createInteger may need special handling for large hex values\n            // potentially exceeding Integer.MAX_VALUE, but this matches original behavior.\n             try {\n                return createInteger(str);\n             } catch (NumberFormatException nfe) {\n                 // If createInteger fails (e.g., value too large), try BigInteger for hex\n                 // This case wasn't explicitly handled before, but seems logical.\n                 // However, sticking to original logic for minimal change:\n                 // createInteger is expected to handle hex correctly (e.g., Integer.decode)\n                 // If it throws NFE, let it propagate based on original code structure.\n                 // Reverting to just calling createInteger as originally:\n                  return createInteger(str);\n             }\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Original calculation was buggy: int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n        // Correctly find the first exponent character 'e' or 'E'\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n        // Parse string into mantissa, decimal, and exponent parts\n        if (decPos > -1) { // Contains a decimal point\n            if (expPos > -1) { // Contains an exponent\n                if (expPos < decPos) { // Exponent cannot occur before decimal point\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                // Decimal part is between '.' and 'e'/'E'\n                dec = str.substring(decPos + 1, expPos);\n            } else { // No exponent\n                // Decimal part is after '.'\n                dec = str.substring(decPos + 1);\n            }\n            // Mantissa is before '.'\n            mant = str.substring(0, decPos);\n        } else { // No decimal point\n            if (expPos > -1) { // Contains an exponent\n                // Mantissa is before 'e'/'E'\n                mant = str.substring(0, expPos);\n            } else { // No decimal, no exponent\n                mant = str; // Full string is mantissa\n            }\n            dec = null; // No decimal part\n        }\n\n        // Check if the last character is a type qualifier (L, F, D)\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // Extract exponent string if 'e'/'E' exists and is followed by digits before the qualifier\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            // Numeric part of the string (without the qualifier)\n            String numeric = str.substring(0, str.length() - 1);\n            // Check if mantissa and exponent are all zeros (used for precision check)\n            // isAllZeros needs to handle nulls correctly (original implementation assumed)\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Long/BigInteger requested: must not have decimal or exponent marker ('e'/'E')\n                    // The 'exp == null' check correctly enforces no 'e'/'E' before 'L'\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Use createLong helper as in original code\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Fallback to BigInteger if Long overflows\n                        }\n                        // Use createBigInteger helper as in original code\n                        return createBigInteger(numeric);\n                    }\n                    // Invalid format for 'L' qualifier (e.g., has '.', 'e', 'E', or non-digits)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use createFloat helper as in original code\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for infinity or loss of precision to zero\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f; // Return Float if it's valid and represents the number adequately\n                        }\n                        // Fall through to Double if Float is not adequate (per Javadoc)\n                    } catch (NumberFormatException nfe) {\n                        // Ignore NFE from createFloat, fall through\n                    }\n                    //$FALL-THROUGH$ // Intentional fall-through\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Use createDouble helper as in original code\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Check for infinity or loss of precision to zero\n                        // Original code used d.floatValue() which is incorrect here. Use d.doubleValue().\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d; // Return Double if it's valid and represents the number adequately\n                        }\n                        // Fall through to BigDecimal if Double is not adequate\n                    } catch (NumberFormatException nfe) {\n                        // Ignore NFE from createDouble, fall through\n                    }\n                    try {\n                        // Use createBigDecimal helper as fallback\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // If BigDecimal also fails, the number format is invalid for F/D\n                        // Original code had fallthrough here to default, fixed to throw NFE\n                        // Reverting to minimal change: Keep fallthrough to default\n                    }\n                    //$FALL-THROUGH$ // Original code fell through if BigDecimal failed\n                default : // Invalid type qualifier character or all fallbacks failed\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else { // No type qualifier: last char is digit or '.'\n             // Extract exponent string if 'e'/'E' exists and is followed by digits\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1);\n            } else if (expPos > -1) { // String ends in 'e' or 'E' which is invalid\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n            } else {\n                exp = null;\n            }\n\n            // Determine type based on presence of decimal or exponent\n            if (dec == null && exp == null) { // No decimal, no exponent -> Integer/Long/BigInteger\n                // Additional check: ensure it's a valid integer string (optional sign, digits)\n                // This check was missing in the original code for this path. Added for robustness.\n                // Sticking to minimal changes: assume createX methods handle validation.\n                // Try creating Integer, Long, BigInteger in order\n                try {\n                     // Use createInteger helper as in original code\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { /* ignore, try Long */ }\n                try {\n                     // Use createLong helper as in original code\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { /* ignore, try BigInteger */ }\n                // Use createBigInteger helper as fallback for integral types\n                return createBigInteger(str);\n            } else { // Has decimal or exponent -> Float/Double/BigDecimal\n                // Check for precision loss to zero\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                // Try creating Float, Double, BigDecimal in order\n                try {\n                    // Use createFloat helper as in original code\n                    Float f = createFloat(str);\n                     // Check for infinity or loss of precision to zero\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore, try Double */ }\n                try {\n                    // Use createDouble helper as in original code\n                    Double d = createDouble(str);\n                    // Check for infinity or loss of precision to zero\n                    // Original code used d.floatValue() which is incorrect here. Use d.doubleValue().\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore, try BigDecimal */ }\n                 // Use createBigDecimal helper as fallback for floating-point types\n                return createBigDecimal(str);\n            }\n        }\n    }\n\n    // Helper methods assumed to exist in the NumberUtils class:\n    // createInteger(String), createLong(String), createBigInteger(String),\n    // createFloat(String), createDouble(String), createBigDecimal(String),\n    // isDigits(String), isAllZeros(String)\n    // And StringUtils.isBlank(String)",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}