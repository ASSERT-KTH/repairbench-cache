{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec = null;\n    String exp = null;\n    int decPos = str.indexOf('.');\n    int ePos = str.indexOf('e');\n    int EPos = str.indexOf('E');\n    int expCharPos = (ePos > -1) ? ePos : EPos;\n\n    if (decPos > -1) {\n        if (expCharPos > -1) {\n            if (expCharPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expCharPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expCharPos > -1) {\n            mant = str.substring(0, expCharPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (expCharPos > -1) {\n        // Handle empty exponents (e.g. \"1E\", \"1e\")\n        if (expCharPos + 1 < str.length()) {\n            exp = str.substring(expCharPos + 1);\n            // additionally, for type specifier we need to exclude the last character if it's a type qualifier\n            if (!Character.isDigit(lastChar) && lastChar != '.') {\n                if (str.length() - 1 > expCharPos + 1) {\n                    exp = str.substring(expCharPos + 1, str.length() - 1);\n                } else {\n                    exp = null; // Bad exponent like 1eF, will error later\n                }\n            }\n        } else {\n            exp = null;\n        }\n    } else {\n        exp = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // Last char is type specifier\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null && exp == null &&\n                    ((numeric.length() > 0 && numeric.charAt(0) == '-' && isDigits(numeric.substring(1)))\n                     || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        //Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                // If float value is too large, try double, then BigDecimal\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        // User doesn't have a preference on the return type, so let's start\n        // small and go from there...\n        if (dec == null && exp == null) {\n            //Must be an int,long,bigint\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            return createBigInteger(str);\n\n        } else {\n            //Must be a float,double,BigDec\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}