{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // guard against bogus BigDecimal behavior\n        return null;\n    }\n    // hexadecimals\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;  // mantissa (integer part)\n    String dec;   // decimal digits\n    String exp;   // exponent digits\n\n    int decPos = str.indexOf('.');\n\n    // find exponent position correctly (first of 'e' or 'E')\n    int posE    = str.indexOf('e');\n    int posEUp  = str.indexOf('E');\n    int expPos;\n    if (posE == -1) {\n        expPos = posEUp;\n    } else if (posEUp == -1) {\n        expPos = posE;\n    } else {\n        expPos = Math.min(posE, posEUp);\n    }\n\n    // split into mant, dec\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        dec = null;\n        if (expPos > -1) {\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n    }\n\n    // check for type qualifier on the end\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        String numeric = str.substring(0, str.length() - 1);\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n        switch (lastChar) {\n            case 'l': case 'L':\n                // long or BigInteger\n                if (dec == null && exp == null\n                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1)))\n                        || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException ex) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n\n            case 'f': case 'F':\n                // float or Double or BigDecimal\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException ex) {\n                    // drop through to try Double\n                }\n                //$FALL-THROUGH$\n            case 'd': case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException ex) {\n                    // drop through to try BigDecimal\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException ex) {\n                    // no valid number\n                }\n                //$FALL-THROUGH$\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // no explicit type qualifier\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n\n    // plain integer?\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException ex) {\n            // try larger types\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException ex) {\n            // try BigInteger\n        }\n        return createBigInteger(str);\n    }\n\n    // must be float, double or BigDecimal\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n            return f;\n        }\n    } catch (NumberFormatException ex) {\n        // try Double\n    }\n    try {\n        Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            return d;\n        }\n    } catch (NumberFormatException ex) {\n        // try BigDecimal\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}