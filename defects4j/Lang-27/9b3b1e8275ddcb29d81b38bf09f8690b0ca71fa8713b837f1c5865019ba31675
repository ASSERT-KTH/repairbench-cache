{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }   \n    char lastChar = str.charAt(str.length() - 1);\n    String mant = str;\n    String dec = null;\n    String exp = null;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            if (expPos + 1 < str.length()) {\n                dec = str.substring(decPos + 1, expPos);\n            }\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            if (expPos + 1 <= str.length()) {\n                mant = str.substring(0, expPos);\n            }\n        }\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        boolean exponent = false;\n        if (expPos > -1 && (str.charAt(expPos) == 'e' || str.charAt(expPos) == 'E')) {\n            exponent = true;\n        }\n        if (exponent && expPos + 1 < str.length()) {\n            exp = str.substring(expPos + 1, str.length());\n        } else if (exponent) {\n            exp = null;\n        }\n        String numeric = str;\n        if (str.length() > 0 && (\"eE\".indexOf(lastChar) != -1)) {\n            numeric = str.substring(0, str.length() - 1);\n        }\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                try {\n                    return createLong(numeric);\n                } catch (NumberFormatException nfe) {\n                }\n                return createBigInteger(numeric);\n            case 'f':\n            case 'F':\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                return createBigDecimal(numeric);\n            case 'd':\n            case 'D':\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                return createBigDecimal(numeric);\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (expPos > -1 && expPos + 1 <= str.length()) {\n            exp = str.substring(expPos + 1);\n        } else {\n            exp = null;\n        }\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException nfe) {\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException nfe) {\n        }\n        return createBigInteger(str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}