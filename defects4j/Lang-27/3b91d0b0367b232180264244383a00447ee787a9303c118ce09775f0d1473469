{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // Protect for BigDecimal accepting multiple \"-\" signs (which is not in the spec)\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    \n    // Check if the last character is a type qualifier.\n    // (It must not be a digit nor a dot.)\n    char lastChar = str.charAt(str.length() - 1);\n    boolean hasQualifier = !Character.isDigit(lastChar) && lastChar != '.';\n    // If a qualifier is present, remove it from the number before further analysis.\n    String working = hasQualifier ? str.substring(0, str.length() - 1) : str;\n    \n    String mant;\n    String dec;\n    String exp;\n    int decPos = working.indexOf('.');\n    int expPos = Math.max(working.indexOf('e'), working.indexOf('E'));\n    \n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = working.substring(decPos + 1, expPos);\n        } else {\n            dec = working.substring(decPos + 1);\n        }\n        mant = working.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = working.substring(0, expPos);\n        } else {\n            mant = working;\n        }\n        dec = null;\n    }\n    \n    if (expPos > -1 && expPos < working.length() - 1) {\n        exp = working.substring(expPos + 1);\n    } else {\n        exp = null;\n    }\n    \n    if (hasQualifier) {\n        // When a type qualifier is given, work only with the numeric part\n        String numeric = working;\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null \n                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // Too big for a long; fall through to BigInteger\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore and fall through\n                }\n                // Intentional fall-through\n            case 'd':\n            case 'D':\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore and fall through\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore and fall through\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        // No type qualifier: decide the type based on the string's contents.\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // ignore and fall through\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                // ignore and fall through\n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore and try next\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore and try next\n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}