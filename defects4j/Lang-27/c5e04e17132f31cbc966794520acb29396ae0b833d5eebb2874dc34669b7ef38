{
    "generation": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }   \n        int length = str.length();\n        char lastChar = length == 0 ? '\\0' : str.charAt(length - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = -1;\n\n        // Correctly calculate exponent position\n        int ePos = str.indexOf('e');\n        int EPos = str.indexOf('E');\n        if (ePos != -1 && EPos != -1) {\n            expPos = Math.min(ePos, EPos);\n        } else {\n            expPos = ePos != -1 ? ePos : EPos;\n        }\n\n        if (decPos > -1) {\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < length - 1) {\n                exp = str.substring(expPos + 1, length - 1);\n            } else {\n                exp = null;\n            }\n            String numeric = str.substring(0, length - 1);\n            boolean allZeros = isAllZeros(mant) && (exp == null || isAllZeros(exp));\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                    }\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                    }\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            exp = (expPos > -1 && expPos < length) ? str.substring(expPos + 1) : null;\n            if (dec == null && exp == null) {\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                }\n                return createBigInteger(str);\n            } else {\n                boolean allZeros = isAllZeros(mant) && (exp == null || isAllZeros(exp));\n                try {\n                    Float f = createFloat(str);\n                    if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                return createBigDecimal(str);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}