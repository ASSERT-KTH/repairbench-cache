{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            // Use createInteger for hex parsing, assuming it handles this.\n            // Note: Method signature suggests createInteger returns Integer,\n            // which might lose precision for large hex numbers.\n            // However, we follow the original structure.\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Fix 1: Correctly find the exponent indicator position ('e' or 'E')\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n        // Parse the string into mantissa, decimal, and exponent components\n        if (decPos > -1) { // Contains a decimal point\n            if (expPos > -1) { // Contains an exponent indicator\n                if (expPos < decPos || expPos == str.length() - 1) { // Exponent indicator cannot be before decimal point or be the last character\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n                mant = str.substring(0, decPos);\n            } else { // No exponent indicator\n                dec = str.substring(decPos + 1);\n                mant = str.substring(0, decPos);\n            }\n        } else { // No decimal point\n            if (expPos > -1) { // Contains an exponent indicator\n                 if (expPos == str.length() - 1) { // Exponent indicator cannot be the last character\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = str.substring(0, expPos);\n            } else { // No decimal point, no exponent indicator\n                mant = str;\n            }\n            dec = null;\n        }\n\n        if (!Character.isDigit(lastChar) && lastChar != '.') { // Check for type qualifier\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            String numeric = str.substring(0, str.length() - 1); // String without qualifier\n            // Assume isAllZeros handles null safely\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the numeric part is a valid long integer format\n                    if (dec == null && exp == null &&\n                        (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Fallback to BigInteger if Long overflows\n                        }\n                        return createBigInteger(numeric);\n                    }\n                    // The format is invalid for a Long type specifier (e.g., contains '.', 'e')\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            // If it's not infinite and not an imprecise zero, return float\n                            return f;\n                        }\n                        // Otherwise, fall through to try Double/BigDecimal for better precision/range\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number, fall through\n                    }\n                    //$FALL-THROUGH$ // Intentional fallthrough\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = createDouble(numeric);\n                        // Fix 2: Compare Double value using doubleValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                             return d;\n                        }\n                        // Otherwise, fall through to try BigDecimal\n                    } catch (NumberFormatException nfe) {\n                         // ignore the bad number, fall through\n                    }\n                    try {\n                         return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                         // Ignore and fall through to default case to throw exception\n                    }\n                    //$FALL-THROUGH$ // Fall through if createBigDecimal fails\n                default :\n                    // Unrecognized type qualifier or other format error\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            // No type qualifier (ends in digit or '.')\n            if (expPos > -1 && expPos < str.length() - 1) {\n                 // Extract exponent part correctly\n                exp = str.substring(expPos + 1);\n            } else {\n                 // If expPos is invalid (e.g. last char), treat as no exponent\n                 // (This condition might need refinement depending on edge case handling,\n                 // but covers cases like \"1e\" which should fail later).\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                // Must be an Integer, Long, or BigInteger\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                return createBigInteger(str); // Final attempt: BigInteger\n            } else {\n                // Must be a Float, Double, or BigDecimal\n                // Assume isAllZeros handles null safely\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    Double d = createDouble(str);\n                    // Use doubleValue() for comparison here as well for consistency\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                return createBigDecimal(str); // Final fallback for floating point\n            }\n        }\n    }\n\n    // ---- Helper methods assumed to exist in the actual NumberUtils class ----\n    // These are simplified placeholders for understanding the logic flow.\n    // The actual implementation might be more complex.\n\n    // from org.apache.commons.lang3.StringUtils\n    private static class StringUtils {\n        public static boolean isBlank(CharSequence cs) {\n            int strLen;\n            if (cs == null || (strLen = cs.length()) == 0) {\n                return true;\n            }\n            for (int i = 0; i < strLen; i++) {\n                if (!Character.isWhitespace(cs.charAt(i))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    // Assumed helper method\n    private static boolean isDigits(String str) {\n        if (str == null || str.length() == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Assumed helper method\n    private static boolean isAllZeros(String str) {\n        if (str == null || str.length() == 0) {\n            return true; // Treat null or empty as all zeros for precision check logic\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Assumed helper methods - actual implementation would call corresponding constructors/valueOf\n    private static Integer createInteger(String str) throws NumberFormatException {\n        // Actual implementation might handle hex conversion here if starts with 0x/-0x\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return Integer.decode(str); // decode handles +/- and 0x/0X/# prefixes\n        }\n        return Integer.valueOf(str);\n    }\n\n    private static Long createLong(String str) throws NumberFormatException {\n        return Long.valueOf(str);\n    }\n\n    private static BigInteger createBigInteger(String str) throws NumberFormatException {\n        return new BigInteger(str);\n    }\n\n    private static Float createFloat(String str) throws NumberFormatException {\n        return Float.valueOf(str);\n    }\n\n    private static Double createDouble(String str) throws NumberFormatException {\n        return Double.valueOf(str);\n    }\n\n    private static BigDecimal createBigDecimal(String str) throws NumberFormatException {\n         // Workaround for BigDecimal(String) treating \"2.\" as invalid number\n        if (str.endsWith(\".\")) {\n            return new BigDecimal(str.substring(0, str.length() - 1));\n        }\n        return new BigDecimal(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}