{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.StringUtils;\n\n// Added dummy NumberUtils methods and isDigits/isAllZeros for context,\n// assuming they exist elsewhere as in the original library.\n// In a real fix, these would not be part of the createNumber method itself.\nclass NumberUtilsDummyContext {\n    // Assume these methods exist and function as expected based on context\n    public static Float createFloat(String str) { return Float.valueOf(str); }\n    public static Double createDouble(String str) { return Double.valueOf(str); }\n    public static Integer createInteger(String str) { return Integer.decode(str); } // decode handles 0x/-0x\n    public static Long createLong(String str) { return Long.decode(str); } // decode handles 0x/-0x (though 0x check is earlier)\n    public static BigInteger createBigInteger(String str) { return new BigInteger(str); }\n    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }\n    // Assume isDigits checks if a string contains only digits\n    private static boolean isDigits(String str) {\n        if (StringUtils.isEmpty(str)) { return false; }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) { return false; }\n        }\n        return true;\n    }\n    // Assume isAllZeros checks if a string is non-null and contains only '0'\n    private static boolean isAllZeros(String str) {\n        if (str == null) { return true; } // Treat null exponent/mantissa as all zeros for check logic\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') { return false; }\n        }\n        return str.length() > 0; // Empty string is not all zeros\n    }\n\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            // Handled by createInteger (which should use Integer.decode or similar)\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // BUGFIX: Corrected calculation for expPos: find the first 'e' or 'E'\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n        // Parse the string into mantissa, decimal, and exponent portions\n        if (decPos > -1) {\n            // String has a decimal point\n            if (expPos > -1) {\n                // String has both decimal point and exponent\n                if (expPos < decPos) { // Check exponent marker is after decimal point\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                // String has a decimal point but no exponent\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            // String has no decimal point\n            if (expPos > -1) {\n                // String has an exponent but no decimal point\n                // Check that exponent marker is not the first character unless it's the only one?\n                // No, substring(0, expPos) handles expPos=0 correctly (empty string mantissa)\n                // e.g. \"e1\", \"E1\" are invalid via NFE later, \"e\" throws SIOOBE from lastChar, \"-e1\" invalid via NFE\n                mant = str.substring(0, expPos);\n            } else {\n                // String has neither decimal point nor exponent\n                mant = str;\n            }\n            dec = null;\n        }\n\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // Potentially a type suffix found ('f', 'F', 'd', 'D', 'l', 'L')\n            if (expPos > -1 && expPos < str.length() - 1) {\n                // Extract exponent part (number characters between exponent marker and suffix)\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            // The numeric part of the string (excluding the suffix)\n            String numeric = str.substring(0, str.length() - 1);\n            // isAllZeros check requires mantissa and exponent's numeric part to be all zeros.\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the string is valid for Long/BigInteger (no decimal, no exponent found *before* L)\n                    if (dec == null\n                        && exp == null // Check that 'exp' section (between 'E' and 'L') is null.\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Attempt to create a Long\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // If value is too large for Long, fall back to BigInteger\n                            // NFE handled below by createBigInteger\n                        }\n                        // Return BigInteger if Long creation failed or for very large numbers\n                        return createBigInteger(numeric);\n                    }\n                    // Invalid format for 'L' suffix (e.g., \"1.2L\", \"1e-5L\")\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Attempt to create a Float\n                        Float f = NumberUtilsDummyContext.createFloat(numeric); // Use dummy context for clarity\n                        // Check for infinities and precision issues (zero representation)\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            // Valid Float representation\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // Ignore NFE, indicates invalid float format (handled by falling through)\n                    }\n                    // Fall through to try Double if Float failed or had precision issues\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Attempt to create a Double\n                        Double d = NumberUtilsDummyContext.createDouble(numeric); // Use dummy context for clarity\n                        // Check for infinities and precision issues (zero representation)\n                        // BUGFIX: Use d.doubleValue() for comparison, not d.floatValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            // Valid Double representation\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // Ignore NFE, indicates invalid double format (handled by falling through)\n                    }\n                    try {\n                        // If Double failed or had precision issues, fall back to BigDecimal\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // If BigDecimal creation also fails, the original string is likely invalid\n                        // NFE raised below after default case\n                    }\n                    // Fall through to default throw if all fails\n                    //$FALL-THROUGH$\n                default :\n                    // The last character is not a recognized number type suffix\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // Last character is a digit or '.', so no type suffix\n            // Extract exponent part if present (all characters after exponent marker)\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                 // No decimal point or exponent => integer type\n                 // This path relies on the parsers throwing NumberFormatException if needed\n                try {\n                    // Attempt to create an Integer\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // Ignore NFE (too large for Integer)\n                }\n                try {\n                    // Attempt to create a Long\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                     // Ignore NFE (too large for Long)\n                }\n                 // If too large for Long, use BigInteger\n                return createBigInteger(str);\n\n            } else {\n                 // Has decimal point or exponent => floating-point type\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    // Attempt to create a Float\n                    Float f = createFloat(str);\n                    // Check for infinities and precision issues (zero representation)\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore NFE\n                }\n                try {\n                    // Attempt to create a Double\n                    Double d = createDouble(str);\n                    // Check for infinities and precision issues (zero representation)\n                    // BUGFIX: Use d.doubleValue() for comparison, not d.floatValue()\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                     // Ignore NFE\n                }\n                 // Default to BigDecimal for highest precision or edge cases\n                return createBigDecimal(str);\n            }\n        }\n    }\n} // End of dummy context class",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}