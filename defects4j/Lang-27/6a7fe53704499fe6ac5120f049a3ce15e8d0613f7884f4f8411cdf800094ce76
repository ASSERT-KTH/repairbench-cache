{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value. The spec mentions returning null.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            // Assuming createInteger correctly handles hexadecimal format\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e'); // Corrected: Find first 'e'\n        if (expPos == -1) {\n            expPos = str.indexOf('E'); // Or 'E'\n        }\n\n        // Check for invalid exponent position (e.g., at the very end)\n        if (expPos > -1 && expPos == str.length() - 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n\n        // Split the string into mantissa, decimal, and exponent parts\n        if (decPos > -1) { // Contains a decimal point '.'\n            if (expPos > -1) { // Contains an exponent 'e' or 'E'\n                // Exponent must appear after the decimal point\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else { // No exponent\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else { // No decimal point '.'\n            if (expPos > -1) { // Contains an exponent 'e' or 'E'\n                mant = str.substring(0, expPos);\n            } else { // No decimal point, no exponent\n                mant = str;\n            }\n            dec = null; // No decimal part\n        }\n\n        // Processing based on the last character (potential type suffix)\n        if (!Character.isDigit(lastChar) && lastChar != '.') { // Ends with a potential type suffix\n            // Extract exponent digits if present\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            String numeric = str.substring(0, str.length() - 1); // String without the suffix\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Used for precision checks\n\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    // Long requires no decimal point and no exponent marker in the original string\n                    if (dec == null && expPos == -1) {\n                        // Rely on downstream create methods for detailed format validation\n                        // But ensure numeric part isn't empty or just \"-\"\n                        if (numeric.isEmpty() || numeric.equals(\"-\")) {\n                             throw new NumberFormatException(str + \" is not a valid number.\");\n                        }\n                         try {\n                            return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n                            // If createLong fails (range or format), try BigInteger\n                            try {\n                                return createBigInteger(numeric);\n                            } catch (NumberFormatException nfe2) {\n                                // If BigInteger also fails, the format was fundamentally wrong\n                                throw new NumberFormatException(str + \" is not a valid number.\");\n                            }\n                         }\n                    }\n                    // Invalid format for Long (had decimal or exponent)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = createFloat(numeric);\n                        // Check for loss of precision (infinity or zero when non-zero)\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                        // Fall through to Double if precision lost\n                    } catch (NumberFormatException nfe) {\n                        // Ignore NFE (e.g., \"1.2.3F\") and fall through to Double\n                    }\n                    // Fall through\n                    //$FALL-THROUGH$\n\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = createDouble(numeric);\n                         // Check for loss of precision (infinity or zero when non-zero)\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Corrected check: d.doubleValue()\n                            return d;\n                        }\n                        // Fall through to BigDecimal if precision lost\n                    } catch (NumberFormatException nfe) {\n                        // Ignore NFE and fall through to BigDecimal\n                    }\n                     // Fall through\n                     //$FALL-THROUGH$\n\n                default: // Includes fall-through from 'D' and invalid suffixes\n                    try {\n                        // Only try BigDecimal if we fell through from F/f/D/d\n                        if (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D') {\n                            return createBigDecimal(numeric);\n                        }\n                    } catch (NumberFormatException e) {\n                        // Ignore NFE from createBigDecimal if numeric format was bad\n                    }\n                    // If suffix was invalid, or BigDecimal failed after fall-through\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else { // Ends with digit or '.' (no type suffix)\n            // Extract exponent digits if present\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1);\n            } else {\n                exp = null;\n            }\n\n            // Determine type: integral or floating point\n            if (dec == null && exp == null) { // No decimal, no exponent: Integral types\n                // Try Integer -> Long -> BigInteger\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                return createBigInteger(str); // Final fallback\n\n            } else { // Has decimal or exponent: Floating point types\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                // Try Float -> Double -> BigDecimal\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                return createBigDecimal(str); // Final fallback\n            }\n        }\n    }\n\n    // --- Helper methods assumed to exist in the actual NumberUtils class ---\n    // These are placeholders for context. Do not include them in the final response block.\n    /*\n    private static class StringUtils {\n        public static boolean isBlank(String str) {\n             // Implementation assumed\n             return str == null || str.trim().isEmpty();\n        }\n        public static boolean isEmpty(String str) {\n             // Implementation assumed\n            return str == null || str.length() == 0;\n        }\n    }\n\n    private static boolean isAllZeros(String str) {\n        // Implementation assumed\n        if (str == null) {\n            return true;\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return str.length() > 0;\n    }\n     private static boolean isDigits(String str) {\n         // Implementation assumed\n         if (StringUtils.isEmpty(str)) {\n             return false;\n         }\n         for (int i = 0; i < str.length(); i++) {\n             if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n         }\n         return true;\n     }\n\n\n    private static Integer createInteger(String str) throws NumberFormatException {\n        // Implementation assumed - handles decimal and 0x/-0x hex\n        return Integer.decode(str); // Example\n    }\n\n    private static Long createLong(String str) throws NumberFormatException {\n        // Implementation assumed\n        return Long.valueOf(str); // Example\n    }\n\n    private static BigInteger createBigInteger(String str) throws NumberFormatException {\n        // Implementation assumed\n         return new BigInteger(str); // Example\n    }\n\n    private static Float createFloat(String str) throws NumberFormatException {\n        // Implementation assumed\n        return Float.valueOf(str); // Example\n    }\n\n    private static Double createDouble(String str) throws NumberFormatException {\n        // Implementation assumed\n        return Double.valueOf(str); // Example\n    }\n\n     private static BigDecimal createBigDecimal(String str) throws NumberFormatException {\n         // Implementation assumed\n         // Note: BigDecimal constructor doesn't allow leading plus signs\n         if (str.startsWith(\"+\")) {\n             throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n         return new BigDecimal(str); // Example\n     }\n     */\n    // --- End of assumed helper methods ---",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}