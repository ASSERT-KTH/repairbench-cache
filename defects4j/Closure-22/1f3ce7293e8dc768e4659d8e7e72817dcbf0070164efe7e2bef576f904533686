{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Check if the node is empty or a comma, which we can skip\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    // No action if parent is null\n    if (parent == null) {\n        return;\n    }\n\n    // Handle cases where the parent is a comma\n    if (parent.getType() == Token.COMMA) {\n        Node gramps = parent.getParent();\n        if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {\n            // Check if this is an eval call and preserve it\n            if (n == parent.getFirstChild() && parent.getChildCount() == 2 &&\n                    n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n                return;\n            }\n        }\n    }\n\n    // If this is the last child of the parent and the ancestors are expr or block, skip\n    boolean isLastChild = n == parent.getLastChild();\n    if (isLastChild) {\n        for (Node an : parent.getAncestors()) {\n            int ancestorType = an.getType();\n            if (ancestorType == Token.COMMA) {\n                continue;\n            }\n            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n                return;\n            } else {\n                break;\n            }\n        }\n    }\n\n    // If parent is FOR loop and it's the initializer or increment part, handle appropriately\n    if (parent.getType() == Token.FOR) {\n        if (parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n            return;\n        }\n    }\n\n    // Check if this is an expression with no side effects and not used\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed && !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n            return;\n        } else if (n.isExprResult()) {\n            return;\n        }\n\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                    \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}