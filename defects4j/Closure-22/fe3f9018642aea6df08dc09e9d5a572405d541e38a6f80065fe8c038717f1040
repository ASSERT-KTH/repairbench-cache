{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK or SCRIPT level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it here.\n  if (n.isComma() ||\n      (n.isEmpty() && parent != null && (parent.isBlock() || parent.isScript()))) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps != null && gramps.isCall()\n        && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild()\n          && parent.getChildCount() == 2\n          && n.getNext().isName()\n          && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT\n            && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT\n             && parent.getType() != Token.BLOCK) {\n    // Allow empty statements in other contexts (e.g., after `if(...) ;`)\n    // and the init/update slots of a for-loop.\n    if (n.isEmpty()\n        || (parent.getType() == Token.FOR\n            && parent.getChildCount() == 4\n            && (n == parent.getFirstChild()\n                || n == parent.getFirstChild().getNext().getNext()))) {\n      // fall through to the result-used check\n    } else {\n      return;\n    }\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  // Simple operators inside a comma expression are never truly used\n  // if the comma expression itself is unused.\n  if (isSimpleOp && parent.getType() == Token.COMMA) {\n    isResultUsed = false;\n  }\n\n  if (!isResultUsed\n      && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\"\n          + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // If this isn't a full statement, mark it for the wrap-in-preserve pass.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}