{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  int parentType = parent.getType();\n  int nodeType = n.getType();\n\n  if (parentType == Token.COMMA) {\n    Node gramps = parent.getParent();\n    // Don't warn on function call like: (0,eval)(...)\n    if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild() && parent.getChildCount() == 2\n          && n.getNext().isName()\n          && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n\n    // Skip last child of comma if parent is block or expr result\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT\n            && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parentType != Token.EXPR_RESULT && parentType != Token.BLOCK) {\n    if (parentType == Token.FOR && parent.getChildCount() == 4 &&\n        (n == parent.getFirstChild() ||\n            n == parent.getFirstChild().getNext().getNext())) {\n      // It's the initialization or increment part of a FOR,\n      // skip check and process normally.\n    } else {\n      return;\n    }\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(nodeType);\n  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n  if (!isResultUsed &&\n      (isSimpleOp || !hasSideEffects)) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" +\n            Token.name(nodeType).toLowerCase() +\n            \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}