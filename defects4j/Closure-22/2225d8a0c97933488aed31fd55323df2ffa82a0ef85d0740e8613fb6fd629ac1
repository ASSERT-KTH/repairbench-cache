{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // We only care about expressions/statements with side\u2010effects or lack thereof.\n  if (parent == null) {\n    return;\n  }\n  // Skip comma operator nodes themselves.\n  if (n.isComma()) {\n    return;\n  }\n\n  // Special case: an empty statement as the then\u2010clause of an if is useless.\n  if (n.isEmpty()\n      && parent.getType() == Token.IF\n      && n == parent.getFirstChild().getNext()) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and peephole passes fix up\n  // the tree in more clever ways when these are removed.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n      // skip the special (eval) case\n      if (n == parent.getFirstChild()\n          && parent.getChildCount() == 2\n          && n.getNext().isName()\n          && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n    // Allow the last child if it lives directly under an EXPR_RESULT or BLOCK,\n    // so that JSDoc no-op statements aren't flagged.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT\n            && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT\n             && parent.getType() != Token.BLOCK) {\n    // Allow init/update in for(;;) loops.\n    if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4\n        && (n == parent.getFirstChild()\n            || n == parent.getFirstChild().getNext().getNext())) {\n      // fall through\n    } else {\n      return;\n    }\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (!isResultUsed\n      && (isSimpleOp\n          || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    // Don't flag qualified names with JSDoc or EXPR_RESULT wrappers.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    // Build the user\u2010friendly message.\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\"\n          + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}