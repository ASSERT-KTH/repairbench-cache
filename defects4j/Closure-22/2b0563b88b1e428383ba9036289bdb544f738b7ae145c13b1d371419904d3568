{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) { // Don't check COMMA nodes directly, check their children\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.isComma()) { // Use isComma() for clarity\n      Node gramps = parent.getParent();\n      // This is meant to protect explicit calls to eval. Example:\n      // (x, eval)('...');\n      // This pattern is surprising and probably does not occur in practice,\n      // but we need to preserve it.\n      if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() &&\n            parent.getChildCount() == 2 &&\n            n.getNext().isName() &&\n            \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n\n      // This no-op statement was there so that JSDoc information could\n      // be attached to the name. This check should not complain about it.\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            // If the COMMA is part of a larger expression, don't report\n            // a warning. The value might be used in the larger expression.\n            return;\n          else\n            // Found EXPR_RESULT or BLOCK ancestor, break and proceed to check below.\n            break;\n        }\n      }\n      // Note: For non-last children of COMMA, execution falls through to the check below.\n      // Also for last children whose ancestors leads to EXPR_RESULT or BLOCK.\n\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      // Don't warn about values left in FOR initializer/increment\n      // eg. FOR(i=0; i<10; i++); // no warning for i++\n      // FOR(INIT; COND; INC);\n      // We allow an empty FOR init or update section.\n      // Check the original structure: FOR(child1; child2; child3; child4)\n      // child1=INIT, child2=COND, child3=INC, child4=BODY\n      // n == getFirstChild() => n is INIT\n      // n == getFirstChild().getNext().getNext() => n is INC\n      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() || // Allow empty INIT\n           n == parent.getFirstChild().getNext().getNext())) { // Allow empty INC\n           // Fall through to the general check below. An empty expression node\n           // (e.g. EMPTY or just a constant) will be caught by the check.\n      } else {\n         // If the parent is not an EXPR_RESULT, BLOCK, or COMMA (handled above),\n         // or a FOR init/increment, then the expression's result is likely used.\n         // Examples: conditions (IF, WHILE), switch discriminant, return value,\n         // operands (ASSIGN, NAME initializer, operators like +, -, etc.).\n         return;\n      }\n    }\n\n    // Check for unused results ////////////////////////////////////////////////\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n    // If 'n' is a child of a COMMA node, and it is not the *last* child,\n    // then its result is discarded. NodeUtil.isExpressionResultUsed() might\n    // report true if the COMMA's result is used by the parent expression,\n    // so we explicitly override it to false here to ensure the check catches it.\n    // Example: var x = (5, 6); // 5 is side-effect free and unused.\n    // Example: foo(bar(), (baz(), 7)); // baz() is side-effect free and unused if foo is defined.\n    if (parent.isComma() && n != parent.getLastChild()) {\n       isResultUsed = false;\n    }\n\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        // Qualified names with JSDoc comments are usually type definitions\n        // or markers for optimizations, so we don't want to report these.\n        return;\n      } else if (n.isExprResult()) {\n        // This is reported when the EXPR_RESULT's child is visited.\n        // An EXPR_RESULT node indicates the expression result is unused.\n        return;\n      }\n\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      // Track the node for potential removal by PeepholeRemoveUselessCode\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}