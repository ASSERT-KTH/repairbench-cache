{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Detect a no-op 'if' statement whose condition has no side\u2010effects.\n  // e.g.   if(x);\n  if (n.isIf()) {\n    Node cond = n.getFirstChild();\n    Node thenBranch = n.getSecondChild();\n    boolean emptyThen =\n        thenBranch.isEmpty() ||\n        (thenBranch.isBlock() && thenBranch.getChildCount() == 0);\n    if (emptyThen &&\n        !NodeUtil.mayHaveSideEffects(cond, t.getCompiler())) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // 'if' is a statement, so we do not add it to problemNodes --\n      // that prevents wrapping it in JSCOMPILER_PRESERVE.\n      return;\n    }\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n      // (0, eval)(...) indirect-eval hack\n      if (n == parent.getFirstChild()\n          && parent.getChildCount() == 2\n          && n.getNext().isName()\n          && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT &&\n            ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT\n             && parent.getType() != Token.BLOCK) {\n    if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4\n        && (n == parent.getFirstChild()\n            || n == parent.getFirstChild().getNext().getNext())) {\n      // for(init; cond; update) -- allow init & update\n    } else {\n      return;\n    }\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (!isResultUsed &&\n      (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\"\n          + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // Only wrap non-statement nodes in JSCOMPILER_PRESERVE.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}