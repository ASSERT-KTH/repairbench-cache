{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Only ignore extra semicolons at the BLOCK level.\n  if (n.isComma()) {\n    return;\n  }\n  if (n.isEmpty() && parent != null && parent.getType() == Token.BLOCK) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild() && parent.getChildCount() == 2 &&\n          n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n    // For a comma operator, if this node is the last child,\n    // make sure that the non-COMMA ancestor is either an EXPR_RESULT or BLOCK.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    // Allow for-loop initializers and increments.\n    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n      // Fall through.\n    } else {\n      return;\n    }\n  }\n\n  // Determine whether the result of 'n' is used.\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  // When 'n' is part of a comma operator, only the last operand actually\n  // contributes to the overall value. Force intermediate operands to be\n  // considered as not used.\n  if (parent != null && parent.getType() == Token.COMMA) {\n    isResultUsed = (n == parent.getLastChild());\n  }\n\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (!isResultUsed &&\n      (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // For non-statement expressions, record the problem node.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}