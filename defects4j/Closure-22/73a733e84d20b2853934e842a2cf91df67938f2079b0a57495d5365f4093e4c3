{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild()\n          && parent.getChildCount() == 2\n          && n.getNext().isName()\n          && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n == parent.getLastChild()) {\n      boolean foundExprResultOrBlock = false;\n      Node current = parent;\n      while ((current = current.getParent()) != null) {\n        int ancestorType = current.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          foundExprResultOrBlock = true;\n          break;\n        }\n      }\n      // If not found, keep analyzing as usual.\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4\n        && (n == parent.getFirstChild()\n            || n == parent.getFirstChild().getNext().getNext())) {\n      // Allowed: first (\"init\") or third (\"increment\") clause of FOR\n    } else {\n      return;\n    }\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  // Fix: Always check for useless code inside COMMA operator, except for the last element (which might be an expression result).\n  boolean isChildOfComma = parent.getType() == Token.COMMA;\n  boolean isLastChildOfComma =\n      isChildOfComma && (n == parent.getLastChild());\n\n  // Only skip last child of COMMA if it's the last child and parent goes into EXPR_RESULT or BLOCK.\n  boolean skipForCommaLastChild = false;\n  if (isLastChildOfComma) {\n    Node ancestor = parent.getParent();\n    while (ancestor != null && ancestor.getType() == Token.COMMA) {\n      ancestor = ancestor.getParent();\n    }\n    if (ancestor != null\n        && (ancestor.getType() == Token.EXPR_RESULT\n            || ancestor.getType() == Token.BLOCK)) {\n      skipForCommaLastChild = true;\n    }\n  }\n\n  if (!isResultUsed &&\n      (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    if (skipForCommaLastChild) {\n      return; // do not warn for the last element in a comma, e.g., \"x = 1, 2\"\n    }\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}