{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n        Node gramps = parent.getParent();\n        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n            if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n                return;\n            }\n        }\n    }\n\n    // Handle the case where the node is the last child of its parent and\n    // the parent is not a BLOCK or EXPR_RESULT.\n    if (n == parent.getLastChild()) {\n        boolean shouldReturn = false;\n        for (Node an : parent.getAncestors()) {\n            int ancestorType = an.getType();\n            if (ancestorType == Token.COMMA) {\n                continue;\n            }\n            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n                shouldReturn = true;\n                break;\n            } else {\n                break;\n            }\n        }\n        if (shouldReturn) {\n            return;\n        }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && \n            (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n            // Allow FOR loop conditions and increments\n        } else if (parent.getType() == Token.HOOK && n == parent.getFirstChild()) {\n            // Allow the condition in a ternary operator\n        } else {\n            return;\n        }\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n            return;\n        } else if (n.isExprResult()) {\n            return;\n        }\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                  \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}