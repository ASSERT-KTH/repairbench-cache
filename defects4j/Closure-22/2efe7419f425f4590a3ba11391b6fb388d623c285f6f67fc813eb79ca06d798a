{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Skip comma operator nodes.\n  if (n.isComma()) {\n    return;\n  }\n\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // Allow them at the BLOCK level, but flag an empty statement in an IF.\n  if (n.isEmpty()) {\n    if (parent != null && parent.getType() == Token.BLOCK) {\n      return;\n    }\n    if (parent != null && parent.getType() == Token.IF) {\n      // Empty statement in an if() is almost certainly a mistake.\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR,\n              \"This code lacks side-effects. Is there a bug?\"));\n      return;\n    }\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n      // Don't complain about eval(a, b).\n      if (n == parent.getFirstChild()\n          && parent.getChildCount() == 2\n          && n.getNext().isName()\n          && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n    // Allow a trailing no-op name so that JSDoc can be attached.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT\n            && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT\n      && parent.getType() != Token.BLOCK) {\n    // Allow the initializer and update subexpressions of FOR.\n    if (!(parent.getType() == Token.FOR\n          && parent.getChildCount() == 4\n          && (n == parent.getFirstChild()\n              || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (!isResultUsed\n      && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\"\n          + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // Only wrap subexpressions, not full statements.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}