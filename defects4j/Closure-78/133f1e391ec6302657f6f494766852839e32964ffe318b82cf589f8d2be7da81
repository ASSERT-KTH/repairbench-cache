{
    "generation": "  /**\n   * Try to fold arithmetic binary operators\n   */\n  private Node performArithmeticOp(int opType, Node left, Node right) {\n    // Unlike other operations, ADD operands are not always converted\n    // to Number.\n    if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false))) {\n      return null;\n    }\n\n    double result;\n\n    // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN\n    // to zero so this is a little akward here.\n\n    Double lValObj = NodeUtil.getNumberValue(left);\n    if (lValObj == null) {\n      return null;\n    }\n    Double rValObj = NodeUtil.getNumberValue(right);\n    if (rValObj == null) {\n      return null;\n    }\n\n    double lval = lValObj;\n    double rval = rValObj;\n\n    switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          // Division by zero yields NaN in JS, but we don't attempt to fold it.\n          // See https://github.com/google/closure-compiler/issues/294\n          // error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right); // Removed error reporting\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          // Division by zero yields Infinity or -Infinity in JS, but we don't\n          // attempt to fold it.\n          // See https://github.com/google/closure-compiler/issues/294\n          // error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right); // Removed error reporting\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }\n\n    // If the result is NaN or Infinite, let the JS VM handle it at runtime.\n    // The vm knows how to handle these cases correctly. Folds involving\n    // +-Infinity are only valid if the other operand is also Infinity. Even then,\n    // we can't be sure of the sign of the result. And folds involving NaN are never\n    // valid. Note that the calculation is done using doubles, which means\n    // 1/0 is Infinity and 0/0 is NaN.\n\n    // Try folding NaN\n    if (Double.isNaN(result)) {\n      return Node.newString(Token.NAME, \"NaN\");\n    }\n\n    // Try folding Infinity\n    if (result == Double.POSITIVE_INFINITY) {\n      return Node.newString(Token.NAME, \"Infinity\");\n    }\n\n    // Try folding -Infinity\n    if (result == Double.NEGATIVE_INFINITY) {\n      return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n    }\n\n\n    // Don't fold if the result is too big to be represented precisely.\n    if (Math.abs(result) > MAX_FOLD_NUMBER) {\n       return null;\n    }\n\n\n    // Check if the representation is shorter.\n    // TODO(johnlenz): consider removing the result length check.\n    // length of the left and right value plus 1 byte for the operator.\n    String sResult = String.valueOf(result);\n    if (sResult.length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1) {\n      Node newNumber = Node.newNumber(result);\n      return newNumber;\n    }\n\n    return null;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}