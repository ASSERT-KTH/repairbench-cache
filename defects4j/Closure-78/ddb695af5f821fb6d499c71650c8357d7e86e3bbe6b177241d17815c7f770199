{
    "generation": "  /**\n   * Try to fold arithmetic binary operators\n   */\n  private Node performArithmeticOp(int opType, Node left, Node right) {\n    // Unlike other operations, ADD operands are not always converted\n    // to Number.\n    if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false))) {\n      return null;\n    }\n\n    double result;\n\n    // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN\n    // to zero so this is a little akward here.\n\n    Double lValObj = NodeUtil.getNumberValue(left);\n    if (lValObj == null) {\n      return null;\n    }\n    Double rValObj = NodeUtil.getNumberValue(right);\n    if (rValObj == null) {\n      return null;\n    }\n\n    double lval = lValObj;\n    double rval = rValObj;\n\n    switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          // Modulo by zero results in NaN, but we don't fold it.\n          // See ECMA-262 section 11.5.3\n          // error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right); // Remove error reporting\n          return null; // Do not fold\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          // Division by zero results in Infinity, -Infinity, or NaN,\n          // but we don't fold it. See ECMA-262 section 11.5.2\n          // error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right); // Remove error reporting\n          return null; // Do not fold\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }\n\n    // If the result is NaN or +/- Infinity, fold it only if the original\n    // expression was not computing NaN or +/- Infinity itself. This prevents\n    // 0/0 -> NaN, 1/0 -> Infinity, -1/0 -> -Infinity folding.\n    // However, we do want to fold other expressions that produce non-finite\n    // results like Infinity * 0 -> NaN, Infinity * 2 -> Infinity,\n    // Infinity + x -> Infinity.\n    if (Double.isNaN(result)) {\n        if (lval == 0 && rval == 0 && (opType == Token.DIV || opType == Token.MOD)) {\n             // Prevent 0/0 => NaN and 0%0 => NaN folding\n             return null;\n        }\n        if (Double.isNaN(lval) || Double.isNaN(rval)) {\n             // If the operands were already NaN, fold to NaN.\n             return Node.newString(Token.NAME, \"NaN\");\n        }\n         // Otherwise fold\n        return Node.newString(Token.NAME, \"NaN\");\n    } else if (result == Double.POSITIVE_INFINITY) {\n        if ((opType == Token.DIV && lval > 0 && rval == 0)) {\n            // Prevent x/0 => Infinity (where x > 0)\n            return null;\n        }\n        if (Double.isInfinite(lval) || Double.isInfinite(rval)) {\n            // If the operands were already Infinity, fold to Infinity.\n            return Node.newString(Token.NAME, \"Infinity\");\n        }\n         // Otherwise fold\n        return Node.newString(Token.NAME, \"Infinity\");\n    } else if (result == Double.NEGATIVE_INFINITY) {\n        if ((opType == Token.DIV && lval < 0 && rval == 0)) {\n            // Prevent x/0 => -Infinity (where x < 0)\n             return null;\n        }\n        if (Double.isInfinite(lval) || Double.isInfinite(rval)) {\n             // If the operands were already Infinity/-Infinity, fold result.\n            return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n        }\n         // Otherwise fold\n        return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n    }\n\n    // TODO(johnlenz): consider removing the result length check.\n    // length of the left and right value plus 1 byte for the operator.\n    if (String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        Math.abs(result) <= MAX_FOLD_NUMBER) {\n      Node newNumber = Node.newNumber(result);\n      return newNumber;\n    }\n\n    return null;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}