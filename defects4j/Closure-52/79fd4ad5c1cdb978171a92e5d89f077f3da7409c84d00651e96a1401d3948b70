{
    "generation": "  /**\n   * Determines whether the string is a simple number, that is,\n   * consists of only digits and is not the empty string, and\n   * doesn't have unnecessary leading zeros. This includes \"0\".\n   * Examples: \"1\", \"123\", \"0\".\n   * Not simple numbers: \"\", \"1a\", \"01\", \"00\", \".1\", \"1.\", \"1e10\".\n   *\n   * The primary use case is for deciding whether a JavaScript object\n   * literal key needs to be quoted. Keys that are simple numbers can\n   * sometimes be printed unquoted, while others must be quoted.\n   * For example, {123: 'val'} is valid, but {'01': 'val'} is needed\n   * because 01 might be interpreted as octal.\n   *\n   * @param s The string to test.\n   * @return True if the string is a simple number according to the definition above.\n   */\n  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n\n    // An empty string is not a simple number.\n    if (len == 0) {\n      return false;\n    }\n\n    // Check if all characters are digits '0' through '9'.\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n        return false; // Contains a non-digit character.\n      }\n    }\n\n    // A number starting with 0 is not simple unless it is \"0\" itself.\n    // This check prevents octal interpretations (like 010) and unnecessary\n    // leading zeros (like 00, 012) from being considered simple.\n    // It must come *after* the digit check to ensure s is all digits.\n    if (s.charAt(0) == '0' && len > 1) {\n        return false;\n    }\n\n\n    // If all checks passed, it's a simple number.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}