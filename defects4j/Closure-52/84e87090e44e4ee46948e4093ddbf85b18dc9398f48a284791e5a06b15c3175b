{
    "generation": "static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    if (len == 0) {\n        return false;\n    }\n\n    int index = 0;\n    // Check for leading zero (invalid for decimal numbers, but valid for octal)\n    if (s.charAt(0) == '0') {\n        if (len > 1) {\n            char c = s.charAt(1);\n            if (c == 'x' || c == 'X') {\n                // Hexadecimal\n                return false;\n            }\n            // Could be leading zero decimal number (like 0.2)\n        }\n    }\n\n    // Check if the string represents a number with decimal point\n    boolean hasDecimal = false;\n    for (int i = 0; i < len; i++) {\n        char c = s.charAt(i);\n        if (c == '.') {\n            if (hasDecimal) {\n                return false; // More than one decimal point\n            }\n            hasDecimal = true;\n            // Check if it's a decimal point with digits on both sides\n            // If it's at the start or end without digits, it's not a valid number\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n        } else if (c < '0' || c > '9') {\n            return false;\n        }\n    }\n\n    // If it's a decimal number, it's not a simple number (digits only)\n    if (hasDecimal) {\n        return false;\n    }\n\n    // Check if it's an octal number (starts with 0 followed by digits)\n    if (len > 1 && s.charAt(0) == '0') {\n        // It's an octal number (e.g., 010) - we want to return false for this case\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}