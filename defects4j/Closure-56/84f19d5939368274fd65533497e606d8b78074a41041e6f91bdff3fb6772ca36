{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    // Move pos to the beginning of the requested line.\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // The requested line number is greater than the number of lines in the file.\n        return null;\n      }\n      pos = nextpos + 1; // Move pos to the first character of the next line.\n    }\n\n    // Remember this offset for the next search we do.\n    // Note: If the loop above returned null, this code is not reached.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Check if pos is now beyond the length of the code string.\n    // This can happen if the requested line number is exactly one greater\n    // than the number of lines in the file, and the file ends with a newline.\n    // In that case, the loop completed, and pos was advanced past the final newline.\n    if (pos >= js.length()) {\n        return null;\n    }\n\n    // Find the end of the line (the next newline character).\n    int eol = js.indexOf('\\n', pos);\n\n    if (eol == -1) {\n      // No newline found after pos. This means we're on the last line.\n      // Return the rest of the string from pos.\n      return js.substring(pos);\n    } else {\n      // Found a newline. Return the substring from pos up to (but not including) the newline.\n      return js.substring(pos, eol);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}