{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // If we reach the end of the file before finding the target line,\n        // it means the line does not exist.\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of the current line (which is the next newline character)\n    int nextNewlinePos = js.indexOf('\\n', pos);\n\n    if (nextNewlinePos == -1) {\n      // If no next newline is found, it means we are at the last line of the file,\n      // or we are beyond the content.\n      // We should return the substring from 'pos' to the end of the string,\n      // but only if 'pos' is within the string's bounds.\n      if (pos < js.length()) {\n        return js.substring(pos);\n      } else {\n        // 'pos' is at or beyond the end of the string, so the line doesn't exist.\n        return null;\n      }\n    } else {\n      // A newline character was found, so return the substring from 'pos'\n      // up to (but not including) 'nextNewlinePos'.\n      return js.substring(pos, nextNewlinePos);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}