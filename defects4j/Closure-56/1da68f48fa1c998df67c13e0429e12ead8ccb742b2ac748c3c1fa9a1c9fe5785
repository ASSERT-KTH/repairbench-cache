{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    int nextNewLine = js.indexOf('\\n', pos);\n    if (nextNewLine == -1) {\n      if (pos >= js.length()) {\n        return null;\n      } else {\n        String line = js.substring(pos);\n        lastOffset = pos;\n        lastLine = lineNumber;\n        return line;\n      }\n    } else {\n      String line = js.substring(pos, nextNewLine);\n      lastOffset = pos;\n      lastLine = lineNumber;\n      return line;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}