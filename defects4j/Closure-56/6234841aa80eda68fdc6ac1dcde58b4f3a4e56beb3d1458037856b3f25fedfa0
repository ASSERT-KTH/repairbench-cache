{
    "generation": "/**\n * Gets the source line for the indicated line number.\n *\n * @param lineNumber the line number, 1 being the first line of the file.\n * @return The line indicated. Does not include the newline at the end\n *     of the file. Returns {@code null} if it does not exist,\n *     or if there was an IO exception.\n */\npublic String getLine(int lineNumber) {\n    String js;\n    try {\n        js = getCode();\n    } catch (IOException e) {\n        return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n        pos = lastOffset;\n        startLine = lastLine;\n    }\n\n    // Skip forward to the start of the requested line.\n    for (int n = startLine; n < lineNumber; n++) {\n        int next = js.indexOf('\\n', pos);\n        if (next == -1) {\n            return null;\n        }\n        pos = next + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of this line.\n    int end = js.indexOf('\\n', pos);\n    if (end == -1) {\n        // No trailing newline: if we're not at EOF, return the rest of the file.\n        if (pos < js.length()) {\n            return js.substring(pos);\n        }\n        return null;\n    } else {\n        return js.substring(pos, end);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}