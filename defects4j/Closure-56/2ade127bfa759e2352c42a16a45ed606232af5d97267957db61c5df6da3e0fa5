{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // If no more newlines are found and we haven't reached the target line number yet,\n        // it means the requested line number is out of bounds.\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of the current line.\n    int nextNewlinePos = js.indexOf('\\n', pos);\n    if (nextNewlinePos == -1) {\n      // If no newline is found from 'pos' onwards, there are two cases:\n      // 1. 'pos' is at or beyond the end of the string. This means the requested line\n      //    is out of bounds (e.g., asking for line 5 in a 3-line file where 'pos'\n      //    is already past the end of the file after processing previous lines).\n      // 2. 'pos' is before the end of the string. This means the current line is the\n      //    last line of the file, and it does not end with a newline character.\n      if (pos >= js.length()) {\n        return null; // Case 1: Out of bounds, no such line exists.\n      } else {\n        return js.substring(pos); // Case 2: Return the content from 'pos' to the end of the file.\n      }\n    } else {\n      // A newline character was found, so return the substring from 'pos' up to\n      // (but not including) the newline character.\n      return js.substring(pos, nextNewlinePos);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}