{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than or equal to\n    // the one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    // Navigate to the start of the requested line\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // Cannot find the start of the requested line number, so it doesn't exist.\n        return null;\n      }\n      pos = nextpos + 1; // Move to the character after '\\n', which is the start of the next line\n    }\n\n    // Remember this offset for the next search we do.\n    // 'pos' is now the index of the first character of the requested line.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of the requested line.\n    int eol = js.indexOf('\\n', pos);\n\n    if (eol == -1) {\n      // No newline found after 'pos'. This means either:\n      // 1. We are on the last line of the file, and it doesn't end with a newline.\n      // 2. The requested line number is beyond the actual number of lines (e.g.,\n      //    file has 3 lines, requested line 4. 'pos' might be js.length() or beyond).\n      // 3. The file is empty (js.length() == 0, pos == 0).\n      if (pos >= js.length()) {\n        // Handles cases 2 and 3. Also handles the case where the file ends\n        // with a newline and the requested line number is one greater than the\n        // actual number of lines (pos will be == js.length()).\n        return null;\n      } else {\n        // Handles case 1. Return the rest of the string from 'pos'.\n        return js.substring(pos);\n      }\n    } else {\n      // Found a newline ('\\n') at index 'eol'. The line content is from 'pos' up to (but not including) 'eol'.\n      return js.substring(pos, eol);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}