{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null; // IO error\n    }\n    // getCode() might return null if source is unavailable.\n    if (js == null) {\n        return null;\n    }\n\n    // Basic validation for lineNumber.\n    if (lineNumber <= 0) {\n        return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than or\n    // equal to the one we're searching for, then start at that point.\n    // TODO(nicksantos): This is not safe if the underlying file changes.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    // Advance 'pos' to the beginning of the requested line.\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // We've reached the end of the string before finding the start\n        // of the requested line.\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    // NOTE(nicksantos): This is not safe if the underlying file changes.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Check if the calculated starting position is valid.\n    if (pos > js.length()) {\n      // This should theoretically not happen if the loop logic is correct and\n      // lineNumber is valid, but acts as a safeguard.\n      // It might occur if the file is empty and lineNumber is 1,\n      // although the code below handles the empty case more directly.\n        return null;\n    }\n\n    // Find the end of the line.\n    int endpos = js.indexOf('\\n', pos);\n\n    if (endpos == -1) {\n      // No newline found after 'pos'. This is the last line of the file,\n      // or it signifies that the requested line number is past the end.\n      if (pos >= js.length()) {\n          // If pos is at or past the end of the string:\n          // 1. If the file was empty (js=\"\", pos=0, len=0) and lineNumber=1 was requested, the line doesn't exist.\n          // 2. If the file ended with a newline (e.g., \"a\\n\") and the line *after* the newline was requested (line 2),\n          //    then pos will be equal to js.length(). This line exists and is empty.\n          return js.isEmpty() ? null : \"\";\n      } else {\n          // pos < js.length(). This means we are on the last line, and it does not end with a newline.\n          // Return the rest of the string from pos.\n          return js.substring(pos);\n      }\n    } else {\n      // Found a newline. The line content is the substring up to the newline.\n      return js.substring(pos, endpos);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}