{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    // Initialize pos and startLine. These will be updated if an optimization is possible.\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than or equal to\n    // the one we're searching for, then start at that point.\n    // The optimization only applies if 'lastLine' has been set to a valid line number (> 0),\n    // and the requested 'lineNumber' is not before 'lastLine'.\n    if (lastLine > 0 && lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    // Advance 'pos' to the beginning of the requested line number.\n    // The loop iterates (lineNumber - startLine) times.\n    // If lineNumber is 1, startLine is 1, the loop condition (n < lineNumber) is (1 < 1) which is false,\n    // so 'pos' remains at its initial value (0 or lastOffset if optimized).\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // Reached end of file before finding the desired line number.\n        return null;\n      }\n      pos = nextpos + 1; // Move 'pos' past the newline character to the start of the next line\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Now, 'pos' is at the start of the target line.\n    // Find the end of the line (the first newline character after 'pos').\n    int endOfLinePos = js.indexOf('\\n', pos);\n\n    if (endOfLinePos == -1) {\n      // No more newline characters found after 'pos'.\n      // This means 'pos' either points to the start of the last line of the file\n      // (which may or may not end with a newline), or 'pos' is beyond the string length.\n      if (pos >= js.length()) {\n        // If 'pos' is at or beyond the string length, the requested line does not exist.\n        // This case handles requests for lines beyond the actual file content,\n        // or if the file is empty.\n        return null;\n      } else {\n        // 'pos' is within the string, and there's no newline after it.\n        // This means we are on the last line of the file, which does not end with a newline.\n        // Return the rest of the string from 'pos'.\n        return js.substring(pos);\n      }\n    } else {\n      // A newline character was found, so the line ends at 'endOfLinePos'.\n      // Return the substring from 'pos' up to (but not including) the newline.\n      return js.substring(pos, endOfLinePos);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}