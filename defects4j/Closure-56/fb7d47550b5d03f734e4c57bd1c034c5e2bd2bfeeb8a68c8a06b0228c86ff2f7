{
    "generation": "public String getLine(int lineNumber) {\n  String js;\n  try {\n    // NOTE(nicksantos): Right now, this is optimized for few warnings.\n    // This is probably the right trade-off, but will be slow if there\n    // are lots of warnings in one file.\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  // If we've saved a previous offset and it's for a line less than the\n  // one we're searching for, then start at that point.\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextPos = js.indexOf('\\n', pos);\n    if (nextPos == -1) {\n      return null;\n    }\n    pos = nextPos + 1;\n  }\n\n  // Remember this offset for the next search we do.\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  // If no newline found, then if there's remaining content, return it;\n  // otherwise, the requested line does not exist.\n  int newlineIndex = js.indexOf('\\n', pos);\n  if (newlineIndex == -1) {\n    return pos < js.length() ? js.substring(pos) : null;\n  }\n  return js.substring(pos, newlineIndex);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}