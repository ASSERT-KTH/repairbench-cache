{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    // The >= is important for the edge case where lineNumber = 1.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    // Count the number of lines until we reach the desired line number.\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      // If we can't find the start of the next line, then the\n      // requested line number is too large, so return null.\n      if (nextpos == -1) {\n        return null;\n      }\n      pos = nextpos + 1; // position after the newline\n    }\n\n    // Remember this offset for the next search we do.\n    // This matters because we might be asked for a nearby line later.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of the line.\n    int eol = js.indexOf('\\n', pos);\n    if (eol == -1) {\n      // If no newline is found, this could be the last line of the file.\n      // Check if 'pos' is a valid index. If it's past the end of the string,\n      // the line doesn't exist (e.g., asking for line 1 in an empty file,\n      // or asking for a line number greater than the actual number of lines).\n      if (pos >= js.length()) {\n        return null;\n      }\n      // Otherwise, return the rest of the string from 'pos'.\n      return js.substring(pos);\n    } else {\n      // Return the substring from the start of the line ('pos')\n      // to the end of the line ('eol').\n      return js.substring(pos, eol);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}