{
    "generation": "/**\n * Gets the source line for the indicated line number.\n *\n * @param lineNumber the line number, 1 being the first line of the file.\n * @return The line indicated. Does not include the newline at the end\n *     of the file. Returns {@code null} if it does not exist,\n *     or if there was an IO exception.\n */\npublic String getLine(int lineNumber) {\n  String js = \"\";\n  try {\n    // NOTE(nicksantos): Right now, this is optimized for few warnings.\n    // This is probably the right trade-off, but will be slow if there\n    // are lots of warnings in one file.\n    js = getCode();\n  } catch (IOException e) {\n    return null;\n  }\n\n  int pos = 0;\n  int startLine = 1;\n\n  // If we've saved a previous offset and it's for a line less than the\n  // one we're searching for, then start at that point.\n  if (lineNumber >= lastLine) {\n    pos = lastOffset;\n    startLine = lastLine;\n  }\n\n  for (int n = startLine; n < lineNumber; n++) {\n    int nextpos = js.indexOf('\\n', pos);\n    if (nextpos == -1) {\n      return null;\n    }\n    pos = nextpos + 1;\n  }\n\n  // Remember this offset for the next search we do.\n  lastOffset = pos;\n  lastLine = lineNumber;\n\n  int nextNewLine = js.indexOf('\\n', pos);\n  if (nextNewLine == -1) {\n    // No more newlines - return the remainder of the string if any\n    if (pos < js.length()) {\n      return js.substring(pos);\n    } else {\n      return null;\n    }\n  } else {\n    return js.substring(pos, nextNewLine);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}