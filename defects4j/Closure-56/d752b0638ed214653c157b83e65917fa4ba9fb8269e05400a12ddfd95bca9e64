{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    // Handle invalid line number early.\n    if (lineNumber <= 0) {\n        return null;\n    }\n\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than or\n    // equal to the one we're searching for, then start at that point.\n    // Minor optimization: Use <= to potentially save work if searching for the same line.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    // Find the start of the requested line.\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      // If we can't find the start of the line (because the requested\n      // lineNumber is greater than the total lines), it doesn't exist.\n      if (nextpos == -1) {\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // After the loop, pos points to the start index of the desired line lineNumber.\n\n    // If the starting position is at or after the end of the code, the line doesn't exist.\n    // This handles cases like requesting line 1 of an empty file (pos=0, length=0)\n    // or requesting a line number greater than the actual number of lines + 1\n    // (e.g., line 2 for \"a\\n\", where pos becomes 2, length is 2).\n    if (pos >= js.length()) {\n        // Check specifically for the case of an empty file, requesting line 1.\n        // The loop is skipped, pos=0, js.length()=0. pos >= js.length() is true.\n        if (js.isEmpty() && lineNumber == 1) {\n            return null;\n        }\n        // Check for requesting the line just after the last newline\n        // Example: js = \"a\\n\", lineNumber = 2. Loop sets pos=2. pos>=js.length(). Return null.\n        // In general, if pos is at the end, the line number doesn't exist.\n        if (pos == js.length() && lineNumber > 1) {\n             // Ensure we are not treating the first line of an empty file incorrectly here.\n             // The js.isEmpty() check above handles that.\n             return null;\n        }\n        // If pos > js.length(), something went wrong or lineNumber is too high (already handled by loop).\n        // If we reach here and pos >= js.length(), it implies the line doesn't exist.\n        return null;\n\n    }\n\n\n    // Remember this offset for the next search we do.\n    // It's placed here because we now know 'pos' points to a valid start index.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of the line (next newline or end of string).\n    int endOfLine = js.indexOf('\\n', pos);\n    if (endOfLine == -1) {\n      // No newline found after pos. This means it's the last line of the file.\n      // Return the rest of the string starting from pos.\n      return js.substring(pos);\n    } else {\n      // Found a newline. Return the substring from pos up to (excluding) the newline.\n      return js.substring(pos, endOfLine);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}