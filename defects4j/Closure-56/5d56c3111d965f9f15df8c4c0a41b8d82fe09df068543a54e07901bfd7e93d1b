{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // If no more newlines are found, it means the requested lineNumber\n        // is beyond the actual number of lines in the file.\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    int nextNewlinePos = js.indexOf('\\n', pos);\n    if (nextNewlinePos == -1) {\n      // If next new line cannot be found, there are two cases:\n      // 1. pos already reaches the end of file, meaning the line does not exist.\n      // 2. otherwise, pos points to the beginning of the last line,\n      //    and that line does not end with a newline.\n      if (pos >= js.length()) {\n        return null; // Line does not exist (e.g., trying to get line N from a file with N-1 lines, or line 1 from an empty file).\n      }\n      // This is the last line of the file, and it doesn't end with a newline.\n      // Return the substring from 'pos' to the end of the file.\n      return js.substring(pos);\n    } else {\n      // A newline was found, return the substring from 'pos' up to (but not including)\n      // the next newline character.\n      return js.substring(pos, nextNewlinePos);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}