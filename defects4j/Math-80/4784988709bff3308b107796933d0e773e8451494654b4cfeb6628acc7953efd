{
    "generation": "    /**\n     * Flip qd array if warranted.\n     * @param n number of rows in the block\n     * @param step within the array (1 for flipping all elements, 2 for flipping\n     * only every other element)\n     * @return true if qd array was flipped\n     */\n    private boolean flipIfWarranted(final int n, final int step) {\n        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n            // flip array\n            int j = 4 * n - 1;\n            for (int i = 0; i < j; i += 4) {\n                // The inner loop iterates through a 4-element chunk.\n                // The original issue was that work[i+k] and work[j-k] were swapped\n                // without checking if indices had crossed. This could lead to elements\n                // being swapped twice (back to their original positions).\n                // For example, if n=1, block size is 4. j=3. i=0.\n                // k=0: swap(work[0], work[3])\n                // k=1: swap(work[1], work[2])\n                // k=2: swap(work[2], work[1]) -- This undoes k=1 swap!\n                // k=3: swap(work[3], work[0]) -- This undoes k=0 swap!\n                // The fix is to ensure i+k < j-k.\n                for (int k = 0; k < 4; k += step) {\n                    if (i + k < j - k) { // Only swap if indices haven't met or crossed\n                        final double tmp = work[i + k];\n                        work[i + k] = work[j - k];\n                        work[j - k] = tmp;\n                    } else {\n                        // Indices have met or crossed. No need to swap further\n                        // as it would either swap an element with itself or\n                        // undo a previous swap.\n                        break;\n                    }\n                }\n                j -= 4;\n            }\n            return true;\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}