{
    "generation": "/**\n * Flip qd array if warranted.\n * @param n number of rows in the block\n * @param step within the array (1 for flipping all elements, 2 for flipping\n * only every other element)\n * @return true if qd array was flipped\n */\nprivate boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n        // flip array: reverse the order of the rows without reversing the\n        // order of the elements within each row.\n        // Each row occupies 4 consecutive slots.\n        int j = 4 * n - 1; // j is the last index of the last row.\n        for (int i = 0; i < j; i += 4) {\n            // The start index of the row to swap with is (j - 3)\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[(j - 3) + k];\n                work[(j - 3) + k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}