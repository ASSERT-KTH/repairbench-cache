{
    "generation": "    /**\n     * Flip qd array if warranted.\n     * @param n number of rows in the block\n     * @param step within the array (1 for flipping all elements, 2 for flipping\n     * only every other element)\n     * @return true if qd array was flipped\n     */\n    private boolean flipIfWarranted(final int n, final int step) {\n        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n            // flip array\n            int j = 4 * n - 1;\n            for (int i = 0; i < j; i += 4) {\n                for (int k = 0; k < 4; k += step) {\n                    // Only swap if the indices have not met or crossed.\n                    // This prevents elements from being swapped back.\n                    if (i + k < j - k) {\n                        final double tmp = work[i + k];\n                        work[i + k] = work[j - k];\n                        work[j - k] = tmp;\n                    } else {\n                        // If i + k is >= j - k, we have already processed\n                        // the corresponding mirror elements or are at the middle.\n                        // No more swaps are needed for this pair of blocks.\n                        break; \n                    }\n                }\n                j -= 4;\n            }\n            return true;\n        }\n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}