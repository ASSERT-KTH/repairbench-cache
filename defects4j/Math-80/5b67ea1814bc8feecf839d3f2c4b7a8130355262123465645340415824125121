{
    "generation": "/**\n * Flip qd array if warranted.\n * @param n number of rows in the block\n * @param step within the array (1 for flipping all elements, 2 for flipping\n * only every other element)\n * @return true if qd array was flipped\n */\nprivate boolean flipIfWarranted(final int n, final int step) {\n    // compute start and end indices of the current ping\u2010pong array\n    final int start = pingPong;\n    final int end   = 4 * (n - 1) + pingPong;\n    // compare first and last element in the ping\u2010pong sequence\n    if (1.5 * work[start] < work[end]) {\n        // reverse the sequence of blocks of size 4, swapping only every 'step' entries\n        for (int i = start, j = end; i < j; i += 4, j -= 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp     = work[i + k];\n                work[i + k]          = work[j + k];\n                work[j + k]          = tmp;\n            }\n        }\n        return true;\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}