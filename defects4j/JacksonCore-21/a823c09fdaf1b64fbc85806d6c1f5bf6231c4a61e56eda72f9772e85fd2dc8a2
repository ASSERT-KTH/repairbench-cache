{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n        //    conditionals; and it seems odd to return `null` but NOT considering input\n        //    as closed... would love a rewrite to simplify/clear up logic here.\n        \n        // START FIX:\n        // When _allowMultipleMatches is false (single match mode), after the target\n        // token (field name or scalar value) has been returned, we should only return\n        // subsequent structural end tokens that are part of the inclusion path.\n        // All other tokens from the delegate parser should be skipped.\n        if (_matchFound) {\n            // First, drain any buffered tokens that might still be for the path.\n            // This typically handles cases where _nextTokenWithBuffering was called\n            // before _matchFound was set, and it buffered some path elements.\n            if (_exposedContext != null) {\n                TokenFilterContext ctxt = _exposedContext;\n                while (true) {\n                    JsonToken t = ctxt.nextTokenToRead();\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                    // All buffered tokens for this context are read; move to parent context if any.\n                    if (ctxt == _headContext) {\n                        _exposedContext = null;\n                        break;\n                    }\n                    ctxt = _headContext.findChildOf(ctxt);\n                    _exposedContext = ctxt;\n                    if (ctxt == null) { // should never occur if context chain is sane\n                        throw _constructError(\"Unexpected problem: chain of filtered context broken after single match\");\n                    }\n                }\n            }\n\n            // Now, _exposedContext is null or fully drained.\n            // Read from the delegate, but only return END_OBJECT/END_ARRAY for the path.\n            // All other tokens are skipped.\n            while (true) {\n                JsonToken t = delegate.nextToken();\n                if (t == null) { // No more tokens from delegate, we are done.\n                    _currToken = null;\n                    return null;\n                }\n                \n                // If it's a structural end token, it might be part of the path.\n                // We let the main switch handle it, which will correctly pop contexts.\n                if (t.isStructEnd()) {\n                    // If _headContext is null here, it means we've already returned all\n                    // necessary closing tokens for the path. So, this 'END' token is\n                    // from content we skipped.\n                    if (_headContext == null) {\n                        _currToken = null;\n                        return null; // All path closures are done, no more tokens.\n                    }\n                    // Otherwise, break out of this loop to let the main switch handle it.\n                    // The main switch's ID_END_ARRAY/ID_END_OBJECT cases will correctly\n                    // check _headContext.isStartHandled() and return the token if appropriate.\n                    break;\n                }\n                \n                // For any other token (START_OBJECT/ARRAY, FIELD_NAME, scalar values),\n                // it means we are past the single matched item and its path's START tokens.\n                // These must be skipped as per single match mode.\n                delegate.skipChildren(); // Skips current token and its children (if any)\n                // Continue loop to get the next token from delegate.\n            }\n        }\n        // END FIX\n\n        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n        // check for no buffered context _exposedContext - null\n        // If all the conditions matches then check for scalar / non-scalar property\n        // This block handles cases *before* a single match has been found.\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            //if not scalar and ended successfully, and !includePath, then return null\n                if (_currToken.isStructEnd()) {\n                    if (_headContext.isStartHandled()) {\n                        return (_currToken = null);\n                    }\n                } else if (_currToken.isScalarValue()) {\n                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n                    // then return null \n                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                        return (_currToken = null);\n                    }\n            }\n        }\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of \n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            _currToken = t;\n            return t;\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray(); // This method is actually `filterFinishArray` for both array/object\n                                           // which does not seem right for an object end.\n                                           // But it's current code, not changed here.\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    // FIX: If single match mode, and we found the final matching field name:\n                    if (!_allowMultipleMatches) {\n                        _matchFound = true; \n                    }\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken(); // consume value\n                    delegate.skipChildren(); // skip children of value (if any)\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken(); // consume value\n                    delegate.skipChildren(); // skip children of value (if any)\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    // FIX: If single match mode, and we found the final matching field name:\n                    if (!_allowMultipleMatches) {\n                        _matchFound = true; \n                    }\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                // FIX: If single match mode, and we found the final matching scalar value:\n                if (!_allowMultipleMatches) {\n                    _matchFound = true; \n                }\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    // FIX: If single match mode, and we found the final matching scalar value:\n                    if (!_allowMultipleMatches) {\n                        _matchFound = true; \n                    }\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}