{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n        //    conditionals; and it seems odd to return `null` but NOT considering input\n        //    as closed... would love a rewrite to simplify/clear up logic here.\n        \n        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n        // check for no buffered context _exposedContext - null\n        // If all the conditions matches then check for scalar / non-scalar property\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            // If path is not included, we may stop early; otherwise, need the closing token(s)\n            if (_currToken.isStructEnd()) {\n                 // If start handled, and not including path, then we can stop\n                if (!_includePath && _headContext.isStartHandled()) {\n                    return (_currToken = null);\n                }\n                // otherwise continue to potentially return the END_OBJECT/END_ARRAY\n            } else if (_currToken.isScalarValue()) {\n                // If root-level scalar matched, and not including path, can stop\n                // 28-Mar-2018, tatu: As per [core#434], same logic needed for scalars too\n                if (!_includePath && !_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                    return (_currToken = null);\n                }\n                // otherwise proceed to see what comes next\n            }\n            // 28-Mar-2018, tatu: Before fix for [core#434], code was:\n            /*\n            //if not scalar and ended successfully, and !includePath, then return null\n                if (_currToken.isStructEnd()) {\n                    if (_headContext.isStartHandled()) {\n                        return (_currToken = null);\n                    }\n                } else if (_currToken.isScalarValue()) {\n                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n                    // then return null \n                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                        return (_currToken = null);\n                    }\n                }\n                */\n        }\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    // If we are using non-blocking parser, it may not be possible to\n                    // advance buffer to determine next token. Return null for now.\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n                        // TODO: verify this is safe or do we need to buffer?\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n                    // 13-Dec-2018, tatu: [core#518] Need similar handling for objects...\n                    //   how about this? Seems to work but... not 100% sure\n                    if (ctxt.inObject()) {\n                        t = delegate.getCurrentToken();\n                        _currToken = t;\n                        return t;\n                    }\n\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            _currToken = t;\n            return t;\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip children\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) { // value filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            // Still not certain if inclusion needed? Ask filter\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // If not included, need to skip Schnapps... unless we want to keep structure\n            /* May be structurally included, need to remain open? For now, let's assume this is enough.\n            if (!_includePath) {\n                delegate.skipChildren();\n            }\n             */\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip children\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                f = _headContext.getFilter();\n                boolean returnEnd = _headContext.isStartHandled();\n\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    // 10-Jun-2018, tatu: Should call appropriate `filterFinishXxx()`?\n                    //    Looks like filter logic has issues here; skipping for now\n//                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree\n                    _itemFilter = f;\n                    // With path-inclusion, we need FIELD_NAME; without, we only need it if\n                    // parent wasn't explicitly included (and need START_OBJECT)\n                    if (_includePath) {\n                       return (_currToken = t);\n                    }\n                    // Without path inclusion, may need START_OBJECT for the current context\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                       // note: this assumes we are within Object context (which we should be)\n                       t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                       _exposedContext = _headContext;\n                    }\n                    // but FIELD_NAME itself is not needed. Fall through to reading value\n                    break;\n                }\n                if (f == null) { // filter indicates skip this property/sub-tree\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                // Ok, maybe include? Ask filter to verify:\n                f = f.includeProperty(name);\n                if (f == null) { // nope, skip\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                // But does filter want the whole sub-tree?\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    // With path inclusion, FIELD_NAME needed:\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                    // Without path inclusion, may need START_OBJECT for the current context\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        // note: this assumes we are within Object context (which we should be)\n                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                        _exposedContext = _headContext;\n                    }\n                    // and then FIELD_NAME is never needed actually... fall through to read value\n                    \n                // Ok: this filter matches property, include FieldName, Value, possible children:\n                } else {\n                    // But maybe parent path included? Need to buffer...\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                // Stuff to skip either way:\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}