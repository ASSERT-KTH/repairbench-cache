{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException {\n    // When not allowing multiple matches, if we already have a current token and\n    // we are NOT including the path, we may have already output the only match;\n    // so, in that case, if the token is an unneeded scalar or closing token, just\n    // return null.\n    if (!_allowMultipleMatches && (_currToken != null) && !_includePath && (_exposedContext == null)) {\n        if (_currToken.isStructEnd()) {\n            if (_headContext.isStartHandled()) {\n                return (_currToken = null);\n            }\n        } else if (_currToken.isScalarValue()) {\n            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                return (_currToken = null);\n            }\n        }\n    }\n\n    // Return any tokens buffered (for instance, pending parent context tokens)\n    TokenFilterContext ctxt = _exposedContext;\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // If no more buffered tokens in this context...\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // Read next token from delegate\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        _currToken = t;\n        return t;\n    }\n\n    TokenFilter f;\n    switch (t.id()) {\n    case ID_START_ARRAY:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) { // unlikely but...\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) { // if still filtering, force check\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n        // If including path, maybe output the buffered context token\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n        // If including path, possibly output buffered tokens (like START_OBJECT)\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT: {\n        // When including the parent path (or if the container was already output),\n        // we must output the closing token.\n        boolean includeEnd = _includePath || _headContext.isStartHandled();\n        f = _headContext.getFilter();\n        if (f != null && f != TokenFilter.INCLUDE_ALL) {\n            if (t == JsonToken.END_ARRAY) {\n                f.filterFinishArray();\n            } else {\n                f.filterFinishObject();\n            }\n        }\n        _headContext = _headContext.getParent();\n        _itemFilter = _headContext.getFilter();\n        if (includeEnd) {\n            return (_currToken = t);\n        }\n    }\n    break;\n\n    case ID_FIELD_NAME: {\n        final String name = delegate.getCurrentName();\n        // This call sets the current name and returns the filter to use\n        f = _headContext.setFieldName(name);\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _itemFilter = f;\n            if (!_includePath) {\n                // If not including parent path, we might need to force output of START_OBJECT\n                if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                    t = _headContext.nextTokenToRead();\n                    _exposedContext = _headContext;\n                }\n            }\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            break;\n        }\n        f = f.includeProperty(name);\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            break;\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            if (_includePath) {\n                return (_currToken = t);\n            }\n        }\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n    }\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL)\n                    || ((f != null) && f.includeValue(delegate))) {\n                return (_currToken = t);\n            }\n        }\n        break;\n    }\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}