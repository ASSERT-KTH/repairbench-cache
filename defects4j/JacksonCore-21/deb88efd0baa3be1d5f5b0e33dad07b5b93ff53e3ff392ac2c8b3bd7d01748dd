{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n    // check for no buffered context _exposedContext - null\n    // If all the conditions matches then check for scalar / non-scalar property\n    if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n        //if not scalar and ended successfully, and !includePath, then return null\n        if (_currToken.isStructEnd()) {\n            if (_headContext.isStartHandled()) {\n                return (_currToken = null);\n            }\n        } else if (_currToken.isScalarValue()) {\n            //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n            // then return null \n            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                return (_currToken = null);\n            }\n        }\n    }\n    // Anything buffered?\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n\n                /*\n                 * FIX: Even after buffered context is done, when single inclusion mode is used (_allowMultipleMatches==false),\n                 * if includePath==true, we may hit the situation that filtering was completed\n                 * and we still want to produce necessary END_OBJECT tokens (matching opening context).\n                 * So let's check if still need to report END_OBJECT tokens.\n                 */\n                while (!_allowMultipleMatches && ctxt != null && ctxt != TokenFilterContext.ROOT) {\n                    if (!ctxt.inArray() && ctxt.isStartHandled() && !ctxt.isClosed()) {\n                        // close and return END_OBJECT\n                        ctxt.markAsClosed();\n                        _currToken = JsonToken.END_OBJECT;\n                        return _currToken;\n                    } else if (ctxt.inArray() && ctxt.isStartHandled() && !ctxt.isClosed()) {\n                        ctxt.markAsClosed();\n                        _currToken = JsonToken.END_ARRAY;\n                        return _currToken;\n                    }\n                    ctxt = ctxt.getParent();\n                    _headContext = ctxt;\n                    _itemFilter = (ctxt == null) ? null : ctxt.getFilter();\n                }\n\n                break;\n            }\n            // If not, traverse down the context chain\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // If not, need to read more. If we got any:\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        _currToken = t;\n        return t;\n    }\n\n    TokenFilter f;\n\n    switch (t.id()) {\n    case ID_START_ARRAY:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        {\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = (_headContext == null) ? null : _headContext.getFilter();\n            if (returnEnd) {\n                return (_currToken = t);\n            }\n        }\n        break;\n\n    case ID_FIELD_NAME:\n        {\n            final String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead();\n                        _exposedContext = _headContext;\n                    }\n                }\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n            }\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n        }\n\n    default:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL) ||\n                ((f != null) && f.includeValue(delegate))) {\n                return (_currToken = t);\n            }\n        }\n        break;\n    }\n\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}