{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n    //    conditionals; and it seems odd to return `null` but NOT considering input\n    //    as closed... would love a rewrite to simplify/clear up logic here.\n    \n    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n    // check for no buffered context _exposedContext - null\n    // If all the conditions matches then check for scalar / non-scalar property\n    if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n        //if not scalar and ended successfully, and !includePath, then return null\n        if (_currToken.isStructEnd()) {\n            if (_headContext.isStartHandled()) {\n                // If includePath, need to continue to expose parent END_OBJECT/END_ARRAY\n                if (!_includePath || (_headContext.inRoot() && !_headContext.getParent().inRoot())) {\n                    return (_currToken = null);\n                }\n            }\n        } else if (_currToken.isScalarValue()) {\n            //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n            // then return null \n            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                // If includePath, need to continue to expose parent END_OBJECT/END_ARRAY\n                if (!_includePath) {\n                    return (_currToken = null);\n                }\n            }\n        }\n    }\n    // Anything buffered?\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            // If not, traverse down the context chain\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // If not, need to read more. If we got any:\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        // no strict need to close, since we have no state here\n        _currToken = t;\n        return t;\n    }\n\n    // otherwise... to include or not?\n    TokenFilter f;\n    \n    switch (t.id()) {\n    case ID_START_ARRAY:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) { // does this occur?\n            delegate.skipChildren();\n            break;\n        }\n        // Otherwise still iffy, need to check\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n        \n        // Also: only need buffering if parent path to be included\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) { // does this occur?\n            delegate.skipChildren();\n            break;\n        }\n        // Otherwise still iffy, need to check\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n        // Also: only need buffering if parent path to be included\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        // note: inclusion of surrounding Object handled separately via\n        // FIELD_NAME\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        {\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            // Always return end marker for parent path for single-match with path\n            if (returnEnd || (_includePath && !_allowMultipleMatches && _currToken != null)) {\n                return (_currToken = t);\n            }\n        }\n        break;\n\n    case ID_FIELD_NAME:\n        {\n            final String name = delegate.getCurrentName();\n            // note: this will also set 'needToHandleName'\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    // Minor twist here: if parent NOT included, may need to induce output of\n                    // surrounding START_OBJECT/END_OBJECT\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                        _exposedContext = _headContext;\n                    }\n                }\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n            }\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n        }\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL)\n                    || ((f != null) && f.includeValue(delegate))) {\n                return (_currToken = t);\n            }\n        }\n        // Otherwise not included (leaves must be explicitly included)\n        break;\n    }\n\n    // We get here if token was not yet found; offlined handling\n    JsonToken n2 = _nextToken2();\n\n    // Special case: for single match with path, need to emit parent END_OBJECT(s)/END_ARRAY(s),\n    // even after the matching scalar value or inner end marker has been seen,\n    // so that the enclosing path is preserved for consumers.\n    if (!_allowMultipleMatches && _includePath && n2 == null) {\n        // See if we need to emit closing END_OBJECT/END_ARRAY for path\n        // If we still have context (not at root) and haven't emitted the end\n        TokenFilterContext ctxt2 = _headContext;\n        while (ctxt2 != null && !ctxt2.inRoot()) {\n            if (!ctxt2.isStartHandled()) {\n                ctxt2 = ctxt2.getParent();\n                continue;\n            }\n            JsonToken toEmit = ctxt2.inArray() ? JsonToken.END_ARRAY :\n                              (ctxt2.inObject() ? JsonToken.END_OBJECT : null);\n            if (toEmit != null) {\n                _headContext = ctxt2.getParent();\n                _itemFilter = _headContext != null ? _headContext.getFilter() : null;\n                _currToken = toEmit;\n                return toEmit;\n            }\n            ctxt2 = ctxt2.getParent();\n        }\n    }\n    return n2;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}