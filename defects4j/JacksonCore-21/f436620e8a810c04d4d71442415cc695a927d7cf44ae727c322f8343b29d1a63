{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n    //    conditionals; and it seems odd to return `null` but NOT considering input\n    //    as closed... would love a rewrite to simplify/clear up logic here.\n    \n    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n    // check for no buffered context _exposedContext - null\n    // If all the conditions match then check for scalar / non-scalar property\n    if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n        //if not scalar and ended successfully, and !includePath, then return null\n        if (_currToken.isStructEnd()) {\n            if (_headContext.isStartHandled()) {\n                return (_currToken = null);\n            }\n        } else if (_currToken.isScalarValue()) {\n            //if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n            // then return null \n            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                return (_currToken = null);\n            }\n        }\n    }\n    // Anything buffered?\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            // If not, traverse down the context chain\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // If not, need to read more. If we got any:\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        // no strict need to close, since we have no state here\n        _currToken = t;\n        return t;\n    }\n\n    TokenFilter f;\n\n    switch (t.id()) {\n    case ID_START_ARRAY:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n    {\n        boolean returnEnd = _headContext.isStartHandled();\n        f = _headContext.getFilter();\n        if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n            f.filterFinishArray();\n        }\n        _headContext = _headContext.getParent();\n        _itemFilter = (_headContext == null) ? null : _headContext.getFilter();\n        if (_allowMultipleMatches || _includePath || returnEnd) {\n            if (_headContext != null) { // prevent NPE on completely closed input\n                return (_currToken = t);\n            }\n        } else if (returnEnd) {\n            return (_currToken = t);\n        }\n        // Fix: preserve END_OBJECT/END_ARRAYs for included paths even when !multipleMatches\n        if (!_allowMultipleMatches && _includePath && _headContext == null) {\n            return (_currToken = t);\n        }\n        break;\n    }\n\n    case ID_FIELD_NAME:\n    {\n        final String name = delegate.getCurrentName();\n        f = _headContext.setFieldName(name);\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _itemFilter = f;\n            if (!_includePath) {\n                if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                    t = _headContext.nextTokenToRead();\n                    _exposedContext = _headContext;\n                }\n            }\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            break;\n        }\n        f = f.includeProperty(name);\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            break;\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            if (_includePath) {\n                return (_currToken = t);\n            }\n        }\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n    }\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL)\n                    || ((f != null) && f.includeValue(delegate))) {\n                return (_currToken = t);\n            }\n        }\n        break;\n    }\n\n    JsonToken result = _nextToken2();\n\n    // --- FIX: for single-match filtering WITH includePath, need to expose close tokens\n\n    // if no more tokens and we are in single-match mode with includePath, but the current token\n    // was END_OBJECT or END_ARRAY, let's propagate it once\n    if (result == null\n            && !_allowMultipleMatches\n            && _includePath\n            && _currToken != null\n            && (_currToken == JsonToken.END_OBJECT || _currToken == JsonToken.END_ARRAY)\n            && _headContext != null\n            && _headContext.isStartHandled())\n    {\n        result = _currToken;\n        _currToken = null;\n        return result;\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}