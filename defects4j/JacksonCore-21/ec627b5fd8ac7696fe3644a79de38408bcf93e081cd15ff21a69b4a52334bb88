{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n        //    conditionals; and it seems odd to return `null` but NOT considering input\n        //    as closed... would love a rewrite to simplify/clear up logic here.\n\n        // [JACKSON-CORE-330]: Check if we need to stop because single match found and path completed.\n        // This occurs when:\n        // 1. We are not allowing multiple matches.\n        // 2. We have already returned at least one token (_currToken != null).\n        // 3. We are not currently draining buffered context (_exposedContext == null).\n        // 4. The filter context state (_headContext) indicates we are back at the root level (depth 0).\n        // 5. The root level context itself was not \"handled\" (meaning its START token wasn't returned,\n        //    which implies the match occurred deeper within the structure or was a root scalar).\n        // 6. The last token returned (_currToken) was a scalar value or a structure end, signifying the\n        //    completion of the matched value or the structure containing it.\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            if (_headContext.getNestingDepth() == 0 && !_headContext.isStartHandled()) {\n                if (_currToken.isScalarValue() || _currToken.isStructEnd()) {\n                    // The single match (including its path if _includePath was true) has been fully returned.\n                    // Subsequent calls should return null.\n                    return (_currToken = null);\n                }\n                // If the last token was START_OBJECT/ARRAY or FIELD_NAME, we are still descending into/processing\n                // the matched path, so we don't stop yet.\n            }\n        }\n        \n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    // Keep this block commented as in the provided snippet, potential complexities.\n                    /*\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n                        //if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            _currToken = t;\n            return t;\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Got filter, determine if Structure itself included\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f; // filter for items\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                // _matchCount++; // Note: _matchCount logic might be needed if getMatchCount() is used.\n                return (_currToken = t);\n            }\n            // Still need to create context, but possibly skip elements\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // If not included, fall through to filtering of elements via _nextToken2\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Got filter, determine if Structure itself included\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f; // filter for properties\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                // _matchCount++;\n                return (_currToken = t);\n            }\n            // Still need to create context, but possibly skip elements\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // If not included, fall through to filtering of elements via _nextToken2\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    // Call the correct filter finish method based on context type\n                     if (_headContext.inArray()) {\n                         f.filterFinishArray();\n                     } else {\n                         f.filterFinishObject();\n                     }\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            // If !returnEnd, token is NOT returned, need to fetch next one via _nextToken2\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    // _matchCount++;\n                     // Handle path inclusion / immediate parent check\n                     if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {\n                         if (!_headContext.isStartHandled()) {\n                             t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                             _exposedContext = _headContext;\n                              _currToken = t;\n                             return t;\n                      }\n                     }\n                    return (_currToken = t);\n                }\n                if (f == null) { // filter indicates skip\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                // filter indicates possible inclusion\n                f = f.includeProperty(name);\n                if (f == null) { // but property filter said skip\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                 _itemFilter = f; // filter for value\n                 if (f == TokenFilter.INCLUDE_ALL) {\n                     // _matchCount++;\n                     // Handle path inclusion / immediate parent check\n                     if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {\n                          if (!_headContext.isStartHandled()) {\n                              t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                             _exposedContext = _headContext;\n                              _currToken = t;\n                              return t;\n                         }\n                     }\n                     return (_currToken = t);\n                 }\n                // Ok: property included, but not INCLUDE_ALL. Need context for path/buffering?\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                // Otherwise filtered, need to fetch next token via _nextToken2\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                // _matchCount++;\n                 // Handle path inclusion / immediate parent check\n                 if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {\n                     if (!_headContext.isStartHandled()) {\n                         t = _headContext.nextTokenToRead(); // returns START_OBJECT/ARRAY but also marks it handled\n                         _exposedContext = _headContext;\n                         _currToken = t;\n                         return t;\n                     }\n                 }\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                     // Handle path inclusion / immediate parent check\n                     if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {\n                          if (!_headContext.isStartHandled()) {\n                             t = _headContext.nextTokenToRead(); // returns START_OBJECT/ARRAY but also marks it handled\n                             _exposedContext = _headContext;\n                             _currToken = t;\n                             return t;\n                         }\n                     }\n                     // if (f == TokenFilter.INCLUDE_ALL) { _matchCount++; } // Count match if needed\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            // Fall through to fetch next token via _nextToken2\n            break;\n        }\n\n        // We get here if token was not yet found (filtered out); need to call recursively\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}