{
    "generation": "    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException\n    {\n        // create the option\n        Option option = new Option(opt, description);\n\n        // set the option properties\n        option.setLongOpt(longopt);\n        option.setRequired(required);\n        option.setOptionalArg(optionalArg);\n        option.setArgs(numberOfArgs);\n        option.setType(type);\n        option.setValueSeparator(valuesep);\n        option.setArgName(argName);\n\n        // store state before resetting\n        String savedDescription = description;\n        String savedLongOpt = longopt;\n        boolean savedRequired = required;\n        boolean savedOptionalArg = optionalArg;\n        int savedNumberOfArgs = numberOfArgs;\n        Class<?> savedType = type;\n        char savedValueSep = valuesep;\n        String savedArgName = argName;\n\n        // reset the OptionBuilder properties\n        OptionBuilder.reset();\n\n        // restore the state (except description which should be reset)\n        description = savedDescription;\n        longopt = savedLongOpt;\n        required = savedRequired;\n        optionalArg = savedOptionalArg;\n        numberOfArgs = savedNumberOfArgs;\n        type = savedType;\n        valuesep = savedValueSep;\n        argName = savedArgName;\n\n        // clear description here to prevent inheritance\n        description = null;\n\n        // return the Option instance\n        return option;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}