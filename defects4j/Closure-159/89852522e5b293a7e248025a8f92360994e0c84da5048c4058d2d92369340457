{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME || child.getType() == Token.GETPROP) {\n        String functionName = getFunctionName(child);\n        if (functionName != null) {\n          changed.add(functionName);\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n\n  private String getFunctionName(Node node) {\n    if (node.getType() == Token.NAME) {\n      return node.getString();\n    } else if (node.getType() == Token.GETPROP) {\n      // For property access calls like x.y() or x.y.z()\n      StringBuilder name = new StringBuilder();\n      Node current = node;\n      while (current != null && current.getType() == Token.GETPROP) {\n        if (name.length() > 0) {\n          name.insert(0, \".\");\n        }\n        name.insert(0, current.getLastChild().getString());\n        current = current.getFirstChild();\n      }\n      if (current != null && current.getType() == Token.NAME) {\n        if (name.length() > 0) {\n          name.insert(0, \".\");\n        }\n        name.insert(0, current.getString());\n      }\n      return name.length() > 0 ? name.toString() : null;\n    }\n    return null;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}