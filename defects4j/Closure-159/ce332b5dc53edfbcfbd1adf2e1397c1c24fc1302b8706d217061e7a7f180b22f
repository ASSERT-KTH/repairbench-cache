{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    // For CALL nodes, the callee might be a NAME or a GETPROP (e.g., foo.bar.call)\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n    // Also handle calls of the form foo.call(...) where \"foo\" is a property reference\n    else if (child.getType() == Token.GETPROP) {\n      Node propChild = child.getLastChild();\n      if (propChild != null && propChild.getType() == Token.STRING) {\n        String methodName = propChild.getString();\n        // Specifically detect 'call' or 'apply' as the property\n        if (\"call\".equals(methodName) || \"apply\".equals(methodName)) {\n          Node fnNode = child.getFirstChild();\n          if (fnNode != null && fnNode.getType() == Token.NAME) {\n            changed.add(fnNode.getString());\n          }\n        }\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}