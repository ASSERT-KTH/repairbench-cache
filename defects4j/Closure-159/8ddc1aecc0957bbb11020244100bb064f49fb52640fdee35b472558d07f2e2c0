{
    "generation": "private void findCalledFunctions(Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node callee = node.getFirstChild();\n    if (callee.getType() == Token.NAME) {\n      changed.add(callee.getString());\n    } else if (callee.getType() == Token.GETPROP) {\n      // Handle calls like initialize.call(this, options);\n      Node object = callee.getFirstChild();\n      Node prop = object.getNext();\n      if (prop != null && \"call\".equals(prop.getString()) && object.getType() == Token.NAME) {\n        changed.add(object.getString());\n      }\n    }\n  }\n  \n  // Recursively traverse all children.\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}