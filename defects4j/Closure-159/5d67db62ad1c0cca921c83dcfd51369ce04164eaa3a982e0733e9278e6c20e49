{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    // Handle both direct function calls (NAME) and method calls (GETPROP)\n    if (child.getType() == Token.NAME || child.getType() == Token.GETPROP) {\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      } else {\n        // For GETPROP, we want the property name (the function name)\n        Node propertyName = child.getLastChild();\n        if (propertyName != null && propertyName.getType() == Token.STRING) {\n          changed.add(propertyName.getString());\n        }\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}