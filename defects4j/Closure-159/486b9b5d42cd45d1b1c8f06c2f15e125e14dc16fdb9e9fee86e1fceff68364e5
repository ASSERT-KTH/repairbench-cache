{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      // Only add plain function name calls (no \"call\" or \"apply\" or \".call/.apply\" etc)\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n\n    // Do not recurse into the first child of a CALL node, as it's the callee\n    Node firstCallee = (node.getType() == Token.CALL) ? node.getFirstChild() : null;\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      if (c == firstCallee) continue;\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}