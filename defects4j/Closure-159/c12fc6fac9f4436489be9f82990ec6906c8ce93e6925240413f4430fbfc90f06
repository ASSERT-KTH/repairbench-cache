{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node target = node.getFirstChild();\n      // Handle cases like \"foo.call\" where the function is accessed through a property\n      if (target.getType() == Token.GETPROP || target.getType() == Token.NAME) {\n        Node functionNode = target;\n        // For GETPROP (like x.y), we want the property name (y)\n        if (target.getType() == Token.GETPROP) {\n          functionNode = target.getLastChild();\n        }\n        changed.add(functionNode.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}