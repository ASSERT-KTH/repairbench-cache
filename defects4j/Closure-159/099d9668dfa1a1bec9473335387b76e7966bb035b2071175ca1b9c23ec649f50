{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node functionNode = node.getFirstChild();\n      // The functionNode can be a NAME, GETPROP, GETELEM, or even a FUNCTION\n      // expression. We are interested in cases where a named function\n      // is directly called or called via .call/.apply etc.\n      // We want to find the root name of the function being called.\n      // For `foo()`, functionNode is `foo` (NAME).\n      // For `obj.method()`, functionNode is `obj.method` (GETPROP).\n      // For `func.call()`, functionNode is `func.call` (GETPROP).\n      // We need to extract `foo`, `obj`, `func` respectively.\n\n      Node nameNode = functionNode;\n      // Traverse down the GETPROP/GETELEM chain to find the actual name.\n      // E.g., for `a.b.c()`, functionNode is `a.b.c`, we want `a`.\n      // For `func.call()`, functionNode is `func.call`, we want `func`.\n      while (nameNode.isGetProp() || nameNode.isGetElem()) {\n        nameNode = nameNode.getFirstChild();\n      }\n\n      // If the root node is a NAME, then it's a direct reference to a named function.\n      if (nameNode.getType() == Token.NAME) {\n        changed.add(nameNode.getString());\n      }\n      // Note: If functionNode is something like a FUNCTION (anonymous function expression)\n      // or a NEW expression, we don't add its name (as it doesn't have one, or it's a constructor).\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}