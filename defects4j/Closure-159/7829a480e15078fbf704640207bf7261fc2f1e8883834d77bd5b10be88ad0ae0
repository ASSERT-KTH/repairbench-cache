{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node funcNode = node.getFirstChild();\n      if (funcNode.getType() == Token.NAME) {\n        changed.add(funcNode.getString());\n      } else if (funcNode.getType() == Token.MEMBER) {\n        // Check if the function is called via call() or apply()\n        Node rightChild = funcNode.getNext();\n        if (rightChild != null) {\n          String methodName = rightChild.getString();\n          if (methodName.equals(\"call\") || methodName.equals(\"apply\")) {\n            Node leftPart = funcNode.getFirstChild();\n            // Traverse the left part to get the function name\n            while (leftPart.getType() == Token.MEMBER) {\n              leftPart = leftPart.getFirstChild();\n            }\n            if (leftPart.getType() == Token.NAME) {\n              changed.add(leftPart.getString());\n            }\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}