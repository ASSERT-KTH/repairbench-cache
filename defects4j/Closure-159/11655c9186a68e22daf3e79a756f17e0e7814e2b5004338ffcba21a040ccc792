{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node callTarget = node.getFirstChild();\n      if (callTarget != null) {\n        if (callTarget.getType() == Token.NAME) {\n          // Case 1: Direct function call: e.g., 'foo()'\n          changed.add(callTarget.getString());\n        } else if (callTarget.getType() == Token.GETPROP) {\n          // Case 2: Method call: e.g., 'obj.method()' or 'func.call()'\n          // The property name is the last child of the GETPROP node.\n          Node propertyNameNode = callTarget.getLastChild();\n          if (propertyNameNode != null && propertyNameNode.isString()) {\n            String propertyName = propertyNameNode.getString();\n            // If it's a 'call' or 'apply' method, the *actual* function being called\n            // is the object on which 'call'/'apply' is invoked.\n            if (\"call\".equals(propertyName) || \"apply\".equals(propertyName)) {\n              Node actualFunctionNode = callTarget.getFirstChild();\n              // If the actual function is a simple named function, add its name.\n              if (actualFunctionNode != null && actualFunctionNode.getType() == Token.NAME) {\n                changed.add(actualFunctionNode.getString());\n              }\n            }\n            // For other GETPROP calls (e.g., obj.method()), we typically don't\n            // add 'method' to the set of globally \"called functions\" for inlining,\n            // as this set is usually for top-level named functions.\n            // The recursive descent will process the 'obj' part if it contains further calls.\n          }\n        }\n        // Other types of call targets (e.g., a function expression `(function(){})()`,\n        // or a complex expression `(expr)()`) are not named functions that would be\n        // added to the 'changed' set by this mechanism.\n      }\n    }\n\n    // Recursively traverse children for other calls.\n    // This method is intended to find *all* calls within the given node and its descendants,\n    // including those inside function declarations.\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}