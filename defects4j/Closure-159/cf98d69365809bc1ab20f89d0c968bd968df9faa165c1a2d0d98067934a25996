{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node callee = node.getFirstChild();\n    // Direct call of a named function: foo()\n    if (callee.getType() == Token.NAME) {\n      changed.add(callee.getString());\n    }\n    // Indirect call via .call or .apply: fn.call(this, ...) or ns.fn.apply(...)\n    else if (callee.getType() == Token.GETPROP) {\n      Node propName = callee.getLastChild();\n      String name = propName.getString();\n      if (\"call\".equals(name) || \"apply\".equals(name)) {\n        Node target = callee.getFirstChild();\n        // fn.call(...)\n        if (target.getType() == Token.NAME) {\n          changed.add(target.getString());\n        }\n        // ns.fn.call(...)\n        else if (target.getType() == Token.GETPROP) {\n          Node leaf = target.getLastChild();\n          if (leaf.getType() == Token.NAME) {\n            changed.add(leaf.getString());\n          }\n        }\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}