{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node callTarget = node.getFirstChild();\n      if (callTarget.getType() == Token.NAME) {\n        // Direct call: e.g., foo()\n        changed.add(callTarget.getString());\n      } else if (callTarget.getType() == Token.GETPROP) {\n        // Potential call via .call or .apply, or obj.method()\n        // Check if it's .call or .apply\n        Node property = callTarget.getSecondChild();\n        // property will be a Token.STRING_KEY node representing the property name (e.g., \"call\", \"apply\")\n        // No need for property != null as getSecondChild() for GETPROP always returns the property name.\n        // property.isString() is true for Token.STRING_KEY.\n        String propName = property.getString();\n        if (\"call\".equals(propName) || \"apply\".equals(propName)) {\n            // It's a call like func.call(this, ...) or func.apply(this, ...)\n            // The actual function name is the first child of the GETPROP node.\n            Node actualFunction = callTarget.getFirstChild();\n            if (actualFunction.getType() == Token.NAME) {\n                changed.add(actualFunction.getString());\n            }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}