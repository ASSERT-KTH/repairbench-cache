{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.DOT) {\n        Node next = c.getNext();\n        if (next != null && next.getType() == Token.CALL) {\n          Node methodChild = next.getFirstChild();\n          if (methodChild.getType() == Token.NAME) {\n            changed.add(methodChild.getString());\n          }\n        }\n      }\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}