{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node functionExpression = node.getFirstChild();\n      if (functionExpression != null) {\n        String calledFunctionName = null;\n\n        if (functionExpression.isGetProp()) {\n          // This handles cases like `obj.method()` or `func.call()`.\n          Node propertyNameNode = functionExpression.getLastChild();\n          if (propertyNameNode != null && propertyNameNode.isString()) {\n            String methodName = propertyNameNode.getString();\n            if (\"call\".equals(methodName) || \"apply\".equals(methodName)) {\n              // For `func.call(...)` or `func.apply(...)`, the actual function\n              // is the object on which `.call` or `.apply` is invoked.\n              // This is the first child of the GETPROP node.\n              Node targetFunction = functionExpression.getFirstChild();\n              if (targetFunction != null) {\n                calledFunctionName = targetFunction.getQualifiedName();\n              }\n            } else {\n              // For a regular method call `obj.method()`, the called function\n              // is the qualified name of the GETPROP expression itself.\n              calledFunctionName = functionExpression.getQualifiedName();\n            }\n          }\n        } else if (functionExpression.isName()) {\n          // This handles direct calls to named functions, e.g., `foo()`.\n          calledFunctionName = functionExpression.getString();\n        }\n\n        // If a valid function name was extracted, add it to the set.\n        if (calledFunctionName != null) {\n          changed.add(calledFunctionName);\n        }\n      }\n    }\n\n    // Recursively traverse all children of the current node.\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}