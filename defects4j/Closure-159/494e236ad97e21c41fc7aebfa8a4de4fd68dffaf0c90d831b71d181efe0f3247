{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getToken() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child != null && child.getToken() == Token.NAME) {\n      // Only add if the function is called directly (not as a property).\n      changed.add(child.getString());\n    }\n  }\n\n  // Only recurse into children if the current node is NOT a CALL node.\n  // Prevent walking into the callee of CALL, as that could result in\n  // double-counting in some AST structures or collecting property calls.\n  if (node.getToken() != Token.CALL) {\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}