{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node callTarget = node.getFirstChild();\n      if (callTarget.getType() == Token.NAME) {\n        // Direct call: foo()\n        changed.add(callTarget.getString());\n      } else if (callTarget.getType() == Token.GETPROP) {\n        // Property access: obj.method() or fun.call() / fun.apply()\n        Node propertyNameNode = callTarget.getLastChild();\n        if (propertyNameNode != null && propertyNameNode.isString()) {\n          String propertyName = propertyNameNode.getString();\n          if (\"call\".equals(propertyName) || \"apply\".equals(propertyName)) {\n            // This is fun.call(...) or fun.apply(...)\n            // The actual function being called is the object of the GETPROP node.\n            // We are interested in its simple name if it's a direct reference to a declared function.\n            Node actualFunction = callTarget.getFirstChild();\n            if (actualFunction.isName()) {\n              // e.g., 'initialize' in 'initialize.call(this, options)'\n              changed.add(actualFunction.getString());\n            }\n            // Other cases like obj.method.call() are not added as 'method' because\n            // InlineFunctions primarily tracks simple-named function declarations.\n          }\n          // For obj.method(), where 'method' is not 'call' or 'apply',\n          // we do not add 'method' to the set, consistent with the original\n          // logic which only added simple NAME calls (e.g. foo()).\n        }\n      }\n    }\n\n    // Recursively traverse children\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}