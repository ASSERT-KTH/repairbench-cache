{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    // Only add if the call target is a simple NAME, not a property or call (e.g., func(), not obj.func() or f().g())\n    if (child != null && child.getType() == Token.NAME && node.isFirstChild(child)) {\n      changed.add(child.getString());\n    }\n  }\n\n  // Only traverse children if this node is not a function definition,\n  // so we don't collect called functions inside nested functions\n  if (!node.isFunction()) {\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}