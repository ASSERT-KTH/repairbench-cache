{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      // Direct call: foo(...)\n      changed.add(child.getString());\n    } else if (child.getType() == Token.GETPROP) {\n      // Indirect call via .call or .apply: foo.call(this, ...)\n      Node base = child.getFirstChild();\n      Node prop = child.getLastChild();\n      String propName = prop.getString();\n      if ((propName.equals(\"call\") || propName.equals(\"apply\"))\n          && base.getType() == Token.NAME) {\n        changed.add(base.getString());\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}