{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node fn = node.getFirstChild();\n    if (fn.getType() == Token.NAME) {\n      changed.add(fn.getString());\n    } else if (fn.getType() == Token.GETPROP) {\n      // detect patterns like initialize.call(this, ...)\n      Node prop = fn.getLastChild();\n      if (prop != null && \"call\".equals(prop.getString())) {\n        Node target = fn.getFirstChild();\n        if (target.getType() == Token.NAME) {\n          changed.add(target.getString());\n        }\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}