{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    // Make sure the call is not a \"someObj.method()\" call\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n\n  // Only recurse into children if not CALL node, to avoid double-counting\n  // the function called with .call or .apply (like f.call(this)), where\n  // the receiver is not a reference to a function to consider for inlining.\n  // Thus, skip recursing into the first child of CALL node.\n  for (Node c = node.getType() == Token.CALL ? node.getFirstChild().getNext() : node.getFirstChild();\n       c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}