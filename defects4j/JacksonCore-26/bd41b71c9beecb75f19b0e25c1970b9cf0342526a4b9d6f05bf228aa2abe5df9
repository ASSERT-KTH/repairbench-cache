{
    "generation": "@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException\n{\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Advance the overall counter by the length of the previous segment:\n    _currInputProcessed += _origBufferLen;\n\n    // Adjust the row start to pretend that the buffer actually extended further back.\n    // (Instead of subtracting the old length from the new start we subtract the old input\n    //  pointer, so that when the previous buffer was fully consumed, we get:\n    //      newRowStart = (_currInputRowStart - oldInputPtr) + newStart\n    // This yields correct offsets as verified by the async location tests.)\n    _currInputRowStart = (_currInputRowStart - _inputPtr) + start;\n\n    // Now update the buffer and pointers:\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}