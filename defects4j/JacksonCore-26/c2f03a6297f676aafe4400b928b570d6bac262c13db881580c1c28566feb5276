{
    "generation": "    @Override\n    public void feedInput(byte[] buf, int start, int end) throws IOException\n    {\n        // Must not have remaining input\n        if (_inputPtr < _inputEnd) {\n            _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n        }\n        if (end < start) {\n            _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n        }\n        // and shouldn't have been marked as end-of-input\n        if (_endOfInput) {\n            _reportError(\"Already closed, can not feed more input\");\n        }\n        // Time to update pointers first\n\n        // _currInputProcessed tracks the total bytes processed *before* the current buffer.\n        // It needs to correctly accumulate the length of the *previous* segment.\n        _currInputProcessed += _origBufferLen;\n\n        // However, the _inputPtr is set to 'start' (an absolute index into buf).\n        // JsonLocation.getByteOffset() uses (_currInputProcessed + _inputPtr).\n        // If 'start' is non-zero, this adds an undesired offset.\n        // To make the effective offset logical (0-based from stream start),\n        // we must subtract 'start' from _currInputProcessed to compensate.\n        _currInputProcessed -= start;\n\n        // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n        // This line was part of the fix for [core#531] and is considered correct.\n        _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n        // And then update buffer settings\n        _inputBuffer = buf;\n        _inputPtr = start;\n        _inputEnd = end;\n        _origBufferLen = end - start; // Store length of CURRENT buffer for next iteration\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}