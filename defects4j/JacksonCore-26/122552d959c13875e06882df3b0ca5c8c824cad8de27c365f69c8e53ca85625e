{
    "generation": "    // This field needs to be added to the class definition.\n    // It is initialized to 0.\n    // private int _firstInputStart = 0;\n\n    @Override\n    public void feedInput(byte[] buf, int start, int end) throws IOException\n    {\n        // Must not have remaining input\n        if (_inputPtr < _inputEnd) {\n            _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n        }\n        if (end < start) {\n            _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n        }\n        // and shouldn't have been marked as end-of-input\n        if (_endOfInput) {\n            _reportError(\"Already closed, can not feed more input\");\n        }\n\n        // Capture the 'start' offset of the very first buffer fed.\n        // This value will be used to rebase the overall byte offset calculation.\n        // This assumes _inputBuffer being null indicates the first feed.\n        if (_inputBuffer == null) {\n            _firstInputStart = start;\n        }\n\n        // Time to update pointers first\n        // _currInputProcessed accumulates the length of the *previous* effective input buffer segment.\n        // The _origBufferLen holds the length of the segment from the prior feedInput call.\n        _currInputProcessed += _origBufferLen;\n\n        // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n        // This calculation is part of the original fix for core#531.\n        _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n        // And then update buffer settings\n        _inputBuffer = buf;\n        _inputPtr = start;\n        _inputEnd = end;\n        _origBufferLen = end - start; // Store length of the currently fed segment for next call.\n\n        // After updating _currInputProcessed, _inputPtr, and _origBufferLen,\n        // we adjust _currInputProcessed to effectively rebase the byte offset.\n        // The goal is that (absolute_stream_offset) = _currInputProcessed + _inputPtr - _firstInputStart.\n        // Since `JsonLocation` uses `_currInputProcessed + _inputPtr`, we subtract `_firstInputStart` from `_currInputProcessed`.\n        // This adjustment is applied to _currInputProcessed every time,\n        // ensuring that the `_firstInputStart` base is consistently removed.\n        _currInputProcessed -= _firstInputStart;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}