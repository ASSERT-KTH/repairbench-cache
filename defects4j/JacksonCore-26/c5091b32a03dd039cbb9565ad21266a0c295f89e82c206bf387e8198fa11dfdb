{
    "generation": "    @Override\n    public void feedInput(byte[] buf, int start, int end) throws IOException\n    {\n        // Must not have remaining input\n        if (_inputPtr < _inputEnd) {\n            _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n        }\n        if (end < start) {\n            _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n        }\n        // and shouldn't have been marked as end-of-input\n        if (_endOfInput) {\n            _reportError(\"Already closed, can not feed more input\");\n        }\n\n        // Store previous state needed for calculations\n        // Note: _currInputProcessed is the offset prior to byte 0 of the previous _inputBuffer\n        // _inputEnd is the end pointer in the previous _inputBuffer\n        long prevInputProcessed = _currInputProcessed;\n        int prevInputEnd = _inputEnd;\n        int prevInputRowStart = _currInputRowStart;\n\n        // Calculate the ABSOLUTE byte offset for the start of the new buffer segment (buf[start]).\n        // This is the offset up to the end of the previous buffer.\n        // Note: calculation `prevInputProcessed + prevInputEnd` assumes that the previous buffer\n        // segment logically started at index 0 relative to `prevInputProcessed`. This holds\n        // if `_currInputProcessed` is defined as `absolute_offset_of_buffer[0]`.\n        // Let's redefine `_currInputProcessed` to be `absolute_offset_of_buffer[start] - start`.\n        // Then the absolute offset of previous buffer end is `prevInputProcessed + prevInputEnd`.\n        long absoluteStartOffset = prevInputProcessed + prevInputEnd;\n\n        // Calculate the new _currInputProcessed. It's defined such that:\n        // Absolute offset of buf[ptr] == _currInputProcessed + ptr\n        // We know Absolute offset of buf[start] == absoluteStartOffset\n        // So, new _currInputProcessed + start == absoluteStartOffset\n        // -> new _currInputProcessed = absoluteStartOffset - start\n        // This ensures that base class calculations using `_currInputProcessed + _inputPtr` work correctly.\n        _currInputProcessed = absoluteStartOffset - start;\n\n        // Also need to adjust row start column index. Calculation uses previous state\n        // (_inputEnd, _currInputRowStart) and the 'start' of the new buffer segment.\n        // This formula ensures column number continuity.\n        _currInputRowStart = start - (prevInputEnd - prevInputRowStart);\n\n        // And then update buffer settings\n        _inputBuffer = buf;\n        _inputPtr = start;\n        _inputEnd = end;\n        // _origBufferLen is used by some methods (like close()), reflects length of the CURRENT buffer segment\n        _origBufferLen = end - start;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}