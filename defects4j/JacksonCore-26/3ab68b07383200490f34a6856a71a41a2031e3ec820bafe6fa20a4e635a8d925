{
    "generation": "    @Override\n    public void feedInput(byte[] buf, int start, int end) throws IOException\n    {\n        // Must not have remaining input\n        if (_inputPtr < _inputEnd) {\n            _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n        }\n        if (end < start) {\n            _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n        }\n        // and shouldn't have been marked as end-of-input\n        if (_endOfInput) {\n            _reportError(\"Already closed, can not feed more input\");\n        }\n\n        // Fix for [core#531]: Asynchronous parser byte offset calculation\n        // First, check if we had any content left; if so, we must update\n        // _currInputProcessed to reflect consumed bytes from that buffer\n        // (this covers case where partial buffer was read, and we must include\n        // non-parsed left-over bytes from that buffer)\n        // NOTE: this check is actually redundant as previous checks ensure no input left\n        //       (it is needed for other base methods like 'releaseInputBuffer' maybe)\n        if (_inputPtr < _inputEnd) {\n             _currInputProcessed += (_inputEnd - _inputPtr);\n        }\n        // Then need to update _currInputProcessed to reflect actual position\n        // in input, NOT 'start', but actually based on what's been read\n        // from underlying source.\n        // It's the 'real' offset of first byte of new buffer.\n        _currInputProcessed = (_currInputProcessed - _origBufferLen) + start;\n\n        // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n        // (note: _inputEnd and _currInputRowStart are relative to *previous* input buffer here)\n        _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n        // And then update buffer settings\n        _inputBuffer = buf;\n        _inputPtr = start;\n        _inputEnd = end;\n        _origBufferLen = end - start;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}