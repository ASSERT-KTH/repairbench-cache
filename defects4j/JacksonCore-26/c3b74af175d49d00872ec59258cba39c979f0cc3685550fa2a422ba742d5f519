{
    "generation": "    @Override\n    public void feedInput(byte[] buf, int start, int end) throws IOException\n    {\n        // Must not have remaining input\n        if (_inputPtr < _inputEnd) {\n            _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n        }\n        if (end < start) {\n            _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n        }\n        // and shouldn't have been marked as end-of-input\n        if (_endOfInput) {\n            _reportError(\"Already closed, can not feed more input\");\n        }\n\n        // 03-Oct-2019, tatu: For [core#531]: when initial offset is non-zero,\n        //   need to account for it, effectively shifting \"stream zero\"\n        //   to match current 'start' offset.\n        //   This is done by adjusting _currInputProcessed by the start offset of first input.\n        if (_inputBuffer == null) { // This is how first time is detected\n            // When buffer is null, we are just about to feed first input.\n            // _currInputProcessed should be adjusted by 'start' to ensure\n            // byte offsets start from 1 (instead of 1 + start).\n            // If _inputPtr will be 'start', and we want _currInputProcessed + _inputPtr to be 0 (0-based),\n            // then _currInputProcessed must be -start.\n            _currInputProcessed = -start;\n        } else {\n            // For subsequent calls, accumulate the length of the previous buffer.\n            // _origBufferLen holds the length of the *previous* input chunk (end-start from previous call).\n            _currInputProcessed += _origBufferLen;\n        }\n\n        // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n        // This calculation correctly shifts the row start based on the new buffer's 'start'\n        // and the previously processed portion of the current line.\n        // For the first call (where _inputBuffer was null), _inputEnd and _currInputRowStart are 0.\n        // So, _currInputRowStart = start - (0 - 0) = start.\n        // This correctly sets the 0-based column for `_inputPtr - _currInputRowStart` to 0 (since _inputPtr becomes 'start').\n        _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n        // And then update buffer settings for the NEW input\n        _inputBuffer = buf;\n        _inputPtr = start;\n        _inputEnd = end;\n        _origBufferLen = end - start; // Store length of THIS buffer for the NEXT feedInput call\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}