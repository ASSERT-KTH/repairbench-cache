{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = -1;\n        int depth = 0;\n        char last = 0;\n        boolean inSingleQuote = false;\n        boolean inDoubleQuote = false;\n        boolean escaped = false;\n\n        do {\n            if (isEmpty()) break;\n            char c = consume().charValue();\n\n            // handle quoting and escaping\n            if (!escaped) {\n                if (c == '\\\\') {\n                    escaped = true;\n                } else if (c == '\\'' && !inDoubleQuote) {\n                    inSingleQuote = !inSingleQuote;\n                } else if (c == '\"' && !inSingleQuote) {\n                    inDoubleQuote = !inDoubleQuote;\n                }\n            } else {\n                escaped = false; // reset escape state after processing escaped character\n            }\n\n            // only process open/close if not in quotes\n            if (!inSingleQuote && !inDoubleQuote && !escaped) {\n                if (c == open) {\n                    depth++;\n                    if (start == -1) {\n                        start = pos - 1; // include the opener in the result\n                    }\n                } else if (c == close) {\n                    depth--;\n                    if (depth == 0) {\n                        end = pos; // include up to but not including the closer\n                    }\n                }\n            }\n\n            if (depth > 0 && start != -1) {\n                end = pos; // update end position as we go\n            }\n            last = c;\n        } while (depth > 0);\n\n        if (start != -1 && end != -1) {\n            return queue.substring(start + 1, end); // exclude the open/close chars\n        } else {\n            return \"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}