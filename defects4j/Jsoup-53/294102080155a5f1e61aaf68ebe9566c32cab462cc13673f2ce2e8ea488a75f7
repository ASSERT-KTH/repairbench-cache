{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = 0; // Initialize end to 0, which is safe for substring(start, 0) if start is 0, or results in \"\" if start is -1\n        int depth = 0;\n        char inQuote = 0; // 0 for no quote, '\\'' for single quote, '\"' for double quote.\n        boolean lastCharWasEscape = false;\n        // Assuming ESC is a constant in the Tokeniser class, typically '\\'\n        final char ESC = '\\\\'; \n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n\n            if (lastCharWasEscape) {\n                // If the last character was an escape, the current character 'c' is literal.\n                // Reset escape state for the next character.\n                lastCharWasEscape = false;\n            } else if (c == ESC) {\n                // Current character is an escape. Mark for the next character.\n                lastCharWasEscape = true;\n                // Don't process this escape character further, but include it in the potential return string\n            } else if (inQuote != 0) {\n                // Currently inside a quote, check if the current character closes the quote.\n                if (c == inQuote) {\n                    inQuote = 0; // Exited quote\n                }\n                // If 'c' is not the closing quote, it's part of the quoted string and should be ignored\n                // for balancing purposes.\n            } else if (c == '\\'' || c == '\"') {\n                // Not inside a quote, and the current character is a quote character.\n                // Enter the quote state.\n                inQuote = c;\n            } else if (c == open) {\n                // Not escaped, not in a quote, and current char is the opener.\n                depth++;\n                if (start == -1) {\n                    start = pos; // 'pos' is already after consumed 'c', so it's the index of the char *after* the opener.\n                }\n            } else if (c == close) {\n                // Not escaped, not in a quote, and current char is the closer.\n                depth--;\n            }\n\n            // Update 'end' position only if we are currently inside the balanced string (depth > 0)\n            // and the current character was not an escape character (as escape chars don't contribute to the content length normally)\n            // The original logic `last != 0` for `end` update is replaced by `!lastCharWasEscape` for clarity.\n            if (depth > 0 && !lastCharWasEscape) {\n                end = pos; // 'pos' is already after 'c', so it's the exclusive end index for substring.\n            }\n        } while (depth > 0); // Continue as long as we are within a balanced block\n\n        // If 'start' was never set (meaning no 'open' character was found or string was empty),\n        // return an empty string. Otherwise, return the substring.\n        return (start == -1) ? \"\" : queue.substring(start, end);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}