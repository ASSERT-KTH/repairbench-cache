{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1; // Position *after* the first open char\n        int end = -1;   // Position *after* the last character within the balanced section (suitable for substring end index)\n        int depth = 0;\n        boolean inSingleQuote = false;\n        boolean inDoubleQuote = false;\n        boolean escaped = false; // Tracks if the *next* character is escaped\n\n        final char ESC = '\\\\'; // Define escape character\n\n        do {\n            if (isEmpty()) break;\n            char c = consume(); // Consume character, advances internal position 'pos'\n\n            if (escaped) {\n                // Previous char was ESC, current char 'c' is literal\n                escaped = false;\n                // No special handling needed for quotes or open/close for this character\n            } else {\n                // Check for escape character *before* checking quotes/open/close\n                if (c == ESC) {\n                    escaped = true;\n                } else if (c == '\\'' && !inDoubleQuote) {\n                    // Toggle single quote state only if not inside double quotes\n                    inSingleQuote = !inSingleQuote;\n                } else if (c == '\"' && !inSingleQuote) {\n                    // Toggle double quote state only if not inside single quotes\n                    inDoubleQuote = !inDoubleQuote;\n                } else if (!inSingleQuote && !inDoubleQuote) {\n                    // Only process open/close if not escaped and not inside any quotes\n                    if (c == open) {\n                        depth++;\n                        if (start == -1) // Record start position *after* the first opener char\n                            start = pos;\n                    } else if (c == close) {\n                        depth--;\n                    }\n                }\n                // Note: If the current char 'c' was not ESC, it might have changed quote state or depth.\n                // If it *was* ESC, the escaped flag is set true for the *next* iteration/character.\n            }\n\n            // Update end position:\n            // If we are inside the balanced structure (depth > 0) *after* processing char 'c',\n            // it means 'c' (and potentially escape characters before it) is part of the balanced content.\n            // Update 'end' to point *after* the character 'c'.\n            if (depth > 0 && start != -1) { // Ensure we are inside the balanced pair (start has been set)\n                 end = pos; // Update end to point *after* the current char 'c'\n            }\n            // When depth drops to 0 (or less) due to matching 'close' char, the loop condition (depth > 0)\n            // will fail, and the loop terminates. 'end' will hold the position *after* the character\n            // just before the final closing character.\n\n        } while (depth > 0); // Continue loop as long as depth is positive\n\n        // Return the substring from start (after open) to end (before close).\n        // Returns \"\" if:\n        //  - Opener 'open' was never found (start == -1, so end remains -1).\n        //  - Content is empty, e.g., \"()\". (start=1, end=1 -> substring(1,1) -> \"\").\n        //  - Input is unbalanced and queue ends while depth > 0.\n        return (end >= 0) ? queue.substring(start, end) : \"\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}