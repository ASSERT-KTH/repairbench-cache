{
    "generation": "/**\n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n * and leave \" four\" on the queue. Unbalanced openers and closers can be quoted (with ' or \") or escaped (with \\).\n * Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape),\n * but unsuitable for plain text; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\npublic String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    boolean inQuote = false;\n    char quoteChar = 0;\n    boolean escaped = false;\n    \n    while (!isEmpty()) {\n        char c = consume();\n        \n        if (escaped) {\n            // The previous escape applies; just reset and continue.\n            escaped = false;\n        } else {\n            if (c == ESC) { \n                escaped = true;\n            } else if (inQuote) {\n                // If we are inside a quoted string, ignore open/close until the matching quote is found.\n                if (c == quoteChar) {\n                    inQuote = false;\n                }\n            } else {\n                // Not escaped and not in a quote.\n                if (c == '\"' || c == '\\'') {\n                    inQuote = true;\n                    quoteChar = c;\n                } else if (c == open) {\n                    depth++;\n                    if (start == -1)\n                        start = pos; // mark start position after the opening delimiter\n                } else if (c == close) {\n                    depth--;\n                }\n            }\n        }\n        \n        if (depth > 0)\n            end = pos; // keep updating end while within the balanced region\n        else if (depth == 0 && start != -1)\n            break; // finished: consumed the matching close delimiter\n    }\n    return (end >= 0 && start != -1) ? queue.substring(start, end) : \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}