{
    "generation": "/**\n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n * contains text strings; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\npublic String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    boolean inSingleQuote = false;\n    boolean inDoubleQuote = false;\n    boolean escapeNext = false;\n\n    for (int i = 0; !isEmpty(); i++) {\n        char c = consume();\n        if (escapeNext) {\n            escapeNext = false;\n        } else {\n            if (c == '\\\\') {\n                escapeNext = true;\n            } else if (c == '\\'') {\n                inSingleQuote = !inSingleQuote && !inDoubleQuote;\n            } else if (c == '\\\"') {\n                inDoubleQuote = !inDoubleQuote && !inSingleQuote;\n            } else if (!inSingleQuote && !inDoubleQuote) {\n                if (c == open) {\n                    depth++;\n                    if (start == -1)\n                        start = pos;\n                } else if (c == close) {\n                    depth--;\n                }\n            }\n        }\n        if (depth > 0)\n            end = pos; // don't include the outer match pair in the return\n        if (depth == 0 && start != -1)\n            break;\n    }\n    return (end >= 0) ? queue.substring(start, end) : \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}