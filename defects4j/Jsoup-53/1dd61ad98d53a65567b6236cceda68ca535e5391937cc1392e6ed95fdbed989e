{
    "generation": "public String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    char last = 0;\n    boolean inString = false;\n    boolean escapeNext = false;\n    char stringDelimiter = 0;\n\n    do {\n        if (isEmpty()) break;\n        Character c = consume();\n\n        if (escapeNext) {\n            // If last was escape, treat current char as literal\n            last = c;\n            escapeNext = false;\n            continue;\n        }\n\n        if (c == '\\\\' ) {\n            escapeNext = true;\n            last = c;\n            continue;\n        }\n\n        if (inString) {\n            if (c == stringDelimiter) {\n                inString = false;\n                stringDelimiter = 0;\n            }\n            last = c;\n            continue;\n        }\n\n        if (c == '\\'' || c == '\"') {\n            inString = true;\n            stringDelimiter = c;\n            last = c;\n            continue;\n        }\n\n        if (last != '\\\\') { // Only process open and close if not escaped\n            if (c == open) {\n                depth++;\n                if (start == -1)\n                    start = pos;\n            } else if (c == close)\n                depth--;\n        }\n\n        if (depth > 0)\n            end = pos; // Don't include the outermost pair\n\n        last = c;\n    } while (depth > 0);\n\n    return (end >= 0) ? queue.substring(start, end) : \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}