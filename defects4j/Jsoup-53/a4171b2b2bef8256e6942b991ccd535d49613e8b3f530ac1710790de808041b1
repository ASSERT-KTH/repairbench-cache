{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = -1;\n        int depth = 0;\n        char last = 0;\n        boolean inQuote = false;\n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n            if (last == 0 || (last != ESC && !inQuote)) {\n                if (c.equals(open)) {\n                    depth++;\n                    if (start == -1)\n                        start = pos - 1; // include the opening character in the start position\n                }\n                else if (c.equals(close))\n                    depth--;\n            }\n            if (c.equals('\"') || c.equals('\\''))\n                inQuote = !inQuote;\n\n            if (depth > 0)\n                end = pos; \n            last = c;\n        } while (depth > 0);\n        // include the closer in the return\n        end = (depth == 0) ? pos : end;\n        return (end >= 0 && start >= 0 && end > start) ? queue.substring(start, end) : \"\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}