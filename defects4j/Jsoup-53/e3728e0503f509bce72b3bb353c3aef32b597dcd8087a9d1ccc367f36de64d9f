{
    "generation": "public String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    char last = 0;\n    char quoteChar = '\\0'; // Tracks if we're inside a quote: '\\0' means not in a quote\n\n    do {\n        if (isEmpty()) break;\n        char c = consume(); // unbox to primitive char for direct comparison\n\n        // Check for quotes, but only if not escaped\n        if (last != '\\\\') { // if previous char was not an escape\n            if (c == '\\'' || c == '\"') {\n                if (quoteChar == '\\0') {\n                    quoteChar = c; // enter quote\n                } else if (quoteChar == c) {\n                    quoteChar = '\\0'; // exit quote\n                }\n            }\n        }\n\n        // Process open/close only if not in a quote and not escaped\n        if (quoteChar == '\\0' && (last == 0 || last != '\\\\')) {\n            if (c == open) {\n                depth++;\n                if (start == -1) {\n                    start = pos - 1; // pos is after consume, so current char is at pos-1\n                }\n            } else if (c == close) {\n                depth--;\n            }\n        }\n\n        if (depth > 0 && last != 0) {\n            end = pos; // update end to current position after consuming the character\n        }\n\n        last = c; // update last to current character\n    } while (depth > 0);\n\n    if (start == -1) return \"\";\n    if (end == -1) end = start;\n    return queue.substring(start, end);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}