{
    "generation": "    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = -1;\n        int depth = 0;\n        char last = 0;\n        boolean inQuote = false;\n        char quoteChar = 0;\n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n            boolean escaped = last == ESC;\n\n            // Handle quotes\n            if (c.equals('\\'') || c.equals('\"')) {\n                if (!escaped) {\n                    if (inQuote) {\n                        if (c.equals(quoteChar)) {\n                            inQuote = false;\n                            quoteChar = 0;\n                        }\n                    } else {\n                        inQuote = true;\n                        quoteChar = c;\n                    }\n                }\n            }\n\n            // Only count brackets if not in a quote or escaped\n            if (!inQuote && !escaped) {\n                if (c.equals(open)) {\n                    depth++;\n                    if (start == -1)\n                        start = pos;\n                }\n                else if (c.equals(close)) {\n                    depth--;\n                }\n            }\n\n            if (depth > 0 && !inQuote)\n                end = pos; // don't include the outer match pair in the return\n            last = c;\n        } while (depth > 0 || inQuote);\n\n        // Reset position if we ended in a quote (malformed input)\n        if (inQuote) {\n            pos = 0; // or handle differently?\n            return \"\";\n        }\n\n        return (end >= 0) ? queue.substring(start, end) : \"\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}