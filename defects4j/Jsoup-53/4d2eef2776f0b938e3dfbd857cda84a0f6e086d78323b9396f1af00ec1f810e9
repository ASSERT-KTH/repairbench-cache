{
    "generation": "    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = -1;\n        int depth = 0;\n        char last = 0;\n        boolean inSingleQuote = false;\n        boolean inDoubleQuote = false;\n        boolean escaped = false;\n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n\n            if (escaped) {\n                // if escaped, skip the next character's special meaning\n                escaped = false;\n                continue;\n            }\n\n            if (c.equals('\\\\')) {\n                escaped = true;\n                continue;\n            }\n\n            if (c.equals('\\'') && !inDoubleQuote) {\n                inSingleQuote = !inSingleQuote;\n                continue;\n            }\n\n            if (c.equals('\\\"') && !inSingleQuote) {\n                inDoubleQuote = !inDoubleQuote;\n                continue;\n            }\n\n            if (!inSingleQuote && !inDoubleQuote) {\n                if (c.equals(open)) {\n                    depth++;\n                    if (start == -1)\n                        start = pos;\n                }\n                else if (c.equals(close))\n                    depth--;\n            }\n\n            if (depth > 0 && last != 0)\n                end = pos; // don't include the outer match pair in the return\n            last = c;\n        } while (depth > 0);\n\n        if (end == -1 && start != -1) // case where we started but didn't end balance. return what we have.\n            end = pos;\n\n        return (start >= 0 && end >= start) ? queue.substring(start, end) : \"\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}