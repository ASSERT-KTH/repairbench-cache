{
    "generation": "public String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    char last = 0;\n\n    do {\n        if (isEmpty()) {\n            break;\n        }\n        Character c = consume();\n        // Skip any bracket chars inside quoted strings\n        if (last != ESC && depth > 0 && (c.equals('\\'') || c.equals('\"'))) {\n            char quote = c;\n            // include the opening quote\n            end = pos;\n            last = c;\n            // consume until matching quote (honoring escapes)\n            while (!isEmpty()) {\n                c = consume();\n                if (last != ESC && c.equals(quote)) {\n                    last = c;\n                    end = pos;\n                    break;\n                }\n                last = c;\n                end = pos;\n            }\n            continue;\n        }\n        // normal bracket depth tracking (ignoring escaped opens/closes)\n        if (last != ESC) {\n            if (c.equals(open)) {\n                depth++;\n                if (start == -1) {\n                    start = pos;\n                }\n            } else if (c.equals(close)) {\n                depth--;\n            }\n        }\n        // record end so we exclude the outermost brackets\n        if (depth > 0 && last != 0) {\n            end = pos;\n        }\n        last = c;\n    } while (depth > 0);\n\n    return (end >= 0) ? queue.substring(start, end) : \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}