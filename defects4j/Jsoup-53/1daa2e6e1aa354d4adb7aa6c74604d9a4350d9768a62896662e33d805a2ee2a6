{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int depth = 0;\n        char last = 0;\n        boolean inQuote = false;\n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n            if (last != ESC) {\n                if (c.equals(ESC)) {\n                    // handled\n                } else if (c.equals('\"') || c.equals('\\'')) {\n                    inQuote = !inQuote;\n                } else if (!inQuote) {\n                    if (c.equals(open)) {\n                        depth++;\n                        if (start == -1)\n                            start = pos - 1; // include the open char in the returned substring\n                    } else if (c.equals(close)) {\n                        depth--;\n                    }\n                }\n            }\n            last = c;\n        } while (depth > 0);\n        if (start == -1) {\n            return \"\";\n        } else if (isEmpty()) {\n            return queue.substring(start); // exhausted to end\n        } else {\n            return queue.substring(start, pos - 1); // -1 to strip the end char (we just matched it)\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}