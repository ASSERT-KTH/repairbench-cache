{
    "generation": "public String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    boolean inEscape = false;\n    \n    while (!isEmpty()) {\n        char c = consume();\n        \n        // If we\u2019re in an escape sequence, just record this char and continue.\n        if (inEscape) {\n            inEscape = false;\n            if (depth > 0) end = pos;\n            continue;\n        }\n        if (c == '\\\\') {\n            // Mark that the next character is escaped.\n            inEscape = true;\n            if (depth > 0) end = pos;\n            continue;\n        }\n        \n        // If we hit a quote, skip everything until the matching quote.\n        if (c == '\\'' || c == '\\\"') {\n            char quote = c;\n            while (!isEmpty()) {\n                char qc = consume();\n                if (qc == '\\\\') {\n                    // Skip the escaped character.\n                    if (!isEmpty()) {\n                        consume();\n                    }\n                } else if (qc == quote) {\n                    break;\n                }\n            }\n            if (depth > 0) end = pos;\n            continue;\n        }\n        \n        if (c == open) {\n            depth++;\n            if (start == -1)\n                start = pos;\n        } else if (c == close) {\n            depth--;\n        }\n        \n        if (depth > 0)\n            end = pos;\n        if (depth <= 0)\n            break;\n    }\n    return (end >= 0 && start >= 0 && end > start) ? queue.substring(start, end) : \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}