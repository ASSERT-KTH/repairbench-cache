{
    "generation": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    \n    // Handle required parameters first\n    while (arguments.hasNext() && parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    // Handle var_args if the function allows it\n    if (functionType.isVarArgs()) {\n        JSType varArgsType = functionType.getVarArgsType();\n        while (arguments.hasNext()) {\n            argument = arguments.next();\n            ordinal++;\n\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), varArgsType, call, ordinal);\n        }\n    } else if (arguments.hasNext()) {\n        // If there are more arguments than parameters and it's not var_args, report an error\n        argument = arguments.next();\n        report(t, argument, UNEXPECTED_ARGUMENT_FOR_NON_VAR_ARGS,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(ordinal + 1));\n        // Consume remaining arguments to avoid further errors\n        while (arguments.hasNext()) {\n            arguments.next();\n        }\n    }\n\n    // Check for missing required arguments\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ?\n                        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}