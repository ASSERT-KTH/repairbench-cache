{
    "generation": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  // Type-check all arguments which have a corresponding formal parameter.\n  while (arguments.hasNext() && parameters.hasNext()) {\n    Node parameter = parameters.next();\n    Node argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // If this is a var_args function (maxArgs is effectively unbounded),\n  // then every extra argument should be type-checked against the var_args parameter.\n  if (functionType.getMaxArguments() == Integer.MAX_VALUE) {\n    // Get the full parameter list to retrieve the var_args parameter.\n    // (A var_args function should have at least one formal parameter.)\n    List<Node> paramList = functionType.getParameters();\n    if (!paramList.isEmpty()) {\n      Node varargsParameter = paramList.get(paramList.size() - 1);\n      while (arguments.hasNext()) {\n        ordinal++;\n        Node argument = arguments.next();\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(varargsParameter), call, ordinal);\n      }\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE\n            ? \" and no more than \" + maxArgs + \" argument(s)\"\n            : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}