{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameterNode = null;\n    JSType parameterType = null;\n    boolean isVarArgs = functionType.isVarArgs();\n    // Indicates if the last fetched parameter node was the varargs parameter.\n    boolean lastParameterIsVarArgs = false;\n\n    while (arguments.hasNext()) {\n      Node argumentNode = arguments.next();\n      ordinal++;\n      JSType argumentType = getJSType(argumentNode);\n\n      // Determine the parameter type for this argument.\n      // If the last parameter was varargs, keep using its type.\n      if (!(parameterNode != null && lastParameterIsVarArgs)) {\n        // Otherwise, advance the parameter iterator if possible.\n        if (parameters.hasNext()) {\n          parameterNode = parameters.next();\n          parameterType = getJSType(parameterNode);\n          // Check if this is the last parameter node AND the function is var args\n          lastParameterIsVarArgs = isVarArgs && !parameters.hasNext();\n        } else {\n          // Not currently processing varargs, and no more formal parameters.\n          // This is an excess argument. The WRONG_ARGUMENT_COUNT check below\n          // handles this case. We should not perform type checking here.\n          parameterType = null; // Mark as no parameter available\n        }\n      }\n      // else { we are processing varargs parameter, parameterType is already set }\n\n\n      // Perform the check if we have a parameter type.\n      // We should skip the check if the argument is extern and the parameter\n      // isn't declared extern. Closure doesn't check extern arguments eagerly.\n      if (parameterType != null) {\n        validator.expectArgumentMatchesParameter(t, argumentNode,\n            argumentType, parameterType, call, ordinal);\n      }\n    }\n\n    // Check argument counts.\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      // Note: This check correctly handles cases where we stopped processing\n      // arguments early because parameter list was exhausted for non-varargs fn.\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}