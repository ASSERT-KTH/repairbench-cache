{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null; // The current parameter node from the FunctionType\n    Node argument = null; // The current argument node from the call\n    // Store the type of the declared var_args parameter (if present).\n    // The JSType associated with the var_args parameter node is the\n    // *element* type (e.g., number for ...number).\n    JSType varArgsType = null;\n\n    // Iterate through arguments passed in the call.\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      parameter = null; // Reset parameter node for the current argument.\n\n      // Get the next declared parameter, if it exists.\n      if (parameters.hasNext()) {\n          parameter = parameters.next();\n          // Check if this parameter is the var_args parameter.\n          // It's the var_args parameter if the function is var_args\n          // and this is the last node in the parameters iterator.\n          if (functionType.isVarArgs() && !parameters.hasNext()) {\n              varArgsType = getJSType(parameter);\n          }\n      }\n\n      JSType parameterJSType = null;\n      if (parameter != null) {\n          // Use the type of the current declared parameter.\n          parameterJSType = getJSType(parameter);\n      } else if (varArgsType != null) {\n          // If we have run out of declared parameters but previously\n          // found a var_args parameter, use its type for remaining arguments.\n          parameterJSType = varArgsType;\n      }\n      // else: Too many arguments for a non-var_args function.\n      // This will be caught by the WRONG_ARGUMENT_COUNT check later.\n      // We don't attempt to type-check extra arguments in this case.\n\n      if (parameterJSType != null) {\n           // Check the current argument's type against the determined parameter type.\n           validator.expectArgumentMatchesParameter(t, argument,\n               getJSType(argument), parameterJSType, call, ordinal);\n      }\n    }\n\n    // Check for argument count mismatch (existing logic).\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    // This check correctly handles:\n    // 1. Too few arguments (minArgs > numArgs).\n    // 2. Too many arguments for non-var_args functions (maxArgs < numArgs).\n    // For var_args functions, maxArgs is Integer.MAX_VALUE, so maxArgs < numArgs\n    // is never true, and having more arguments than declared parameters is allowed\n    // as long as they match the var_args type (checked above).\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}