{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n\n  Node parameter = null;\n\n  if (parameters.hasNext()) {\n    parameter = parameters.next();\n  }\n\n  while (arguments.hasNext()) {\n    Node argument = arguments.next();\n    ordinal++;\n\n    // If there are still fixed params left, use that. Otherwise, we may be in varargs\n    JSType paramType = parameter != null ? getJSType(parameter) : null;\n    if (parameters.hasNext()) {\n      parameter = parameters.next();\n    } else if (functionType.isVarArgs()) {\n      // For variable arguments, use the last parameter's type (usually the var_args param)\n      // and treat each additional argument as matching var_args.\n      // paramType remains the type of the last param\n    } else {\n      // no parameters left, not varargs, ignore as the argument count check below will catch it\n      paramType = null;\n    }\n\n    if (paramType != null) {\n      validator.expectArgumentMatchesParameter(\n          t, argument,\n          getJSType(argument),\n          paramType,\n          call, ordinal);\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}