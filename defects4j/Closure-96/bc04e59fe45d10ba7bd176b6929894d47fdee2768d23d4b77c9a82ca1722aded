{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() &&\n           parameters.hasNext()) {\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    // Handle var_args parameters\n    if (functionType.isVarArgs() && arguments.hasNext()) {\n      // Get the var_args parameter type (last parameter when var_args)\n      JSType varArgsType = null;\n      if (parameter != null &&\n          parameter.getJSDocInfo() != null &&\n          parameter.getJSDocInfo().isParameterVarArgs()) {\n        varArgsType = getJSType(parameter);\n      } else if (functionType.getParameters().size() > 0) {\n        varArgsType = getJSType(functionType.getParameters().getLast());\n      }\n\n      if (varArgsType != null) {\n        while (arguments.hasNext()) {\n          ordinal++;\n          argument = arguments.next();\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), varArgsType, call, ordinal);\n        }\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}