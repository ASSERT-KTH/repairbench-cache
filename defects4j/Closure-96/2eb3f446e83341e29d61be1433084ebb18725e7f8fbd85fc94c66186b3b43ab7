{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  // match arguments to formal parameters\n  while (arguments.hasNext() && parameters.hasNext()) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(\n        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // if this is a var_args function, match any remaining arguments\n  if (functionType.isVarArgs()) {\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      // reuse the last 'parameter' which will be the var_args param\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n  }\n\n  // finally, check for wrong argument count\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs),\n        String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE\n            ? \" and no more than \" + maxArgs + \" argument(s)\"\n            : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}