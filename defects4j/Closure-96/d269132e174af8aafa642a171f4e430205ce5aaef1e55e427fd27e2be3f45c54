{
    "generation": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  // First, check the number of arguments against min and max\n  if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ?\n        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  while (arguments.hasNext()) {\n    Node argument = arguments.next();\n    ordinal++;\n\n    if (ordinal <= functionType.getParametersCount()) {\n      Node parameter = parameters.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    } else {\n      // For var_args, check against the var_args type\n      JSType varArgType = functionType.getParameters().isEmpty() ? null : getJSType(parameters.next());\n      if (varArgType == null) {\n        varArgType = functionType.getVarArgType();\n      }\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), varArgType, call, ordinal);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}