{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    // Pull out the declared parameters and detect the var_args parameter (if any).\n    List<Node> params = functionType.getParameters();\n    Iterator<Node> parameters = params.iterator();\n    Node varArgsParameter = null;\n    if (functionType.isVarArgs() && !params.isEmpty()) {\n      // The last declared parameter is the rest (var_args) parameter.\n      varArgsParameter = params.get(params.size() - 1);\n    }\n\n    int ordinal = 0;\n    // Match up each declared parameter (including the first var_args) in order.\n    while (arguments.hasNext() && parameters.hasNext()) {\n      Node parameter = parameters.next();\n      Node argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(\n          t, argument,\n          getJSType(argument), getJSType(parameter),\n          call, ordinal);\n    }\n\n    // If this is a var_args function, match any extra arguments\n    // against the var_args parameter's type.\n    if (varArgsParameter != null) {\n      while (arguments.hasNext()) {\n        Node argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(\n            t, argument,\n            getJSType(argument), getJSType(varArgsParameter),\n            call, ordinal);\n      }\n    }\n\n    // Finally, check for a wrong number of arguments.\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          maxArgs != Integer.MAX_VALUE\n              ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}