{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  // Match each argument against a formal parameter\n  while (arguments.hasNext() && parameters.hasNext()) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(\n        t, argument,\n        getJSType(argument),\n        getJSType(parameter),\n        call, ordinal);\n  }\n\n  // If there are remaining arguments, this must be a var_args function;\n  // match each extra argument against the last parameter.\n  while (arguments.hasNext() && !parameters.hasNext()) {\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(\n        t, argument,\n        getJSType(argument),\n        getJSType(parameter),\n        call, ordinal);\n  }\n\n  // Finally, check the overall argument count.\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs),\n        String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE\n            ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}