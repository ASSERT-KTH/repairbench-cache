{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameterNode = null; // The formal parameter node to check against\n    Node argumentNode = null;\n\n    while (arguments.hasNext()) {\n      argumentNode = arguments.next();\n      ordinal++;\n\n      // Determine the parameter node to use for checking this argument\n      if (parameters.hasNext()) {\n        parameterNode = parameters.next();\n      } else if (functionType.isVarArgs()) {\n        // If we've exhausted explicit parameters, and the function is var_args,\n        // keep using the *last* parameter node obtained (which should be the var_args node).\n        // If parameterNode is null here, it implies a function starting with varargs\n        // that was called with no arguments; the loop wouldn't have entered.\n        // If called with arguments, parameterNode would have been set in the first iteration\n        // where parameters.hasNext() was true.\n        if (parameterNode == null) {\n           // This state implies a mismatch between isVarArgs and getParameters,\n           // or a varargs function with no arguments called (loop wouldn't run).\n           // If reached unexpectedly, break to avoid NPE. Argument count check might catch issues.\n           break;\n        }\n        // No 'else': Reuse the existing parameterNode for subsequent var_args arguments.\n      } else {\n        // We have more arguments than parameters, and it's not a var_args function.\n        // Stop type-checking arguments. The argument count check below will flag this.\n        break;\n      }\n\n      // Check the argument type against the parameter type.\n      // parameterNode should be non-null if we haven't broken out of the loop.\n      if (parameterNode != null) {\n          validator.expectArgumentMatchesParameter(t, argumentNode,\n              getJSType(argumentNode), getJSType(parameterNode), call, ordinal);\n      }\n    }\n\n    // Argument count check\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}