{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  // Collect the formal parameters.\n  // For a var_args function, the last parameter is repeated for extra arguments.\n  List<Node> parameterNodes = functionType.getParameters();\n  boolean isVarArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n  int fixedParamCount = isVarArgs ? parameterNodes.size() - 1 : parameterNodes.size();\n\n  int ordinal = 0;\n  // Process each argument provided.\n  for (int i = 0; arguments.hasNext(); i++) {\n    Node argument = arguments.next();\n    ordinal++;\n\n    Node parameter;\n    if (i < fixedParamCount) {\n      // Use the corresponding fixed parameter.\n      parameter = parameterNodes.get(i);\n    } else if (isVarArgs) {\n      // For extra arguments, use the var_args parameter (which is the last one).\n      parameter = parameterNodes.get(parameterNodes.size() - 1);\n    } else {\n      // Extra arguments in a non-varargs function: break out (the arity error is reported below).\n      break;\n    }\n\n    validator.expectArgumentMatchesParameter(\n        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs), String.valueOf(minArgs),\n           maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}