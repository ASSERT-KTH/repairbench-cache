{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null; // Will hold the formal parameter node for type checking\n    Node argument = null;\n\n    // Iterate through all arguments provided in the call.\n    // The loop continues as long as there are arguments to check.\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      // Determine the formal parameter corresponding to the current argument.\n      if (parameters.hasNext()) {\n        // There are still explicit formal parameters defined. Use the next one.\n        parameter = parameters.next();\n      } else if (functionType.isVarArgs()) {\n        // All explicit formal parameters have been consumed, but the function is var_args.\n        // In this case, 'parameter' should already hold the last formal parameter\n        // (which is the var_args parameter node from the previous iteration).\n        // For example, for `function f(a, ...b)`, after processing 'a', 'parameter'\n        // will hold the node for 'b'. Any subsequent arguments will also be checked\n        // against the type of 'b'.\n        // If the function has only var_args (e.g., `function f(...args)`), then\n        // `parameters.next()` would have set `parameter` to the 'args' node\n        // during the first argument. So, 'parameter' will always be valid here.\n        // No action needed for 'parameter' itself; it retains its last value.\n      } else {\n        // No more formal parameters and the function is not var_args.\n        // This means we have an excess argument for a non-var_args function.\n        // The argument count error will be reported by the logic outside this loop.\n        // We should stop type checking here to avoid potential NPE if 'parameter'\n        // is null (e.g., calling `function f(){}` with arguments) or\n        // to avoid reporting a less specific type error over a count error.\n        break;\n      }\n\n      // Perform the argument-parameter type matching.\n      // At this point, 'parameter' is guaranteed to be non-null if code execution reaches here.\n      // It would have been assigned from `parameters.next()` if parameters existed,\n      // or it would have retained a valid var_args parameter,\n      // or the loop would have broken if no parameters and not var_args.\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}