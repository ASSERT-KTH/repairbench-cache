{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  // Skip the function name.\n  Iterator<Node> children = call.children().iterator();\n  children.next();\n\n  // Collect all the argument nodes.\n  List<Node> args = new ArrayList<>();\n  while (children.hasNext()) {\n    args.add(children.next());\n  }\n\n  // Collect all the formal parameter nodes.\n  List<Node> params = new ArrayList<>(functionType.getParameters());\n  int ordinal = 0;\n  // For a var_args function, the last formal parameter is used for all extra arguments.\n  int fixedParamCount = functionType.hasVarArgs() ? params.size() - 1 : params.size();\n\n  // Process the fixed (non-varargs) parameters.\n  for (int i = 0; i < fixedParamCount && i < args.size(); i++) {\n    ordinal++;\n    Node argument = args.get(i);\n    Node parameter = params.get(i);\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // If this is a var_args function, process all extra arguments using the varargs parameter.\n  if (functionType.hasVarArgs()) {\n    Node varArgParam = params.get(params.size() - 1);\n    for (int i = fixedParamCount; i < args.size(); i++) {\n      ordinal++;\n      Node argument = args.get(i);\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(varArgParam), call, ordinal);\n    }\n  }\n\n  // Check that the overall number of arguments is within the acceptable limits.\n  int numArgs = args.size();\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}