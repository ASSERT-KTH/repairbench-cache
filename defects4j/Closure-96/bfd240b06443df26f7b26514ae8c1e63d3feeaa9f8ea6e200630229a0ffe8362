{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node lastParameter = null;\n  // Process each formal parameter as long as both iterators have elements.\n  while (arguments.hasNext() && parameters.hasNext()) {\n    lastParameter = parameters.next();\n    Node argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(lastParameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  // If the function is var_args (i.e. maxArgs is unbounded) then validate\n  // each remaining argument against the last formal (var_args) parameter.\n  if (maxArgs == Integer.MAX_VALUE && lastParameter != null) {\n    while (arguments.hasNext()) {\n      Node argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(lastParameter), call, ordinal);\n    }\n  }\n\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs), String.valueOf(minArgs),\n           maxArgs != Integer.MAX_VALUE\n               ? \" and no more than \" + maxArgs + \" argument(s)\"\n               : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}