{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null; // Current parameter node from signature\n    Node argument = null;\n    boolean isVarArgs = false;\n    JSType varArgsType = null; // Type of the varargs parameter element\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      JSType expectedParameterType = null;\n\n      // If we are processing varargs, use the varargs type.\n      if (isVarArgs) {\n          expectedParameterType = varArgsType;\n      } else if (parameters.hasNext()) {\n          // Get the next formal parameter.\n          parameter = parameters.next();\n          // Determine the type of the parameter.\n          // For varargs, this will be the type of the individual elements.\n          expectedParameterType = getJSType(parameter);\n\n          // Check if this is a varargs parameter.\n          if (parameter.isVarArgs()) {\n              isVarArgs = true;\n              // Store the varargs element type for subsequent arguments.\n              varArgsType = expectedParameterType;\n          }\n          // Optional args are handled by the type system/getJSType.\n      } else {\n          // No more formal parameters. If we are not in varargs mode,\n          // this means we have too many arguments. The argument count check\n          // below will handle this. We don't have an expected type here.\n          // If we *are* in varargs mode, this branch shouldn't be reached\n          // because the isVarArgs check above would trigger.\n      }\n\n      // Perform the type check if we determined an expected type\n      // for the current argument.\n      if (expectedParameterType != null) {\n           validator.expectArgumentMatchesParameter(t, argument,\n               getJSType(argument), expectedParameterType, call, ordinal);\n      }\n      // If expectedParameterType is null (because we ran out of formal params\n      // and are not in varargs mode), we don't perform a type check for this\n      // argument, as the argument count check below will report the error.\n    }\n\n    // Check argument count after iterating through arguments.\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}