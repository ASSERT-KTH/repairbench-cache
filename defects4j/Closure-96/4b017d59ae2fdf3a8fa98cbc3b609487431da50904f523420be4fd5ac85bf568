{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  while (arguments.hasNext() &&\n         parameters.hasNext()) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // Handle var_args functions\n  if (functionType.isVarArgs()) {\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      // In var_args functions, additional arguments should match the type of the last parameter\n      // or be undefined.\n      JSType varArgsType = functionType.getParameters().isEmpty() ?\n          getNativeType(UNKNOWN_TYPE) : getJSType(parameter);\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), varArgsType.getUnionType(getNativeType(UNDEFINED_TYPE)),\n          call, ordinal);\n    }\n  } else if (arguments.hasNext()) {\n    // If there are more arguments than parameters and it's not a var_args function, report an error.\n    argument = arguments.next();\n    ordinal++;\n    report(t, argument, EXTRA_ARGUMENT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(ordinal));\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}