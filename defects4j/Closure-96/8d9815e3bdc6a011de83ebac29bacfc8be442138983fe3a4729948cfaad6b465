{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() && parameters.hasNext()) {\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      JSType paramType = getJSType(parameter);\n      JSType expectedType = paramType;\n\n      // Check if this is the var_args parameter\n      if (functionType.isVarArgs() && !parameters.hasNext()) {\n        if (paramType.isArrayType()) {\n          expectedType = paramType.toMaybeArrayType().getElementType();\n        } else if (paramType.isUnionType()) {\n          for (JSType alt : paramType.toMaybeUnionType().getAlternates()) {\n            if (alt.isArrayType()) {\n              expectedType = alt.toMaybeArrayType().getElementType();\n              break;\n            }\n          }\n        } else {\n          expectedType = getNativeType(UNKNOWN_TYPE);\n        }\n      }\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), expectedType, call, ordinal);\n    }\n\n    // Handle remaining arguments for var_args\n    if (arguments.hasNext() && functionType.isVarArgs()) {\n      Node varArgsParam = functionType.getParameters().getLast();\n      JSType varArgsType = getJSType(varArgsParam);\n      JSType elementType = null;\n\n      if (varArgsType.isArrayType()) {\n        elementType = varArgsType.toMaybeArrayType().getElementType();\n      } else if (varArgsType.isUnionType()) {\n        for (JSType alt : varArgsType.toMaybeUnionType().getAlternates()) {\n          if (alt.isArrayType()) {\n            elementType = alt.toMaybeArrayType().getElementType();\n            break;\n          }\n        }\n      } else {\n        elementType = getNativeType(UNKNOWN_TYPE);\n      }\n\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), elementType, call, ordinal);\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}