{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    Node varargsParameterNode = null; // Stores the varargs definition node if encountered\n\n    // Check fixed parameters first. Iterate through defined parameters.\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      JSDocInfo paramInfo = parameter.getJSDocInfo();\n      boolean isVarargs = paramInfo != null && paramInfo.isVarArgs();\n\n      // If this parameter is varargs, store it and break the parameter loop.\n      // All remaining arguments will be checked against the varargs type.\n      if (isVarargs) {\n          varargsParameterNode = parameter;\n          break; // Found varargs, exit parameter loop\n      }\n\n      // It's a regular parameter. Check if an argument is supplied.\n      if (arguments.hasNext()) {\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      } else {\n        // Not enough arguments supplied for non-varargs parameters.\n        // This is checked by the argument count check later.\n        // We can break the parameter loop as no more arguments can be checked against parameters.\n        break;\n      }\n    }\n\n    // Check remaining arguments against the varargs type if a varargs parameter was found.\n    if (varargsParameterNode != null) {\n      JSType varargsType = getJSType(varargsParameterNode);\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        ordinal++; // Increment for each argument being checked\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), varargsType, call, ordinal);\n      }\n    }\n    // If varargsParameterNode is null after the first loop, but arguments.hasNext() is true here,\n    // it signifies that too many arguments were passed to a non-varargs function.\n    // The argument count check below will report this error.\n\n    // Argument count check\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              // Only add the max count if it's not effectively infinite (for varargs)\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}