{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean isVarArgs = functionType.isVarArgs();\n\n  while (arguments.hasNext()) {\n    if (parameters.hasNext()) {\n      parameter = parameters.next();\n    } else if (isVarArgs) {\n      // For var_args, use the last parameter repeatedly for extra arguments.\n      parameter = functionType.getParameters().iterator().hasNext() \n        ? getLastParameter(functionType.getParameters())\n        : null;\n    } else {\n      // No more parameters and not var_args, break.\n      break;\n    }\n\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), parameter != null ? getJSType(parameter) : null, call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}\n\n/**\n * Returns the last parameter in the iterable.\n */\nprivate Node getLastParameter(Iterable<Node> parameters) {\n  Node last = null;\n  for (Node param : parameters) {\n    last = param;\n  }\n  return last;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}