{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node argument = null;\n\n    // Store the var_args element type if this is a var_args function.\n    // This will be used for arguments that exceed the number of declared formal parameters.\n    JSType varArgsElementType = null;\n    if (functionType.isVarArgs()) {\n      varArgsElementType = functionType.getVarArgType();\n    }\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      JSType formalParameterType = null;\n\n      if (parameters.hasNext()) {\n        // We still have a declared formal parameter. Use its type.\n        Node formalParameterNode = parameters.next();\n        formalParameterType = getJSType(formalParameterNode);\n      } else if (functionType.isVarArgs()) {\n        // All declared formal parameters have been consumed,\n        // but this is a var_args function.\n        // All subsequent arguments should be checked against the var_args element type.\n        formalParameterType = varArgsElementType;\n      } else {\n        // No more declared formal parameters, and this is not a var_args function.\n        // These are excess arguments. The `WRONG_ARGUMENT_COUNT` error will handle this.\n        // No type checking is needed for these arguments as there's no parameter to match them against.\n        continue;\n      }\n\n      // Perform the type check for the current argument against its determined formal parameter type.\n      // This will only be executed if formalParameterType is not null, i.e., we found a parameter to match against.\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), formalParameterType, call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}