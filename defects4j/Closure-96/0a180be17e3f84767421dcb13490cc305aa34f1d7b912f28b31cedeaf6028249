{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null; // This will hold the current formal parameter node or the var_args parameter node\n    Node argument = null;\n\n    // First, check arguments against explicit formal parameters.\n    while (arguments.hasNext() &&\n           parameters.hasNext()) {\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    // If the function is a var_args function and there are still arguments,\n    // check remaining arguments against the var_args parameter.\n    // At this point, if functionType.isVarArgs() is true and the loop above\n    // exhausted the 'parameters' iterator, then 'parameter' will hold\n    // the var_args parameter node.\n    // If the 'arguments' iterator was exhausted first, then this block will be skipped.\n    if (functionType.isVarArgs()) {\n      // The 'parameter' variable should correctly hold the var_args parameter node\n      // because FunctionType.getParameters() includes the var_args parameter if present,\n      // and it would have been the last (or only) parameter consumed by parameters.next().\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        ordinal++;\n        // Use the same var_args parameter node for all subsequent arguments.\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}