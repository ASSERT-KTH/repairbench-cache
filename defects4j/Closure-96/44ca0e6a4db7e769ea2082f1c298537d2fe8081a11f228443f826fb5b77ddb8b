{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null; // This will hold the current formal parameter node\n    Node argument = null;\n\n    // Iterate through all arguments provided in the call.\n    // The loop should continue as long as there are arguments to check.\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      if (parameters.hasNext()) {\n        // If there are more formal parameters defined, consume the next one.\n        parameter = parameters.next();\n      } else if (functionType.isVarArgs()) {\n        // If no more explicit formal parameters are left, but the function\n        // is a var_args function, then all remaining arguments should be\n        // checked against the var_args parameter.\n        // The 'parameter' variable should already hold the var_args parameter\n        // from the last call to parameters.next() (it's the last formal parameter),\n        // or if the function only has var_args, it would have been set in the first iteration.\n        // So, we reuse the existing 'parameter' which must be the var_args one.\n        // No action needed here other than letting 'parameter' retain its value.\n      } else {\n        // No more formal parameters and the function is not var_args.\n        // This means we have encountered excess arguments beyond what the\n        // function is defined to accept. The argument count check after the\n        // loop will report this as WRONG_ARGUMENT_COUNT.\n        // We stop individual argument type checking as there's no formal\n        // parameter to match them against.\n        break;\n      }\n\n      // At this point, 'parameter' should hold the relevant formal parameter\n      // (either a fixed one or the var_args one).\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}