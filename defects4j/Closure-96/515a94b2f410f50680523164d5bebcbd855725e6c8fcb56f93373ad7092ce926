{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name (function name itself is the first child)\n\n    // Get an iterator for the formal (non-variadic) parameters.\n    // The FunctionType's getParameters() usually returns only the fixed parameters,\n    // not the variadic one.\n    Iterator<Node> formalParameters = functionType.getParameters().iterator();\n\n    // Get the variadic parameter node, if it exists.\n    // This will be null if the function is not variadic.\n    Node varArgsParameter = functionType.getVarArgsParameter();\n\n    int ordinal = 0;\n    Node parameterToValidateAgainst = null; // The formal parameter node for the current argument\n\n    // Iterate through all arguments provided in the call.\n    while (arguments.hasNext()) {\n      Node argument = arguments.next();\n      ordinal++;\n\n      if (formalParameters.hasNext()) {\n        // If there are still formal parameters, match the current argument to the next one.\n        parameterToValidateAgainst = formalParameters.next();\n      } else if (functionType.isVarArgs() && varArgsParameter != null) {\n        // All formal parameters have been consumed. If the function is variadic,\n        // all subsequent arguments should be validated against the variadic parameter's type.\n        parameterToValidateAgainst = varArgsParameter;\n      } else {\n        // No more formal parameters and it's not a variadic function (or varArgsParameter was null).\n        // This means the current argument is an \"excess\" argument for a non-variadic function.\n        // In this case, we don't perform a type-check for this specific argument,\n        // as the WRONG_ARGUMENT_COUNT check later will report the primary error.\n        parameterToValidateAgainst = null;\n      }\n\n      // Perform type validation only if a corresponding parameter (formal or variadic) was found.\n      if (parameterToValidateAgainst != null) {\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameterToValidateAgainst), call, ordinal);\n      }\n    }\n\n    // After processing all arguments, check the total argument count against the function's\n    // minimum and maximum expected arguments.\n    int numArgs = call.getChildCount() - 1; // Subtract 1 for the function name itself\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}