{
    "generation": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  // Convert the parameter iterator to a List for random access.\n  List<Node> parameters = new ArrayList<>();\n  for (Node param : functionType.getParameters()) {\n    parameters.add(param);\n  }\n  int numParameters = parameters.size();\n  int ordinal = 0;\n  while (arguments.hasNext()) {\n    Node argument = arguments.next();\n    ordinal++;\n    Node parameter;\n    if (ordinal <= numParameters) {\n      parameter = parameters.get(ordinal - 1);\n    } else if (functionType.isVarArgs()) {\n      // In a varargs function, any extra arguments are checked against the last parameter.\n      parameter = parameters.get(numParameters - 1);\n    } else {\n      // No matching parameter exists; break out of the loop.\n      break;\n    }\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                                              getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs), String.valueOf(minArgs),\n           maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}