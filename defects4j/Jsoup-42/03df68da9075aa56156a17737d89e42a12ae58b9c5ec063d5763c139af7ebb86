{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            // Check if the element is form submittable (e.g., not disabled)\n            if (!el.tag().isFormSubmittable()) continue; \n            \n            String name = el.attr(\"name\");\n            // Skip elements without a name attribute, as they are not submitted\n            if (name.length() == 0) continue;\n            \n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                // If no option is explicitly selected in a single-select,\n                // the value of the first option in the list is used.\n                // For multi-selects, if nothing is selected, nothing is submitted.\n                // The current logic adds the first option if nothing is selected,\n                // which aligns with single-select behavior.\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // Only add checkbox or radio if they have the 'checked' attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val;\n                    // Fix: For checkboxes, if no 'value' attribute is present, the default value is 'on'.\n                    // For radio buttons, the 'value' attribute is typically always present and must be used.\n                    if (\"checkbox\".equalsIgnoreCase(type) && !el.hasAttr(\"value\")) {\n                        val = \"on\";\n                    } else {\n                        val = el.val();\n                    }\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                // For other input types (text, hidden, password, etc.) and textarea\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}