{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, org.w3c.dom.Element el) {\n            // Using a pre-compiled pattern is generally more efficient if this method is called often.\n            // Consider making XML_NAME_PATTERN a static final member of the surrounding class.\n            // Pattern for valid XML attribute names (simplified).\n            // XML spec: https://www.w3.org/TR/xml/#NT-Name\n            // Checks if name starts with letter, underscore, or colon,\n            // followed by letters, digits, hyphen, underscore, colon, or period.\n            final java.util.regex.Pattern XML_NAME_PATTERN = java.util.regex.Pattern.compile(\"[a-zA-Z_:][-a-zA-Z0-9_:.]*\");\n\n            for (org.jsoup.nodes.Attribute attribute : source.attributes()) {\n                String key = attribute.getKey();\n\n                // Check if the attribute key is a valid XML name.\n                // Jsoup's HTML parser permits attribute names that are invalid in XML (e.g., containing quotes).\n                // W3C DOM `setAttribute` requires valid XML names, otherwise it throws a DOMException.\n                if (XML_NAME_PATTERN.matcher(key).matches()) {\n                    // If the key is a valid XML name, set the attribute.\n                    el.setAttribute(key, attribute.getValue());\n                }\n                // else: If the key is not a valid XML name, skip this attribute to avoid the DOMException.\n                // The original code attempted to sanitize the key, but the sanitization was\n                // insufficient and could still lead to invalid names (e.g., empty string, starting with digit).\n                // Skipping is a safer approach to prevent errors during conversion.\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}