{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                String key = attribute.getKey();\n                String value = attribute.getValue();\n\n                // XML attribute names must start with a letter, _, or :\n                // Subsequent characters can be letters, digits, ., -, _, or :\n                // The regex `[^-a-zA-Z0-9_:.]` removes any characters that are NOT\n                // allowed in *any* part of an XML attribute name (i.e., not a NameChar).\n                String cleanedKey = key.replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n\n                // Ensure the cleaned key is a valid XML Name.\n                // 1. If the key became empty after cleaning, assign a default valid name.\n                // 2. If the key starts with a character not allowed as a NameStartChar\n                //    (e.g., a digit, '.', or '-'), prepend a valid NameStartChar.\n                if (cleanedKey.isEmpty()) {\n                    cleanedKey = \"_invalid_attr\"; // Fallback for completely invalid or empty names\n                } else {\n                    char firstChar = cleanedKey.charAt(0);\n                    // Check if the first character is NOT a valid XML NameStartChar: [a-zA-Z_:]\n                    if (!((firstChar >= 'a' && firstChar <= 'z') ||\n                          (firstChar >= 'A' && firstChar <= 'Z') ||\n                          firstChar == '_' || firstChar == ':')) {\n                        // Prepend a valid NameStartChar to make the key conform to XML rules\n                        cleanedKey = \"_\" + cleanedKey;\n                    }\n                }\n\n                // Set the attribute with the cleaned and validated key\n                el.setAttribute(cleanedKey, value);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}