{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                String currentKey = attribute.getKey();\n                StringBuilder validKeyBuilder = new StringBuilder();\n                boolean firstCharHandled = false; // Flag to indicate if the first character rule has been applied\n\n                for (int i = 0; i < currentKey.length(); i++) {\n                    char c = currentKey.charAt(i);\n\n                    if (!firstCharHandled) {\n                        // Handle the first character of the XML attribute name\n                        // XML attribute names must start with a letter, '_', or ':'.\n                        if (Character.isLetter(c) || c == '_' || c == ':') {\n                            validKeyBuilder.append(c);\n                            firstCharHandled = true;\n                        } else if (Character.isDigit(c) || c == '-' || c == '.') {\n                            // If the original name starts with a digit, hyphen, or dot,\n                            // prepend an underscore to make it a valid XML name start.\n                            validKeyBuilder.append('_');\n                            validKeyBuilder.append(c);\n                            firstCharHandled = true;\n                        }\n                        // If it's any other invalid starting character (e.g., ' ', '\"'), skip it\n                        // and wait for a valid start character.\n                        // If no valid start character is found throughout the string,\n                        // validKeyBuilder will remain empty, and the attribute will be skipped.\n                    } else {\n                        // Handle subsequent characters of the XML attribute name\n                        // They can be letters, digits, '_', ':', '-', '.'\n                        if (Character.isLetterOrDigit(c) || c == '_' || c == ':' || c == '-' || c == '.') {\n                            validKeyBuilder.append(c);\n                        }\n                        // Otherwise, skip invalid characters\n                    }\n                }\n\n                String finalKey = validKeyBuilder.toString();\n\n                // If after sanitization the key is empty, it means no valid XML name could be formed.\n                // In this case, skip setting the attribute as it's not possible to create a valid one.\n                if (finalKey.isEmpty()) {\n                    continue;\n                }\n\n                // Set the attribute with the sanitized (and now valid) XML name\n                el.setAttribute(finalKey, attribute.getValue());\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}