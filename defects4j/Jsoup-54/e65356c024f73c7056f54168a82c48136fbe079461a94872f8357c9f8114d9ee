{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                String key = attribute.getKey();\n\n                // XML attribute names must follow specific rules defined by the W3C XML specification:\n                // 1. Must start with a Letter, '_', or ':'.\n                // 2. Subsequent characters can be Letters, Digits, '.', '-', '_', or ':'.\n                // 3. Cannot be an empty string.\n\n                // Step 1: Filter out any characters that are never allowed in an XML name.\n                // The regex `[^-a-zA-Z0-9_:.]` matches any character that is NOT a letter (a-zA-Z),\n                // digit (0-9), underscore (_), colon (:), period (.), or hyphen (-).\n                // These are all characters allowed *somewhere* in an XML name (subsequent chars for digits/./-).\n                String cleanedKey = key.replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n\n                // Step 2: Ensure the key is not empty and starts with a valid XML name character.\n                if (cleanedKey.isEmpty()) {\n                    // If, after cleaning, the key becomes empty (e.g., original key was \"\" or only invalid chars like \"?!\"),\n                    // it's not a valid XML name. Prepend with '_' to make it a valid, non-empty XML name.\n                    cleanedKey = \"_\";\n                } else {\n                    char firstChar = cleanedKey.charAt(0);\n                    // Check if the first character is a valid XML name start character.\n                    // Valid start characters are letters (a-zA-Z), underscore ('_'), or colon (':').\n                    if (!Character.isLetter(firstChar) && firstChar != '_' && firstChar != ':') {\n                        // If the first character is not valid (e.g., a digit '1', a hyphen '-', or a period '.'),\n                        // prepend with '_' to make the entire name valid.\n                        cleanedKey = \"_\" + cleanedKey;\n                    }\n                }\n                \n                // Set the attribute on the W3C DOM Element with the sanitized key and its value.\n                // This ensures that the attribute name conforms to XML naming conventions, preventing DOMException.\n                el.setAttribute(cleanedKey, attribute.getValue());\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}