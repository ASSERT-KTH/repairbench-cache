{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                String key = attribute.getKey();\n\n                // 1. Clean the attribute key by removing characters that are not valid XML NameChars.\n                // The regex `[^-a-zA-Z0-9_:.]` matches any character that is NOT a hyphen,\n                // a letter (a-z, A-Z), a digit (0-9), an underscore (_), a colon (:), or a dot (.).\n                // These are generally the allowed characters for XML NameChar (excluding extended unicode).\n                String cleanedKey = key.replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n\n                // 2. If the cleaned key is empty, it means the original key consisted solely of invalid characters.\n                // In this case, we cannot form a valid XML attribute name, so we skip this attribute.\n                if (cleanedKey.isEmpty()) {\n                    continue;\n                }\n\n                // 3. Ensure the first character of the cleaned key is a valid XML NameStartChar.\n                // According to XML 1.0 (and common simplified rules), a NameStartChar must be a letter,\n                // an underscore (_), or a colon (:). It cannot be a digit, hyphen, or dot.\n                char firstChar = cleanedKey.charAt(0);\n                if (!Character.isLetter(firstChar) && firstChar != '_' && firstChar != ':') {\n                    // If the first character is not a valid NameStartChar (e.g., '1', '-', '.'),\n                    // prepend a valid NameStartChar (like '_') to make it valid.\n                    cleanedKey = \"_\" + cleanedKey;\n                }\n\n                el.setAttribute(cleanedKey, attribute.getValue());\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}