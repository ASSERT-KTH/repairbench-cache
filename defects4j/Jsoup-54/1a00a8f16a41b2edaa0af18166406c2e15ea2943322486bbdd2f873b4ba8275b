{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                String key = attribute.getKey();\n\n                // 1. Remove characters not allowed in XML attribute names (XML NameChar production).\n                //    Allowed NameChar in basic XML: letters, digits, '_', '-', '.', ':'\n                //    This regex keeps only these characters, effectively removing any illegal characters\n                //    like quotes, spaces, etc., that might appear in a Jsoup-parsed attribute key.\n                String sanitizedKey = key.replaceAll(\"[^a-zA-Z0-9_\\\\-.:]\", \"\");\n\n                // 2. If the key becomes empty after sanitization, it's invalid for XML. Skip this attribute.\n                //    An empty string is not a valid XML attribute name, and attempting to set it will throw DOMException.\n                if (sanitizedKey.isEmpty()) {\n                    continue;\n                }\n\n                // 3. Ensure the key starts with a valid XML NameStartChar production.\n                //    XML NameStartChar in basic XML: letters, '_', ':' (and some unicode ranges).\n                //    If the first character of the sanitized key is not a valid NameStartChar\n                //    (e.g., it's a digit, hyphen, or dot), prepend an underscore to make it valid.\n                char firstChar = sanitizedKey.charAt(0);\n                if (!((firstChar >= 'a' && firstChar <= 'z') ||\n                      (firstChar >= 'A' && firstChar <= 'Z') ||\n                      firstChar == '_' ||\n                      firstChar == ':')) {\n                    sanitizedKey = \"_\" + sanitizedKey;\n                }\n                \n                // Set the attribute with the sanitized and validated key.\n                // If the key is still invalid after these steps (e.g., extremely unusual cases or\n                // more complex XML validity rules not covered by basic sanitization),\n                // the DOMException might still occur, but this covers common scenarios.\n                el.setAttribute(sanitizedKey, attribute.getValue());\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}