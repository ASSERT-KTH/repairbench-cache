{
    "generation": "private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n    for (Attribute attribute : source.attributes()) {\n        String key = attribute.getKey();\n        // Valid XML attribute names must match: ^[a-zA-Z_:][\\-a-zA-Z0-9_:.]\n        // Replace invalid characters and ensure the name starts correctly\n        StringBuilder sanitizedKey = new StringBuilder();\n        boolean firstChar = true;\n        for (int i = 0; i < key.length(); i++) {\n            char c = key.charAt(i);\n            if (firstChar) {\n                // First character must be a letter, underscore, or colon\n                if (isValidStartupChar(c)) {\n                    sanitizedKey.append(c);\n                    firstChar = false;\n                }\n            } else {\n                // Subsequent characters can be more permissive\n                if (isValidChar(c)) {\n                    sanitizedKey.append(c);\n                }\n            }\n        }\n        // If the entire key was invalid, we'll skip it rather than create an empty attribute name\n        if (sanitizedKey.length() > 0) {\n            el.setAttribute(sanitizedKey.toString(), attribute.getValue());\n        }\n    }\n}\n\nprivate boolean isValidStartupChar(char c) {\n    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||\n           c == '_' || c == ':' || Character.isLetter(c);\n}\n\nprivate boolean isValidChar(char c) {\n    return isValidStartupChar(c) || (c >= '0' && c <= '9') ||\n           c == '-' || c == '.';\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}