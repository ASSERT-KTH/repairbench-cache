{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                String key = attribute.getKey();\n\n                // XML attribute names must conform to XML 1.0 Name production rules.\n                // A Name must start with a NameStartChar (letter, '_', or ':')\n                // and subsequent characters can be NameChar (NameStartChar, digit, '-', '.', or specific Unicode characters).\n                // The provided regex `[^-a-zA-Z0-9_:.]` was intended to remove invalid characters,\n                // but it doesn't handle the first character rule or cases where the resulting string is empty.\n\n                // Step 1: Filter out characters that are not allowed anywhere in an XML Name (ASCII subset).\n                // This regex `[^a-zA-Z0-9_:\\\\.\\\\-]` means \"any character NOT a letter, digit, underscore, colon, dot, or hyphen\".\n                // These are the characters generally allowed in subsequent parts of an XML name.\n                String filteredKey = key.replaceAll(\"[^a-zA-Z0-9_:\\\\.\\\\-]\", \"\");\n\n                // Step 2: If the filtered key is empty after removal of invalid characters, it cannot form a valid XML name.\n                // In such cases (e.g., original key was just '\"'), skip the attribute to prevent DOMException.\n                if (filteredKey.isEmpty()) {\n                    continue;\n                }\n\n                // Step 3: Ensure the first character of the key is a valid XML NameStartChar.\n                // A valid NameStartChar (for ASCII) is a letter (a-z, A-Z), underscore '_', or colon ':'.\n                String validKey;\n                char firstChar = filteredKey.charAt(0);\n\n                if (!(Character.isLetter(firstChar) || firstChar == '_' || firstChar == ':')) {\n                    // If the first character is invalid (e.g., a digit, hyphen, or dot), prepend an underscore.\n                    // This ensures the resulting key starts with a valid XML NameStartChar.\n                    validKey = \"_\" + filteredKey;\n                } else {\n                    // If the first character is already valid, use the filtered key as is.\n                    validKey = filteredKey;\n                }\n\n                // Step 4: Set the attribute with the validated key and its original value.\n                el.setAttribute(validKey, attribute.getValue());\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}