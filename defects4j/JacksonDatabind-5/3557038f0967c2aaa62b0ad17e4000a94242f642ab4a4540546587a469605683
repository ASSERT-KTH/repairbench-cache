{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    // collect the mix\u2010in class plus its supertypes up to (but not including) the\n    // configured targetClass\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n\n    // To avoid a no-annotation supertype from wiping out a more specific\n    // mix\u2010in, process all supertypes first, then the mix\u2010in itself:\n    for (int i = parents.size() - 1; i >= 0; --i) {\n        Class<?> mixin = parents.get(i);\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            if (am != null) {\n                // existing (\"real\") method on target: merge in any mix\u2010in annotations\n                _addMixUnders(m, am);\n            } else {\n                // new method coming from a (possibly super) mix\u2010in: queue for addition\n                mixIns.add(_constructMethod(m));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}