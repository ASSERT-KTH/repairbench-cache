{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        // [databind#515]: Also need to include interfaces, starting with 2.9\n        // Also, occasionally targetClass is null, esp. when dealing with modules/context\n        // (see [databind#2796])\n        // And target need not be super-type of mixin, may be unrelated (happens\n        // when resolving mix-ins for props discovered via fields)\n        if (targetClass != null) {\n            ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        }\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n                /* Do we already have a method to augment (from sub-class\n                 * that will mask this mixIn)? If so, add if visible\n                 * without masking (no such annotation)\n                 */\n                if (am != null) {\n                    _addMixUnders(m, am);\n                    /* Otherwise will have precedence, but must wait\n                     * until we find the real method (mixIn methods are\n                     * just placeholder, can't be called)\n                     */\n                } else {\n                    // [Issue#515]: Or, maybe the mixin method is a new property,\n                    // not augmenting existing method? If so, need to add\n                    // using the main method map, not mixin-only map.\n                    // Need to use 'methods', not 'mixIns'\n                    methods.add(_constructMethod(m));\n                    // Original code (buggy):\n                    // mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}