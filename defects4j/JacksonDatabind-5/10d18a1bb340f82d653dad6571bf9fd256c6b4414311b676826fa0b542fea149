{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns) \n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            if (am != null) {\n                // Merge mix-in annotations into the existing target method\n                _addMixUnders(m, am);\n            } else {\n                // For multi-level mixin merging, first see if we already encountered one\n                AnnotatedMethod mixinMethod = mixIns.find(m);\n                if (mixinMethod == null) {\n                    mixIns.add(_constructMethod(m));\n                } else {\n                    // Merge the new mixin info into the existing placeholder method\n                    _addMixUnders(m, mixinMethod);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}