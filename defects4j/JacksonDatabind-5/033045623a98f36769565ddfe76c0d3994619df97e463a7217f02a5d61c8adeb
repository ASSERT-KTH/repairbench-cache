{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            // first see if we already have a real method mapping\n            AnnotatedMethod am = methods.find(m);\n            if (am != null) {\n                // merge mix-in annotations into it\n                _addMixUnders(m, am);\n            } else {\n                // no direct mapping yet, try to find the actual method on the target\n                Method real = ClassUtil.findMethod(targetClass, m.getName(), m.getParameterTypes());\n                if (real != null) {\n                    // found a real method: add or reuse in methods, then merge\n                    AnnotatedMethod realAm = methods.find(real);\n                    if (realAm == null) {\n                        realAm = _constructMethod(real);\n                        methods.add(realAm);\n                    }\n                    _addMixUnders(m, realAm);\n                } else {\n                    // no real method: multi\u2010level mix\u2010in, merge into existing placeholder if present\n                    AnnotatedMethod placeholder = mixIns.find(m);\n                    if (placeholder != null) {\n                        _addMixUnders(m, placeholder);\n                    } else {\n                        mixIns.add(_constructMethod(m));\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}