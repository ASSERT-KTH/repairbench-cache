{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                // [Issue#515]: Need to create AnnotatedMethod for mixin method itself\n                // to correctly carry annotations for overriding.\n                AnnotatedMethod candidate = _constructMethod(m);\n                if (candidate == null) { // Should not happen but for safety\n                    continue;\n                }\n\n                AnnotatedMethod am = methods.find(m);\n                /* Do we already have a method to augment (from sub-class\n                 * that will mask this mixIn)? If so, add if visible\n                 * without masking (no such annotation)\n                 */\n                if (am != null) {\n                    // 1. Merge metadata (like access) from mixin method 'm' into existing method 'am'\n                    // This involves setting accessible flags and potentially adding some annotations\n                    // based on AnnotationIntrospector's merging rules.\n                    _addMixUnders(m, am);\n\n                    // 2. Crucially, replace the annotation set of 'am' with 'candidate's annotations.\n                    // This ensures that annotations directly defined on the current mixin method 'm'\n                    // take precedence over any merged annotations from super-mixins or previous sources.\n                    am.setAnnotations(candidate.getAnnotations());\n                } else {\n                    // If target class does not have this method, add the mixin method as new.\n                    // Only add if not already present from a super-mixin (precedence).\n                    // Well, or, as per [Issue#515], multi-level merge within mixins...\n                    if (mixIns.find(m) == null) {\n                        mixIns.add(candidate);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}