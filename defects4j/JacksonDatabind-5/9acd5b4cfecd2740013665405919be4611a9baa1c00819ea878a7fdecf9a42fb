{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    // collect mix\u2010in class plus its super\u2010types\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    // process in reverse so that more general mix-ins are applied first,\n    // then more specific ones override them\n    for (int i = parents.size() - 1; i >= 0; --i) {\n        Class<?> mixin = parents.get(i);\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            if (am != null) {\n                // real target method found: merge mix-in annotations into it\n                _addMixUnders(m, am);\n            } else {\n                // no target yet: add or merge into a placeholder for later\n                AnnotatedMethod pm = mixIns.find(m);\n                if (pm != null) {\n                    _addMixUnders(m, pm);\n                } else {\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}