{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n                                    Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        // first, collect mix-in class and its supertypes (up to targetClass)\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                // do we already have an entry in our methods map?\n                AnnotatedMethod am = methods.find(m);\n                if (am != null) {\n                    // yes: just merge annotations from mix-in onto it\n                    _addMixUnders(m, am);\n                } else {\n                    /*\n                     * No entry yet: but mix-in may be annotating a real\n                     * method on the targetClass that was not auto-detected.\n                     * So try to locate that real method by signature;\n                     * if found, register+merge into our methods map.\n                     */\n                    Method real = null;\n                    try {\n                        real = targetClass.getMethod(m.getName(), m.getParameterTypes());\n                    } catch (Exception e) { }\n                    if (real != null) {\n                        AnnotatedMethod realAm = methods.find(real);\n                        if (realAm == null) {\n                            realAm = _constructMethod(real);\n                            methods.add(realAm);\n                        }\n                        _addMixUnders(m, realAm);\n                    } else {\n                        /*\n                         * No real method in target: treat this as a\n                         * mix-in-only (placeholder) for multi-level merges\n                         */\n                        mixIns.add(_constructMethod(m));\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}