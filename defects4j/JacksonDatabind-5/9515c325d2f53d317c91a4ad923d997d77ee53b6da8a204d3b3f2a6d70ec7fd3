{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n\n                // As per [Issue#515], we need to ensure that mix-in methods\n                // for interfaces are also included, otherwise it's easy to miss annotations\n                // for concrete implementation.\n                // Previously, mixin methods were ONLY added to 'mixIns' if 'am' was null.\n                // Now, they are always added to 'mixIns', regardless of whether a matching\n                // method exists in 'methods' (targetClass).\n                mixIns.add(_constructMethod(m));\n\n                /* If we already have a method to augment (from sub-class\n                 * that will mask this mixIn, or target class itself),\n                 * apply mix-in annotations on top of it.\n                 */\n                if (am != null) {\n                    _addMixUnders(m, am);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}