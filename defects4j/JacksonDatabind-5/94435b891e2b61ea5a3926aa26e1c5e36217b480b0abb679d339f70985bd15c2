{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    // The \"parents\" list should be initialized as empty and ONLY populated by findSuperTypes.\n    // ClassUtil.findSuperTypes will add mixInCls as well as its super types up to (but not including) targetClass.\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    parents.add(mixInCls); // Add mixInCls LAST for proper override precedence\n\n    // Iterate in reverse order (from least specific to most specific - so mixInCls comes last)\n    for (int i = parents.size() - 1; i >= 0; --i) {\n        Class<?> mixin = parents.get(i);\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            if (am != null) {\n                _addMixUnders(m, am);\n            } else {\n                mixIns.add(_constructMethod(m));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}