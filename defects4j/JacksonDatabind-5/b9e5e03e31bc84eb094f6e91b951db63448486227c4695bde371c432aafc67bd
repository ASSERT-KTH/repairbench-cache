{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        // Find supertypes of the mix-in class itself, up to Object (or 'targetClass' which is often Object)\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n                /* Do we already have a method to augment (from sub-class\n                 * that will mask this mixIn)? If so, add annotations from mixin\n                 */\n                if (am != null) {\n                    _addMixUnders(m, am);\n                /* Otherwise, we may be adding a new method from mixin.\n                 * But note: we can NOT call it, it's just annotation placeholder.\n                 * And more importantly, we should NOT add it if we already\n                 * have a more specific definition (i.e. method from sub-class)\n                 * -- typically checked by caller by not calling this method if that's\n                 * the case.\n                 *\n                 * But with [Issue#515], there's possibility of multiple levels\n                 * of mix-ins; so we may need to add method definition from mix-in\n                 * that does not exist in target class.\n                 */\n                } else {\n                    // Add the mix-in method itself (as annotation placeholder)\n                    // to the main method map, not the map passed as 'mixIns'\n                    // (which, based on caller context, might be the ignored method map)\n                    methods.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}