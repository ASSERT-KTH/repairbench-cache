{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        // Find supertypes (classes, interfaces) of the mixin class, up to (but not including) targetClass.\n        // The ordering should be relevant; subclass before superclass.\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                // Check if the method already exists in the methods collected from the target class hierarchy\n                AnnotatedMethod am = methods.find(m);\n                /* If a corresponding method exists in the target class hierarchy,\n                 * we augment the existing AnnotatedMethod ('am') with annotations\n                 * from the mixin method ('m'). Precedence rules might apply within _addMixUnders.\n                 */\n                if (am != null) {\n                    _addMixUnders(m, am);\n                /* Otherwise (method 'm' exists in mixin hierarchy but not in target hierarchy yet),\n                 * it's a method potentially introduced purely by the mixin.\n                 * We add it to the separate 'mixIns' map.\n                 * As per [databind#515], handle multi-level mixins by checking\n                 * if a definition for this method signature already exists in 'mixIns'\n                 * (presumably added from a more specific sub-mixin). If it exists, we skip;\n                 * otherwise, we add the current one. This respects mixin inheritance precedence.\n                 */\n                } else if (mixIns.find(m) == null) {\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}