{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n\n        // Process parent classes first (superclasses before subclasses)\n        Collections.reverse(parents);\n\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n                /* Do we already have a method to augment (from sub-class\n                 * that will mask this mixIn)? If so, add if visible\n                 * without masking (no such annotation)\n                 */\n                if (am != null) {\n                    _addMixUnders(m, am);\n                } else {\n                    // Check if we already have this mixin method (from different mixin)\n                    // or its parent class version\n                    boolean alreadyExists = false;\n                    for (AnnotatedMethod existing : mixIns) {\n                        if (existing.getAnnotated().getName().equals(m.getName())\n                                && _isOverridden(m, existing.getAnnotated())) {\n                            alreadyExists = true;\n                            break;\n                        }\n                    }\n                    if (!alreadyExists) {\n                        mixIns.add(_constructMethod(m));\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}