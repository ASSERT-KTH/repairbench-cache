{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        // Ok, first: let's see which mix-in methods override methods target class has:\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        // Target class is the implicit \"stop condition\"\n        // Issue #211: may need to add multiple mixins, too.\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n                /* Do we already have a method to augment (from sub-class\n                 * that will mask this mixIn)? If so, add if visible\n                 * without masking (no such annotation)\n                 */\n                if (am != null) {\n                    /* Yes: we'll just augment via annotations then. No need\n                     * to add duplicate method. And we know it's visible\n                     * because method object is same.\n                     */\n                    _addMixUnders(m, am);\n                    \n                /* Otherwise will have precedence, but must wait\n                 * until we find the real method (mixIn methods are\n                 * just placeholder, can't be called)\n                 */\n                } else {\n                    /* We don't have a method yet. But do we have mix-in\n                     * from sub-class? Or, possibly, already added (for multiple mixins)?\n                     */\n                    /* As per [Issue#515], need to consider overriding mixin methods as well\n                     */\n                    AnnotatedMethod old = mixIns.find(m);\n                    if (old != null) {\n                        // TODO: should we verify that we are not losing information?\n                        // Ideally, perhaps we'd merge annotations somehow\n                        // Or maybe verify that signatures are compatible? For now, assume they are\n                        _addMixUnders(m, old);\n                    } else {\n                        mixIns.add(_constructMethod(m));\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}