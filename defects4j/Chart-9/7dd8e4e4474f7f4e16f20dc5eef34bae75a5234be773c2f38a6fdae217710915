{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        // This checks if the conceptual time range itself is valid (start not after end)\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            // 'start' period is not in the series. 'startIndex' is the insertion point,\n            // which is the index of the first item whose period is greater than 'start'.\n            startIndex = -(startIndex + 1);\n        }\n\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {\n            // 'end' period is not in the series. 'endIndex' is the insertion point,\n            // which is the index of the first item whose period is greater than 'end'.\n            // To get the last item whose period is less than or equal to 'end', we subtract 1.\n            endIndex = -(endIndex + 1);\n            endIndex = endIndex - 1;\n        }\n\n        // Determine if the effective range of data items to copy is empty.\n        // This can happen if:\n        // 1. The calculated 'startIndex' is beyond the actual data size (meaning 'start' is after all data items).\n        // 2. The calculated 'endIndex' is less than 0 (meaning 'end' is before all data items).\n        // 3. The calculated 'startIndex' is greater than the calculated 'endIndex'\n        //    (meaning the desired time range does not encompass any existing data items,\n        //     or the \"first\" item in the range is actually after the \"last\" item).\n        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList();\n            return copy;\n        } else {\n            // If the range is valid and contains data, call the internal createCopy method.\n            return createCopy(startIndex, endIndex);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}