{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n\n        // Calculate startIndex: inclusive index of the first item to copy\n        // If 'start' period is found, startIndex is its index.\n        // If 'start' period is NOT found, getIndex returns -(insertionPoint + 1).\n        // So, -(startIndex + 1) gives the insertion point, which is the index\n        // of the first item whose period is >= 'start'. This is the correct\n        // starting index for the copy.\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1);\n        }\n\n        // Calculate endIndex: inclusive index of the last item to copy\n        // If 'end' period is found, endIndex is its index.\n        // If 'end' period is NOT found, getIndex returns -(insertionPoint + 1).\n        // -(endIndex + 1) gives the insertion point (index of first item > 'end').\n        // Subtracting 1 from this gives the index of the last item <= 'end'.\n        // This is the correct ending index for the copy.\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {\n            endIndex = -(endIndex + 1);\n            endIndex = endIndex - 1;\n        }\n\n        // The effective range of data items to copy is [startIndex, endIndex] (inclusive).\n        // If startIndex is greater than endIndex, it means the requested time period\n        // range (start, end) does not contain any actual data items.\n        // In this case, an empty TimeSeries copy should be returned.\n        if (startIndex > endIndex) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList(); // Create an empty data list\n            return copy;\n        }\n        else {\n            // Otherwise, delegate to the overloaded createCopy method with calculated indices.\n            return createCopy(startIndex, endIndex);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}