{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        // This initial check ensures the input periods are ordered correctly.\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n\n        // Determine the actual start index within the data array.\n        // 'startIndex' will be the index of the first item whose period is\n        // greater than or equal to 'start'.\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            // 'start' period is not in the series. 'startIndex' (after this adjustment)\n            // will be the insertion point, i.e., the index of the first item\n            // that is *after* 'start'.\n            startIndex = -(startIndex + 1);\n        }\n\n        // Determine the actual end index within the data array.\n        // 'endIndex' will be the index of the last item whose period is\n        // less than or equal to 'end'.\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {\n            // 'end' period is not in the series. 'endIndex' (after this adjustment)\n            // will be the insertion point, i.e., the index of the first item\n            // that is *after* 'end'. To get the last item to include (which is\n            // less than or equal to 'end'), we need to subtract 1.\n            endIndex = -(endIndex + 1);\n            endIndex = endIndex - 1;\n        }\n\n        // Now, check for an empty range based on the calculated indices relative to\n        // the actual data points.\n        // The range is empty if:\n        // 1. The calculated startIndex is beyond the end of the data array.\n        //    (This means 'start' is after all data items).\n        // 2. The calculated endIndex is before the beginning of the data array.\n        //    (This means 'end' is before all data items).\n        // 3. The effective startIndex is greater than the effective endIndex.\n        //    (This occurs when the period range [start, end] does not overlap\n        //     with any data items, e.g., data is [A, C] and range is [B, B]).\n        if (startIndex > this.data.size() - 1 || endIndex < 0 || startIndex > endIndex) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList(); // Create an empty list\n            return copy;\n        } else {\n            // Otherwise, we have a valid range of indices within the data.\n            // The indices naturally clamp to the beginning/end of the data\n            // if 'start' is before the first item or 'end' is after the last.\n            return createCopy(startIndex, endIndex);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}