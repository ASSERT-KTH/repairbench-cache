{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n\n        // Calculate effective start index\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1); // This is the insertion point for 'start',\n                                            // which is the index of the first item >= 'start'.\n        }\n\n        // Calculate effective end index\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {             // end period is not in original series\n            endIndex = -(endIndex + 1); // This is the insertion point for 'end',\n                                            // which is the index of the first item > 'end'.\n            endIndex = endIndex - 1;    // So, this is the index of the last item <= 'end'.\n        }\n\n        // Determine if the effective range is empty based on calculated indices.\n        // An empty range exists if:\n        // 1. The effective start index is beyond the end of the data.\n        // 2. The effective end index is before the start of the data.\n        // 3. The effective start index is greater than the effective end index\n        //    (meaning the desired 'start' period is after the desired 'end' period\n        //    relative to the actual data points).\n        boolean emptyRange = false;\n        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {\n            emptyRange = true;\n        }\n\n        if (emptyRange) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList(); // Create an empty data list\n            return copy;\n        }\n        else {\n            // Otherwise, copy the data between the determined indices.\n            return createCopy(startIndex, endIndex);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}