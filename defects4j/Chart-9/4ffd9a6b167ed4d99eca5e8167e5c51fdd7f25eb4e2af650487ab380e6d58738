{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n\n        // Calculate startIndex: index of the first item whose period is >= 'start'.\n        // getIndex returns the index if found, or -(insertionPoint + 1) if not found.\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1); // This is the insertion point, i.e.,\n                                            // the index of the first element *after* 'start'.\n                                            // This is the correct lower bound for the copy.\n        }\n\n        // Calculate endIndex: index of the last item whose period is <= 'end'.\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {\n            endIndex = -(endIndex + 1);     // This is the insertion point, i.e.,\n                                            // the index of the first element *after* 'end'.\n            endIndex = endIndex - 1;        // Adjust to be the index of the *last* element\n                                            // *before* 'end'. This is the correct upper bound.\n        }\n\n        // After calculating startIndex and endIndex, we have the effective range\n        // of indices within 'this.data' that fall within [start, end].\n        // If startIndex is beyond the data size, or endIndex is negative,\n        // or startIndex > endIndex, it means the effective range of data items is empty.\n        // In such cases, a new empty TimeSeries should be returned.\n        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList(); // Create an empty data list\n            return copy;\n        } else {\n            // Otherwise, copy the sub-series using the calculated inclusive indices.\n            return createCopy(startIndex, endIndex);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}