{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes one of them or none\n\n    if (decPos > -1) {\n        // there is a decimal point\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        // no decimal point\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    // handle a explicit type qualifier (last char)\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // there is a type qualifier\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null &&\n                    ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException ex1) {\n                        // too big for long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException ex2) {\n                    // ignore\n                }\n                //$FALL-THROUGH$\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException ex3) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException ex4) {\n                    // ignore\n                }\n                //$FALL-THROUGH$\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // no explicit type requested: choose Integer/Long/BigInteger for integral,\n    // or Float/Double/BigDecimal for decimals/exponents\n    if (decPos == -1 && expPos == -1) {\n        // integral\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException ex5) {\n            // ignore\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException ex6) {\n            // ignore\n        }\n        return createBigInteger(str);\n    }\n\n    // decimal or exponent form: now try Float, Double, BigDecimal\n    // determine if the value is all zeros to allow underflow to 0\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    // prepare the exact BigDecimal of the original for precision check\n    final BigDecimal original = createBigDecimal(str);\n\n    // try Float if it represents exactly\n    try {\n        final Float f = createFloat(str);\n        if (!f.isInfinite() && (f.floatValue() != 0.0F || allZeros)) {\n            BigDecimal bd = new BigDecimal(f.toString());\n            if (bd.compareTo(original) == 0) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException ex7) {\n        // ignore\n    }\n\n    // try Double if it represents exactly\n    try {\n        final Double d = createDouble(str);\n        if (!d.isInfinite() && (d.doubleValue() != 0.0D || allZeros)) {\n            BigDecimal bd = new BigDecimal(d.toString());\n            if (bd.compareTo(original) == 0) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException ex8) {\n        // ignore\n    }\n\n    // fallback to BigDecimal\n    return original;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}