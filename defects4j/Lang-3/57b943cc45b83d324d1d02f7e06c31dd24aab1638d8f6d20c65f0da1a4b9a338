{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Handle hex numbers with prefix\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPosE = str.indexOf('E');\n    final int expPose = str.indexOf('e');\n    final int expPos;\n    if (expPosE > -1 && expPose > -1) {\n        expPos = Math.min(expPosE, expPose);\n    } else {\n        expPos = Math.max(expPosE, expPose);\n    }\n\n    int numDecimals = 0;\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = str.substring(0, str.length() -1 );\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n        switch(lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null && \n                        (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch(NumberFormatException nfe) {\n                        // too big for long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch(NumberFormatException nfe) {\n                    // ignore\n                }\n                // try Double\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch(NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch(NumberFormatException e) {\n                    // ignore\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch(NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch(NumberFormatException e) {\n                    // ignore\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos +1);\n    } else {\n        exp = null;\n    }\n\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(str);\n        } catch(NumberFormatException nfe) {\n            // ignore\n        }\n        try {\n            return createLong(str);\n        } catch(NumberFormatException nfe) {\n            // ignore\n        }\n        return createBigInteger(str);\n    }\n\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    try {\n        Float f = createFloat(str);\n        if (numDecimals <= 7 && !(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n            return f;\n        }\n    } catch(NumberFormatException nfe) {\n        // ignore\n    }\n\n    try {\n        Double d = createDouble(str);\n        if (numDecimals <= 16 && !(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            return d;\n        }\n    } catch(NumberFormatException nfe) {\n        // ignore\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}