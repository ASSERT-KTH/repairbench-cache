{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.StringUtils; // Assuming this import exists\n\n// Class definition added for context, replace with actual NumberUtils class structure if needed.\nclass NumberUtils {\n    // Helper methods assumed to exist in the actual NumberUtils class or its dependencies.\n    // Implementations below are simplified placeholders for context.\n    private static boolean isDigits(final String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private static boolean isEmpty(final String str) { // Helper for isDigits\n        return str == null || str.length() == 0;\n    }\n    private static Float createFloat(String s) { return Float.valueOf(s); }\n    private static Double createDouble(String s) { return Double.valueOf(s); }\n    private static Integer createInteger(String s) { return Integer.decode(s); }\n    private static Long createLong(String s) { return Long.decode(s); }\n    private static BigInteger createBigInteger(String s) {\n        int pfxLen = 0;\n        boolean negative = false;\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        for(final String pfx : hex_prefixes) {\n            if (s.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                negative = pfx.startsWith(\"-\");\n                break;\n            }\n        }\n        if (pfxLen > 0) {\n            String digits = s.substring(pfxLen);\n             try {\n                 BigInteger bi = new BigInteger(digits, 16);\n                 return negative ? bi.negate() : bi;\n             } catch (NumberFormatException nfe) {\n                 // Throw specific message similar to BigInteger constructor\n                 throw new NumberFormatException(\"For input string: \\\"\" + s + \"\\\"\");\n             }\n        }\n        // Integer/Long.decode should have handled octal prefixes for smaller numbers.\n        // If we reach here, it's either decimal or octal too large for Long.\n        // BigInteger constructor handles decimal and sign. It doesn't handle octal prefix '0'.\n        // However, if Long.decode failed, it was likely due to size, not the octal format itself.\n        // So, BigInteger(String) should generally work for valid large integers (decimal or octal).\n        return new BigInteger(s);\n    }\n    private static BigDecimal createBigDecimal(String s) { return new BigDecimal(s); }\n\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n     *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Handle hex numbers explicity first as BigInteger/BigDecimal don't parse prefixes\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for (final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) {\n            // Try Integer -> Long -> BigInteger for hex numbers\n             try {\n                 return createInteger(str); // Delegates to Integer.decode\n             } catch (final NumberFormatException nfe) { /* Ignore */ }\n             try {\n                 return createLong(str); // Delegates to Long.decode\n             } catch (final NumberFormatException nfe) { /* Ignore */ }\n             // Use createBigInteger helper which handles hex prefixes.\n             return createBigInteger(str);\n        }\n\n        final char lastChar = str.charAt(str.length() - 1);\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Combined check for 'e' or 'E'\n\n        // Identify the numeric part (string excluding type suffix)\n        String numeric;\n        boolean hasSuffix = false;\n        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {\n             numeric = str.substring(0, str.length() - 1);\n             hasSuffix = true;\n        } else {\n             numeric = str;\n             hasSuffix = false;\n        }\n\n        // Handle potential floating point types (have decimal or exponent)\n        if (decPos > -1 || expPos > -1) {\n            boolean trulyZero = false;\n            try {\n                // Use BigDecimal to reliably check if the numeric string represents zero\n                // Use 'numeric' part which excludes suffix, as BigDecimal constructor fails on suffixes.\n                trulyZero = new BigDecimal(numeric).signum() == 0;\n            } catch (final NumberFormatException e) {\n                // Ignore. If numeric is invalid, subsequent parsing will fail anyway.\n            }\n\n            if (hasSuffix) {\n                switch (lastChar) {\n                    case 'f':\n                    case 'F':\n                        try {\n                            final Float f = createFloat(numeric);\n                            // Check suitability: not infinite, and not zero unless original was zero.\n                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !trulyZero))) {\n                                return f;\n                            }\n                        } catch (final NumberFormatException nfe) { /* Ignore */ }\n                        // Fall through to Double/BigDecimal if Float is unsuitable\n                        // $FALL-THROUGH$ intentional\n                    case 'd':\n                    case 'D':\n                        try {\n                            final Double d = createDouble(numeric);\n                            // Check suitability: not infinite, and not zero unless original was zero.\n                            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !trulyZero))) {\n                                return d;\n                            }\n                        } catch (final NumberFormatException nfe) { /* Ignore */ }\n                        // Fall through to BigDecimal if Double is unsuitable\n                        // $FALL-THROUGH$ intentional\n                        try {\n                             return createBigDecimal(numeric);\n                         } catch (final NumberFormatException e) {\n                             // If BigDecimal fails, throw exception based on original string\n                             throw new NumberFormatException(str + \" is not a valid number.\");\n                         }\n                    case 'l':\n                    case 'L':\n                        // Invalid suffix 'L' for a number with decimal point or exponent.\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    default:\n                        // Any other letter suffix is invalid.\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            } else {\n                // No suffix, but has decimal point or exponent: Try Float -> Double -> BigDecimal\n                 try {\n                     final Float f = createFloat(str); // Use original string 'str'\n                     // Check suitability (using 'trulyZero' check based on numeric part)\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !trulyZero))) {\n                         return f;\n                     }\n                 } catch (final NumberFormatException nfe) { /* Ignore */ }\n                 try {\n                     final Double d = createDouble(str); // Use original string 'str'\n                     // Check suitability (using 'trulyZero' check based on numeric part)\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !trulyZero))) {\n                         return d;\n                     }\n                 } catch (final NumberFormatException nfe) { /* Ignore */ }\n\n                 return createBigDecimal(str); // Use original string 'str'\n            }\n        } else {\n             // No decimal point, no exponent: Must be Integer/Long/BigInteger (or invalid)\n\n            if (hasSuffix) {\n                if (lastChar == 'l' || lastChar == 'L') {\n                    // numeric = str.substring(0, str.length() - 1); // already calculated\n                    // Basic format check for integer string\n                    if (numeric.isEmpty() || (numeric.charAt(0) == '-' && numeric.length() == 1) || !isDigits(numeric.startsWith(\"-\") ? numeric.substring(1) : numeric)) {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                    // Try Long -> BigInteger for 'L' suffix\n                     try {\n                         return createLong(numeric);\n                     } catch (final NumberFormatException nfe) { /* Ignore, try BigInteger */ }\n                     return createBigInteger(numeric); // Use helper that handles sign correctly\n                 }\n                 // Any other suffix (f, F, d, D) without decimal/exponent is invalid.\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n\n            } else {\n                // No suffix, no decimal, no exponent: Try Integer -> Long -> BigInteger\n                // Rely on decode() to handle octal/hex prefixes for Integer/Long.\n                 try {\n                     return createInteger(str);\n                 } catch (final NumberFormatException nfe) { /* Ignore */ }\n                 try {\n                     return createLong(str);\n                 } catch (final NumberFormatException nfe) { /* Ignore */ }\n                 // BigInteger constructor doesn't handle prefixes, but hex was checked earlier.\n                 // createBigInteger helper should handle potential large octal/decimal correctly.\n                 return createBigInteger(str);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}