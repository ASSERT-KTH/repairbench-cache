{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Handle hex prefixes\n    final String[] hexPrefixes = { \"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\" };\n    int pfxLen = 0;\n    for (final String pfx : hexPrefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) {\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) {\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) {\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // one of these will be >=0 or both -1\n    if (decPos > -1) {\n        // there's a decimal point\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        // no decimal point\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    // Suffix handling (L, l, F, f, D, d)\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // split off the type qualifier\n        String expSub = null;\n        if (expPos > -1 && expPos < str.length() - 1) {\n            expSub = str.substring(expPos + 1, str.length() - 1);\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(expSub);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                // long or BigInteger\n                if (dec == null && expSub == null\n                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1)))\n                        || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // too big for long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                // try float, but only if no precision lost\n                try {\n                    final Float f = createFloat(numeric);\n                    if (!f.isInfinite()) {\n                        final BigDecimal bdOrig = createBigDecimal(numeric);\n                        final BigDecimal bdFloat = new BigDecimal(f.toString());\n                        if (bdOrig.compareTo(bdFloat) == 0) {\n                            return f;\n                        }\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                // fall through to double\n            case 'd':\n            case 'D':\n                // try double, but only if no precision lost\n                try {\n                    final Double d = createDouble(numeric);\n                    if (!d.isInfinite()) {\n                        final BigDecimal bdOrig = createBigDecimal(numeric);\n                        final BigDecimal bdDouble = new BigDecimal(d.toString());\n                        if (bdOrig.compareTo(bdDouble) == 0) {\n                            return d;\n                        }\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                // fallback to BigDecimal\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                // if all else fails\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    // No suffix: re-extract exp if present\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    // Integral numbers?\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException nfe) {\n            // ignore\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException nfe) {\n            // ignore\n        }\n        return createBigInteger(str);\n    }\n    // Decimal numbers: try float/double only if no precision lost, otherwise BigDecimal\n    try {\n        final Float f = createFloat(str);\n        if (!f.isInfinite()) {\n            final BigDecimal bdOrig = createBigDecimal(str);\n            final BigDecimal bdFloat = new BigDecimal(f.toString());\n            if (bdOrig.compareTo(bdFloat) == 0) {\n                return f;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore\n    }\n    try {\n        final Double d = createDouble(str);\n        if (!d.isInfinite()) {\n            final BigDecimal bdOrig = createBigDecimal(str);\n            final BigDecimal bdDouble = new BigDecimal(d.toString());\n            if (bdOrig.compareTo(bdDouble) == 0) {\n                return d;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}