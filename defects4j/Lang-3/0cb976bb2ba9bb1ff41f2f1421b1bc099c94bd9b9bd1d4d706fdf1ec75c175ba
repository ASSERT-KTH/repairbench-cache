{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) {\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) {\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) {\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') != -1 ? str.indexOf('e') : str.indexOf('E');\n    expPos = expPos != -1 ? expPos + 1 : -1;\n\n    int numDecimals = 0;\n    if (decPos > -1) {\n        if (expPos > -1 && expPos > decPos && expPos < str.length()) {\n            dec = str.substring(decPos + 1, expPos);\n            mant = str.substring(0, decPos);\n        } else if (expPos == -1) {\n            dec = str.substring(decPos + 1);\n            mant = str.substring(0, decPos);\n        } else {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1 && expPos < str.length()) {\n            mant = str.substring(0, expPos - 1);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        boolean allZeros = mant.isEmpty() || isAllZeros(mant);\n        if (expPos != -1 && expPos + 1 <= str.length() - 1) {\n            String expPart = str.substring(expPos + 1, str.length() - 1);\n            allZeros = allZeros && isAllZeros(expPart);\n            exp = expPart;\n        } else {\n            exp = null;\n        }\n\n        String numeric;\n\n        if (lastChar == 'l' || lastChar == 'L') {\n            numeric = str.substring(0, str.length() - 1);\n            if (dec == null && exp == null && isInteger(numeric)) {\n                try {\n                    return createLong(numeric);\n                } catch (NumberFormatException nfe) {\n                    return createBigInteger(numeric);\n                }\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        } else if (lastChar == 'f' || lastChar == 'F') {\n            numeric = str.substring(0, str.length() - 1);\n            try {\n                Float f = createFloat(numeric);\n                if (!(f.isInfinite() || (f == 0.0f && allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // fall through\n            }\n        } else if (lastChar == 'd' || lastChar == 'D') {\n            String numbers = str.substring(0, str.length() - 1);\n            boolean tryDouble = true;\n            try {\n                Double d = createDouble(numbers);\n                if (!(d.isInfinite() || (d == 0.0d && allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException ex) {\n                tryDouble = false;\n            }\n            if (tryDouble) {\n                // already handled\n            } else {\n                return createBigDecimal(numbers);\n            }\n        } else {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    boolean allZeros = isAllZeros(mant);\n    if (exp != null) {\n        allZeros = allZeros && isAllZeros(exp);\n    }\n\n    // Handle numbers without exponents or type specifiers\n    if (dec != null || exp != null) {\n        try {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f == 0.0f && allZeros)) && !isPrecisionLoss(f, str)) {\n                return f;\n            }\n        } catch (NumberFormatException ex) {\n            // Ignored, proceed to higher precision\n        }\n        try {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d == 0.0d && allZeros)) && !isPrecisionLoss(d, str)) {\n                return d;\n            }\n        } catch (NumberFormatException ex) {\n            // Ignored, proceed to BigDecimal\n        }\n        return createBigDecimal(str);\n    } else {\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException ex1) {\n            try {\n                return createLong(str);\n            } catch (NumberFormatException ex2) {\n                return createBigInteger(str);\n            }\n        }\n    }\n}\n\nprivate static boolean isPrecisionLoss(Number number, String str) {\n    if (number instanceof Float) {\n        return ((Float) number).floatValue() != Float.valueOf(str).floatValue();\n    }\n    if (number instanceof Double) {\n        return ((Double) number).doubleValue() != Double.valueOf(str).doubleValue();\n    }\n    return false;\n}\n\nprivate static boolean isAllZeros(String str) {\n    if (str == null || \"0\".equals(str)) {\n        return true;\n    }\n    return str.matches(\"[-+]?0+(\\\\.?0+)?([eE][-+]?0+)?\");\n}\n\nprivate static boolean isInteger(String str) {\n    return str.matches(\"[-+]?\\\\d+\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}