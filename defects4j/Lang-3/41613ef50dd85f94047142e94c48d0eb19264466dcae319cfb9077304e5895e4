{
    "generation": "    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16) { // too many for Long\n                return createBigInteger(str);\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = Math.max(str.indexOf('e'), str.indexOf('E')); // get the position of e or E\n\n        // if expPos is -1, it means neither e nor E was found, so +1 makes it 0, which is safe\n        final int expPosAdjusted = expPos == -1 ? -1 : expPos + 1;\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n            if (expPosAdjusted > -1) { // there is an exponent\n                if (expPosAdjusted < decPos) { // exponent appears before the decimal point (invalid)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                if (decPos < expPosAdjusted) {\n                    dec = str.substring(decPos + 1, expPosAdjusted - 1); // -1 because expPos is after 'e' or 'E'\n                } else {\n                    dec = \"\";\n                }\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPosAdjusted > -1) {\n                if (expPosAdjusted > 0) { // there's content before the exponent\n                    mant = str.substring(0, expPosAdjusted - 1);\n                } else {\n                    mant = \"\"; // shouldn't happen since we check expPos > -1\n                }\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n\n        // Check for exponent part if present\n        String expStr = null;\n        if (expPosAdjusted > -1 && expPosAdjusted < str.length()) {\n            expStr = str.substring(expPosAdjusted);\n        }\n\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPosAdjusted > -1 && expPosAdjusted < str.length() - 1) {\n                expStr = str.substring(expPosAdjusted, str.length() - 1);\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(expStr);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && expStr == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    // Fall through to try Double\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n\n        // Parse the exponent if present\n        int exponent = 0;\n        if (expStr != null) {\n            try {\n                exponent = Integer.parseInt(expStr.substring(1)); // skip 'e' or 'E' and optional sign\n                if (expStr.charAt(0) == '-') {\n                    exponent = -exponent;\n                } else if (Character.isDigit(expStr.charAt(0))) {\n                    // no sign, already parsed\n                } else if (expStr.charAt(0) == '+') {\n                    // positive exponent, already parsed\n                }\n            } catch (NumberFormatException e) {\n                throw new NumberFormatException(str + \" is not a valid number (invalid exponent)\");\n            }\n        }\n\n        //User doesn't have a preference on the return type, so let's start\n        //small and go from there...\n        if (dec == null && expStr == null) { // no decimal point and no exponent\n            //Must be an Integer, Long, Biginteger\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            return createBigInteger(str);\n        }\n\n        // Must be a Float, Double, BigDecimal\n        // Determine the best type based on magnitude and precision\n        try {\n            // Try to parse as BigDecimal first to check if it's valid\n            BigDecimal bd = new BigDecimal(str);\n\n            // Now check if it fits in Float range without losing precision\n            if (Math.abs(exponent) <= 38) { // Approximate Float range\n                float fVal = bd.floatValue();\n                BigDecimal fBd = new BigDecimal(Float.toString(fVal));\n                // Compare with some tolerance due to floating point round-off\n                if (bd.subtract(fBd).abs().compareTo(new BigDecimal(1e-6)) <= 0) {\n                    // Check if it would overflow Float\n                    if (!Float.isInfinite(fVal)) {\n                        return Float.valueOf(fVal);\n                    }\n                }\n            }\n\n            // Check if it fits in Double range without losing precision\n            if (Math.abs(exponent) <= 308) { // Approximate Double range\n                double dVal = bd.doubleValue();\n                BigDecimal dBd = new BigDecimal(Double.toString(dVal));\n                // Compare with some tolerance due to floating point round-off\n                if (bd.subtract(dBd).abs().compareTo(new BigDecimal(1e-15)) <= 0) {\n                    // Check if it would overflow Double\n                    if (!Double.isInfinite(dVal)) {\n                        return Double.valueOf(dVal);\n                    }\n                }\n            }\n\n            // If we get here, return as BigDecimal\n            return bd;\n        } catch (final NumberFormatException nfe) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}