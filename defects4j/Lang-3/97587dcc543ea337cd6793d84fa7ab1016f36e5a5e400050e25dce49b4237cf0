{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e');\n    if (expPos == -1) {\n        expPos = str.indexOf('E');\n    }\n    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n    // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) {\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        //If it's too big for a float or the float value = 0 and the string\n                        //has non-zeros in it, then float does not have the precision we want\n                        return f;\n                    }\n\n                } catch (final NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) {\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                }\n                //$FALL-THROUGH$\n                break;\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n                break;\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //Must be an Integer, Long, Biginteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    //Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    // Patch: Ensure we choose correct type based on value and decimal length, to avoid precision loss.\n    // Try Float if number of decimals <= 7 and value (abs, ignoring scientific form) fits in Float range\n    // Try Double if number of decimals <= 16 and value fits in Double range\n    // Otherwise fallback to BigDecimal\n\n    boolean hasExp = (expPos > -1);\n\n    try {\n        Float f = createFloat(str);\n        if (!f.isInfinite() && (f.floatValue() != 0.0F || allZeros)) {\n            // Ensure that the value, when cast back to String, equals the original (within Float's precision)\n            if (!hasExp) {\n                // restrict to 7 decimals or less for Float only when no exponent\n                if (numDecimals <= 7) {\n                    return f;\n                }\n            } else {\n                // for scientific notation, try Float if possible\n                // Use BigDecimal and compare\n                try {\n                    java.math.BigDecimal originalVal = new java.math.BigDecimal(str);\n                    java.math.BigDecimal floatVal = new java.math.BigDecimal(f.toString());\n                    if (originalVal.compareTo(floatVal) == 0) {\n                        return f;\n                    }\n                } catch (Exception e) {\n                    // If parsing fails, skip\n                }\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n    try {\n        Double d = createDouble(str);\n        if (!d.isInfinite() && (d.doubleValue() != 0.0D || allZeros)) {\n            // Only use Double if number of decimals <= 16 when not using scientific\n            if (!hasExp) {\n                if (numDecimals <= 16) {\n                    return d;\n                }\n            } else {\n                // for scientific notation, try Double (compare using BigDecimal)\n                try {\n                    java.math.BigDecimal originalVal = new java.math.BigDecimal(str);\n                    java.math.BigDecimal doubleVal = new java.math.BigDecimal(d.toString());\n                    if (originalVal.compareTo(doubleVal) == 0) {\n                        return d;\n                    }\n                } catch (Exception e) {\n                    // skip\n                }\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}