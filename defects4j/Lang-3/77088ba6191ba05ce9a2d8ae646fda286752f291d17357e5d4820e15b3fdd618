{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length(); // Fixed: was using += which would incorrectly accumulate lengths\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = Math.max(str.indexOf('e'), str.indexOf('E')); // Fixed: correct way to find exponent position\n    if (expPos < 0) {\n        expPos = str.length();\n    }\n\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    // Check for type qualifier at end of string\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) {\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                // Fall through to double if float fails\n            case 'd' :\n            case 'D' :\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                    // ignore the bad number\n                }\n                break;\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // Check for exponent if not already done\n    if (expPos > -1 && expPos < str.length()) {\n        exp = str.substring(expPos + 1);\n    } else {\n        exp = null;\n    }\n\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //Must be an Integer, Long, Biginteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    //Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    // First try Float if the number has reasonable magnitude\n    try {\n        final Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n            // Check if Float has enough precision\n            double d = Double.parseDouble(str);\n            if (Math.abs(d) <= Float.MAX_VALUE) {\n                float floatValue = f.floatValue();\n                double doubleValue = d;\n                // Check if converting Double to Float would lose precision\n                if (Math.abs(doubleValue - floatValue) < 1e-6) {\n                    return f;\n                }\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    // If Float is not suitable, try Double\n    try {\n        final Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            // Check if Double can accurately represent the value\n            boolean useDouble = true;\n            if (exp != null) { // if scientific notation, large values might need BigDecimal\n                int exponent = Integer.parseInt(exp);\n                if (exponent > 308) { // Double.MAX_EXPONENT is 1023, but for practical purposes, values above 308 lose precision\n                    useDouble = false;\n                }\n            }\n            if (useDouble) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    // Fall back to BigDecimal for very large/small values or when precision is needed\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}