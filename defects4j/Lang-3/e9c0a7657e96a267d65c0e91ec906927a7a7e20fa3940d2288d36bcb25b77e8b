{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Handle hex\u2010prefixed values\n    final String[] hexPrefixes = { \"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\" };\n    int pfxLen = 0;\n    for (final String pfx : hexPrefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) {\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too big for a long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) {  // too big for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    // Find decimal point and exponent position\n    final int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e');\n    if (expPos < 0) {\n        expPos = str.indexOf('E');\n    }\n    String mant;\n    String dec;\n    String exp;\n    int numDecimals = 0; // how many digits after the decimal point\n    if (decPos > -1) {\n        // There is a decimal point\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        // No decimal point\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    // Handle explicit type qualifier suffix\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // strip suffix\n        final String numeric = str.substring(0, str.length() - 1);\n        // build exponent part for the 'all zeros?' check\n        final String expPart = (expPos > -1 && expPos < str.length() - 1)\n            ? str.substring(expPos + 1, str.length() - 1)\n            : null;\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(expPart);\n        switch (lastChar) {\n            case 'l': case 'L':\n                // must be integral\n                if (dec == null\n                    && expPos == -1\n                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1)))\n                        || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // too big for a long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f': case 'F':\n                try {\n                    final Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                // fall through to 'double'\n            case 'd': case 'D':\n                try {\n                    final Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                // fall through\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    // No explicit suffix: split out exponent again for the default case\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    // Integral with no decimal or exponent?\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException nfe) {\n            // ignore\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException nfe) {\n            // ignore\n        }\n        return createBigInteger(str);\n    }\n    // Must be Float, Double or BigDecimal\n    final boolean allZerosDefault = isAllZeros(mant) && isAllZeros(exp);\n    // Parse as BigDecimal once to compare precision\n    BigDecimal bigDec;\n    try {\n        bigDec = createBigDecimal(str);\n    } catch (NumberFormatException nfe) {\n        // Should not happen: str has already passed basic format checks\n        throw nfe;\n    }\n    // Try Float if it preserves precision\n    try {\n        final Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZerosDefault))\n            && bigDec.compareTo(new BigDecimal(f.toString())) == 0) {\n            return f;\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore\n    }\n    // Try Double if it preserves precision\n    try {\n        final Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZerosDefault))\n            && bigDec.compareTo(new BigDecimal(d.toString())) == 0) {\n            return d;\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore\n    }\n    // Fallback to BigDecimal\n    return bigDec;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}