{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hexPrefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { \n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { \n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { \n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String numeric = str;\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (lastChar == 'f' || lastChar == 'F') {\n            numeric = str.substring(0, str.length() - 1);\n        } else if (lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L') {\n            // Note: 'l'/'L' is already handled earlier, 'd'/'D' needs to be checked\n            numeric = str.substring(0, str.length() - 1);\n        } else {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    if (numeric.indexOf('.') != -1 || numeric.indexOf('e') != -1 || numeric.indexOf('E') != -1) {\n        try {\n            Float f = createFloat(numeric);\n            if (f != null && !f.isInfinite() && !(f.floatValue() == 0.0f && numeric.replaceFirst(\"0\", \"\").contains(\"0\"))) {\n                return f;\n            }\n        } catch (NumberFormatException ex) {\n            // proceed to check for Double\n        }\n        try {\n            Double d = createDouble(numeric);\n            if (d != null && !d.isInfinite() && !(d.doubleValue() == 0.0d && numeric.replaceFirst(\"0\", \"\").contains(\"0\"))) {\n                return d;\n            }\n        } catch (NumberFormatException ex) {\n            // proceed to create BigDecimal\n        }\n        try {\n            return createBigDecimal(numeric);\n        } catch (NumberFormatException ex) {\n            throw new NumberFormatException(numeric + \" is not a valid number.\");\n        }\n    }\n    try {\n        return createInteger(numeric);\n    } catch (NumberFormatException ex) {\n        try {\n            return createLong(numeric);\n        } catch (NumberFormatException ex1) {\n            try {\n                return createBigInteger(numeric);\n            } catch (NumberFormatException ex2) {\n                throw new NumberFormatException(numeric + \" is not a valid number.\");\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}