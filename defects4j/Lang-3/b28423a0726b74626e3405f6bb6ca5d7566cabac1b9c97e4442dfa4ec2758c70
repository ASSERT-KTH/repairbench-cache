{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPosE = str.indexOf('E');\n    final int expPose = str.indexOf('e');\n    final int expPos = (expPose > -1) ? expPose : expPosE;\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        //If it's too big for a float or the float value = 0 and the string\n                        //has non-zeros in it, then float does not have the precision we want\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            case 'd' :\n            case 'D' :\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n\n        }\n    }\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //Must be an Integer, Long, Biginteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    //Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    // Use to determine precision based on input (for fixes to LANG-693)\n    // Try Float if number of decimals does not exceed float precision\n    // Try Double if number of decimals does not exceed double precision\n\n    // FLT_MAX (float): 3.4028235e+38 (8 digits before .)\n    // DBL_MAX (double): 1.7976931348623157e+308 (17 digits before .)\n    int significantDigits = 0;\n    String digitsOnly = str.replaceAll(\"[^0-9]\", \"\");\n    significantDigits = digitsOnly.length();\n\n    // Only try Float if num decimals <= 7 (up to 7 decimal digits for no precision loss)\n    // Further restrict float use: decimal point must be present, no exponent, number of decimals <= 7, and value parsable as float (not too big)\n    boolean floatCandidate =\n        dec != null && numDecimals <= 7 &&\n        (exp == null) &&\n        (mant.length() <= 8) && // up to 8 digits left of decimal for float without exponent\n        !str.contains(\"e\") && !str.contains(\"E\");\n\n    if (floatCandidate) {\n        try {\n            final Float f = createFloat(str);\n            // Accept only if string->float->string is \"close enough\"\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                // Attempt roundtrip check\n                BigDecimal bdInput = new BigDecimal(str);\n                BigDecimal bdFloat = new BigDecimal(f.toString());\n                if (bdInput.compareTo(bdFloat) == 0) {\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) {\n            // ignore the bad number\n        }\n    }\n    // Only try Double if num decimals <= 16 (up to 16 decimal digits for double)\n    // Restrict double use: decimal point may be present, numDecimals <= 16, and value parsable as double and not infinite\n    boolean doubleCandidate =\n        dec != null && numDecimals <= 16 &&\n        (mant.length() <= 17) && // up to 17 digits left of decimal for double without exponent\n        (exp == null || (exp != null && exp.length() <= 3)); // rough check for exponent range\n\n    // Actually, we should try double for any scientific notation (exp present) if the value is not too large for a double\n    try {\n        final Double d = createDouble(str);\n        // Only accept it as Double if it's finite and if round-tripping doesn't lose precision\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            // Accept if string\u2192double\u2192string does not lose significant precision\n            try {\n                BigDecimal bdInput = new BigDecimal(str);\n                BigDecimal bdDouble = new BigDecimal(d.toString());\n                // Accept as Double only if conversion is exact\n                if (bdInput.compareTo(bdDouble) == 0) {\n                    return d;\n                }\n            } catch (Exception e) {\n                // fallback to just return double if parsing original fails\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    try {\n        return createBigDecimal(str);\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}