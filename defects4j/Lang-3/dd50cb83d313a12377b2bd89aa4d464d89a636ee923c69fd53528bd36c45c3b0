{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e');\n    if (expPos == -1) {\n        expPos = str.indexOf('E');\n    }\n    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n    // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        //If it's too big for a float or the float value = 0 and the string\n                        //has non-zeros in it, then float does not have the precision we want\n                        return f;\n                    }\n\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n\n        }\n    }\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //Must be an Integer, Long, Biginteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    //Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    // --- Start of Fix ---\n    // logic: pick the \"smallest\" FP type that accurately represents the string, otherwise fallback to BigDecimal\n\n    try {\n        Float f = createFloat(str);\n        // To ensure precision: parse to String with float, then compare to original to check for value loss\n        // This is complicated, so check the parsed float still equals the string in value\n        if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n            // Check if value-to-string round-trip equals input (ignoring scientific notation differences)\n            if (f.toString().equals(str) || (f.toString().equals(Float.toString(f.floatValue())) && new BigDecimal(f.toString()).compareTo(new BigDecimal(str)) == 0)) {\n                return f;\n            }\n            // For the classic \"1.23\" case, make sure we represent it precisely as 1.23\n            // To avoid roundtrip errors, check floatValue\n            if (new BigDecimal(f.toString()).compareTo(new BigDecimal(str)) == 0) {\n                return f;\n            }\n            // Additional check: if input as float has no loss, and input fits in float's decimal digits\n            BigDecimal orig = new BigDecimal(str);\n            BigDecimal asFloat = new BigDecimal(Float.toString(f.floatValue()));\n            if (orig.compareTo(asFloat) == 0) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore\n    }\n    try {\n        Double d = createDouble(str);\n        if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n            // Similar validation as for float, but for double\n            if (d.toString().equals(str) || (d.toString().equals(Double.toString(d.doubleValue())) && new BigDecimal(d.toString()).compareTo(new BigDecimal(str)) == 0)) {\n                return d;\n            }\n            if (new BigDecimal(d.toString()).compareTo(new BigDecimal(str)) == 0) {\n                return d;\n            }\n            BigDecimal orig = new BigDecimal(str);\n            BigDecimal asDouble = new BigDecimal(Double.toString(d.doubleValue()));\n            if (orig.compareTo(asDouble) == 0) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore\n    }\n    // Use BigDecimal as fallback for any loss of precision\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}