{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Long</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>Double</code> to <code>BigDecimal</code>.</p>\n     *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16) { // too many for Long\n                return createBigInteger(str);\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos;\n        if (str.indexOf('e') > -1) {\n            expPos = str.indexOf('e');\n        } else {\n            expPos = str.indexOf('E'); // assumes both not present\n        }\n        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        //User doesn't have a preference on the return type, so let's start\n        //small and go from there...\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) { // no decimal point and no exponent\n            //Must be a Integer, Long or BigInteger\n            // Must be an Integer, Long, or BigInteger\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // Too big for an int\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException e) { // NOPMD\n                // Too big for a long\n            }\n            return createBigInteger(str);\n        }\n\n        //Must be a Float, Double, or BigDecimal\n        // Must be a Float, Double, or BigDecimal\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        boolean hasDecimals = false;\n\n        if (dec != null && dec.length() > 0) {\n            hasDecimals = true;\n        }\n        if (!hasDecimals && exp != null) { // no decimals but exponent exists\n            hasDecimals = true; // treate as floating number\n        }\n\n        // if the number has a decimal point or exponent, try Float first\n        if (hasDecimals) {\n            // If there's enough digits after the decimal point or exponent,\n            // we might need BigDecimal\n            int requiredPrecision = 0;\n            if (dec != null) {\n                requiredPrecision += dec.length();\n            }\n            if (exp != null) {\n                try {\n                    final int exponent = Integer.parseInt(exp);\n                    requiredPrecision += exponent;\n                } catch (final NumberFormatException e) {\n                    // ignore - exponent parsing error will be caught elsewhere\n                }\n            }\n\n            // The following logic tries to determine the best fit type:\n            // For Float to prevent precision loss, the number should have <= 8 significant digits\n            // For Double to prevent precision loss, the number should have <= 16 significant digits\n            // But since we don't have exact significant digit count, we'll use some heuristics\n\n            try {\n                // Try Double first, since it's more common and can handle more precision than Float\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    // Check if the double can actually represent the value without precision loss\n                    // A simple heuristic: if the string representation of the double matches the input string's mantissa,\n                    // then it's safe to use Double (ignoring trailing zeros since they're not significant in floating point)\n                    String doubleStr = Double.toString(d.doubleValue());\n                    int doubleDecimalPos = doubleStr.indexOf('.');\n                    int doubleExpPos = doubleStr.indexOf('E');\n                    if (doubleExpPos == -1) {\n                        doubleExpPos = doubleStr.length();\n                    }\n\n                    String doubleMantDec;\n                    if (doubleDecimalPos > -1) {\n                        doubleMantDec = doubleStr.substring(0, doubleExpPos);\n                    } else {\n                        doubleMantDec = doubleStr.substring(0, doubleExpPos);\n                    }\n\n                    // Normalize both strings (remove leading/trailing zeros after decimal, etc.)\n                    // But this is complex to do accurately, so we'll use a simpler check\n                    if (doubleStr.startsWith(str.replaceFirst(\"[fFdD]$\", \"\"))) {\n                        return d;\n                    }\n                }\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n\n            // Try BigDecimal for cases where Double can't represent the value accurately\n            try {\n                return createBigDecimal(str);\n            } catch (final NumberFormatException e) {\n                // This really shouldn't happen, but just in case\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n\n        // If we get here, it's probably an integral value (no decimal point or exponent)\n        // which couldn't be parsed as Integer/Long, so fall back to BigInteger\n        return createBigInteger(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}