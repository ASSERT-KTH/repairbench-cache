{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                // Not enough bits available to satisfy the request.\n                // Return -1 to indicate end of stream or insufficient data.\n                return nextByte;\n            }\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // For LITTLE_ENDIAN, new bytes are added to the higher-order bits of bitsCached.\n                // If adding the new byte would cause bitsCached to exceed 64 bits (Long.SIZE),\n                // we must first discard the oldest bits from the right (LSB side) to maintain\n                // a 64-bit sliding window.\n                if (bitsCachedSize + 8 > Long.SIZE) {\n                    // Calculate how many bits to shift out from the right.\n                    // This effectively removes the oldest bits to make space for the new byte.\n                    bitsCached >>>= (bitsCachedSize + 8 - Long.SIZE);\n                    bitsCachedSize = Long.SIZE - 8; // Adjust bitsCachedSize to reflect the remaining space\n                }\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else { // BIG_ENDIAN\n                // For BIG_ENDIAN, new bytes are added to the lower-order bits of bitsCached,\n                // and existing bits are shifted left. This naturally discards the most\n                // significant (oldest) bits if bitsCached is full, so no explicit pre-shifting\n                // is needed here for bitsCached value itself.\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            bitsCachedSize += 8;\n\n            // Ensure bitsCachedSize never exceeds the actual capacity of bitsCached (64 bits).\n            // Any bits beyond 64 are conceptually discarded.\n            if (bitsCachedSize > Long.SIZE) {\n                bitsCachedSize = Long.SIZE;\n            }\n        }\n\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsOut = (bitsCached & MASKS[count]);\n            bitsCached >>>= count; // Remove the consumed bits from the right\n        } else { // BIG_ENDIAN\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n            bitsCached <<= count; // Remove the consumed bits from the left\n        }\n        bitsCachedSize -= count;\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}