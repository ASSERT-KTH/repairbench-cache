{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // Handle easy case of reading 0 bits\n        if (count == 0) {\n             return 0L;\n        }\n\n        // Keep reading bytes from the input stream until we have enough bits in the cache\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read(); // Reads a byte as int 0-255, or -1 for EOF\n            if (nextByte < 0) {\n                // EOF reached. Break loop and check if we have enough bits below.\n                break;\n            }\n\n            // Add the byte to the cache based on the specified byte order\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // For Little Endian: Add byte bits to the more significant end of the cache.\n                // Conceptually: [new byte] [existing cache]\n                // Achieved by: bitsCached |= (nextByte << current_cache_size)\n                // Potential issue: If bitsCachedSize >= 57, the left shift (nextByte << bitsCachedSize)\n                // might lose the most significant bits of nextByte due to the 64-bit limit of 'long'.\n                // This fix does not address this potential Little Endian issue, focuses on Big Endian.\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else { // BIG_ENDIAN\n                // For Big Endian: Add byte bits to the least significant end, shifting existing bits left.\n                // Conceptually: [existing cache] [new byte]\n                // Achieved by: bitsCached = (bitsCached << 8) | nextByte\n                if (bitsCachedSize <= 56) {\n                    // If the cache size is 56 bits or less, we can safely shift left by 8\n                    // without losing any existing cached bits, and then OR the new byte.\n                    bitsCached <<= 8;\n                    bitsCached |= nextByte;\n                } else {\n                    // Handle cache overflow for Big Endian when bitsCachedSize is 57 to 63.\n                    // Shifting 'bitsCached' left by 8 would lose the most significant (bitsCachedSize - 56) bits.\n                    // To prevent this loss (addressing COMPRESS-363):\n                    int space = 64 - bitsCachedSize; // Calculate available space at the LSB end (1 to 7 bits).\n                    // Shift existing bits left only by the available space, preserving the high bits.\n                    bitsCached <<= space;\n                    // Add the most significant 'space' bits of the new byte into the vacated space.\n                    // Example: if space=5, add bits 7..3 of nextByte via (nextByte >> 3).\n                    bitsCached |= (nextByte >> (8 - space));\n                    // Note: The lower (8 - space) bits of 'nextByte' are deliberately discarded here\n                    // because they cannot fit into the 64-bit 'bitsCached' without causing the loss\n                    // of the most significant bits of the original cache content.\n                }\n            }\n            // Increment the logical size of the cache, reflecting 8 bits consumed from input stream.\n            bitsCachedSize += 8;\n        } // End while loop for filling cache\n\n        // After trying to fill the cache, check if we actually accumulated enough bits.\n        if (bitsCachedSize < count) {\n            return -1; // Not enough bits available, likely due to EOF.\n        }\n\n        // Extract the required 'count' bits from the cache.\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            // Extract 'count' bits from the least significant end.\n            bitsOut = (bitsCached & MASKS[count]);\n            // Remove extracted bits from the cache by shifting right. Use unsigned shift '>>>'.\n            bitsCached >>>= count;\n        } else { // BIG_ENDIAN\n            // Extract 'count' bits from the most significant end of the logical cache sequence.\n            // Shift right based on the logical size to align the desired bits at the LSB end.\n            // Maintain the original signed shift '>>' as it correctly handles sign extension if needed,\n            // although the subsequent mask usually makes >>> and >> equivalent here.\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n            // For Big Endian, removing bits is done implicitly by reducing bitsCachedSize.\n            // The actual bits remain in 'bitsCached' but are ignored by future operations.\n        }\n\n        // Update the cache size by subtracting the number of bits extracted.\n        bitsCachedSize -= count;\n\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}