{
    "generation": "    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        if (count == 0) {\n            return 0L;\n        }\n        // Fill with whole bytes while it is safe (won't overflow) and still under count\n        while (bitsCachedSize < count && bitsCachedSize <= MAXIMUM_CACHE_SIZE - 8) {\n            final int next = in.read();\n            if (next < 0) {\n                return -1L;\n            }\n            final long nextByte = next & 0xFFL;\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                bitsCached |= nextByte << bitsCachedSize;\n            } else {\n                bitsCached = (bitsCached << 8) | nextByte;\n            }\n            bitsCachedSize += 8;\n        }\n        // If still not enough bits, read only the partial byte needed\n        if (bitsCachedSize < count) {\n            final int next = in.read();\n            if (next < 0) {\n                return -1L;\n            }\n            final long nextByte = next & 0xFFL;\n            final int bitsNeeded = count - bitsCachedSize; // between 1 and 7\n            long leftover;\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // take low-order bitsNeeded bits\n                long bitsToAdd = nextByte & MASKS[bitsNeeded];\n                bitsCached |= bitsToAdd << bitsCachedSize;\n                leftover = nextByte >>> bitsNeeded;\n            } else {\n                // take high-order bitsNeeded bits\n                long bitsToAdd = (nextByte >> (8 - bitsNeeded)) & MASKS[bitsNeeded];\n                bitsCached = (bitsCached << bitsNeeded) | bitsToAdd;\n                leftover = nextByte & MASKS[8 - bitsNeeded];\n            }\n            bitsCachedSize += bitsNeeded;\n            // We now have exactly 'count' bits\n            final long bitsOut;\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                bitsOut = bitsCached & MASKS[count];\n            } else {\n                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n            }\n            // consume them\n            bitsCachedSize -= count; // will drop to zero\n            // install leftover bits for next time\n            bitsCached = leftover;\n            return bitsOut;\n        }\n        // Standard extraction without overflow risk\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsOut = bitsCached & MASKS[count];\n            bitsCached >>>= count;\n        } else {\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n            // discard the consumed top bits\n            bitsCached &= MASKS[bitsCachedSize - count];\n        }\n        bitsCachedSize -= count;\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}