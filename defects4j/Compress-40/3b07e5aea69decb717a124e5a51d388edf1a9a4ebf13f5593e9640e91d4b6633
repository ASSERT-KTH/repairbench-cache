{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    \n    // Ensure we have enough bits cached to satisfy the request\n    while (bitsCachedSize < count) {\n        final int nextByte = in.read();\n        if (nextByte < 0) {\n            return -1; // End of stream\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= (nextByte & 0xFFL) << bitsCachedSize;\n        } else {\n            bitsCached = (bitsCached << 8) | (nextByte & 0xFFL);\n        }\n        bitsCachedSize += 8;\n    }\n\n    // Calculate the mask to extract the requested bits\n    final long mask = (1L << count) - 1;\n\n    // Extract the bits based on the byte order\n    long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = bitsCached & mask;\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >>> (bitsCachedSize - count)) & mask;\n    }\n\n    // Update the cached bits and size\n    bitsCachedSize -= count;\n\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}