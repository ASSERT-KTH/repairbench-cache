{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                return nextByte;\n            }\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // If adding the next byte would exceed 64 bits in bitsCached,\n                // shift bitsCached right to discard the oldest (least significant) bits\n                // and make room for the new byte without truncation.\n                if (bitsCachedSize + 8 > 64) {\n                    int bitsToDiscard = (bitsCachedSize + 8) - 64;\n                    bitsCached >>>= bitsToDiscard;\n                    bitsCachedSize -= bitsToDiscard;\n                }\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else { // BIG_ENDIAN\n                // For BIG_ENDIAN, existing bits are shifted left. If bitsCachedSize is 64,\n                // bitsCached <<= 8 will naturally discard the 8 most significant (oldest) bits.\n                // This maintains a 64-bit sliding window automatically.\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            bitsCachedSize += 8;\n            // Ensure bitsCachedSize never exceeds 64, as bitsCached is a long (64-bit)\n            if (bitsCachedSize > 64) {\n                bitsCachedSize = 64;\n            }\n        }\n            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow\n        \n        final long bitsOut;\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                bitsOut = (bitsCached & MASKS[count]);\n                bitsCached >>>= count;\n            } else {\n                // For BIG_ENDIAN, bitsCached already contains the most recent bits.\n                // We need to extract the 'count' most significant bits from bitsCached.\n                // The current expression (bitsCached >> (bitsCachedSize - count))\n                // effectively shifts the desired 'count' bits to the least significant positions.\n                // Then, MASKS[count] correctly isolates these 'count' bits.\n                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n                // For BIG_ENDIAN, discard the extracted bits from the MSB end of bitsCached\n                bitsCached &= MASKS[bitsCachedSize - count];\n            }\n            bitsCachedSize -= count;\n        return bitsOut;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}