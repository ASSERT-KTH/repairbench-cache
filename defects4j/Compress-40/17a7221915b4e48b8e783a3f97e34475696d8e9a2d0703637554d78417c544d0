{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n *        number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" \n                                           + MAXIMUM_CACHE_SIZE);\n    }\n    long result = 0L;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        // LSB\u2010first: fill bits from least significant upwards\n        for (int i = 0; i < count; i++) {\n            if (bitsCachedSize == 0) {\n                int nextByte = in.read();\n                if (nextByte < 0) {\n                    return -1L;\n                }\n                bitsCached = nextByte & 0xFFL;\n                bitsCachedSize = 8;\n            }\n            long bit = bitsCached & 1L;\n            result |= (bit << i);\n            bitsCached >>>= 1;\n            bitsCachedSize--;\n        }\n    } else {\n        // MSB\u2010first: shift result left and append each new bit\n        for (int i = 0; i < count; i++) {\n            if (bitsCachedSize == 0) {\n                int nextByte = in.read();\n                if (nextByte < 0) {\n                    return -1L;\n                }\n                bitsCached = nextByte & 0xFFL;\n                bitsCachedSize = 8;\n            }\n            int shift = bitsCachedSize - 1;\n            long bit = (bitsCached >> shift) & 1L;\n            result = (result << 1) | bit;\n            // clear the bit we just consumed\n            bitsCached &= (1L << shift) - 1;\n            bitsCachedSize--;\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}