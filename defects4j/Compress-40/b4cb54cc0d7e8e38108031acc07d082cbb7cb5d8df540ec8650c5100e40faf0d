{
    "generation": "public long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= (nextByte << bitsCachedSize);\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    }\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = (bitsCached & MASKS[count]);\n        bitsCached >>>= count;\n        bitsCachedSize -= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n        bitsCachedSize -= count;\n        // For big-endian, we don't just shift right since we need to maintain the remaining bits\n        // So we need to mask off the bits we just read\n        if (bitsCachedSize > 0) {\n            bitsCached &= ~(((1L << bitsCachedSize) - 1) << (bitsCachedSize - bitsCachedSize));\n        } else {\n            bitsCached = 0;\n        }\n    }\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}