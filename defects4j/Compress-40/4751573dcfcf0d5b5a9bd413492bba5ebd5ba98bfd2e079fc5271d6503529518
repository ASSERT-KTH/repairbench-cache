{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n *        number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order,\n *         or -1 if the end of the underlying stream has been reached\n *         before reading the requested number of bits.\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\n            \"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    int bitsToRead = count;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        long result = 0L;\n        int shift = 0;\n        while (bitsToRead > 0) {\n            if (bitsCachedSize == 0) {\n                final int next = in.read();\n                if (next < 0) {\n                    return -1L;\n                }\n                bitsCached = next & 0xFFL;\n                bitsCachedSize = 8;\n            }\n            final int take = Math.min(bitsCachedSize, bitsToRead);\n            long bits = bitsCached & MASKS[take];\n            result |= (bits << shift);\n            bitsCached >>>= take;\n            bitsCachedSize -= take;\n            shift += take;\n            bitsToRead -= take;\n        }\n        return result;\n    } else {\n        long result = 0L;\n        while (bitsToRead > 0) {\n            if (bitsCachedSize == 0) {\n                final int next = in.read();\n                if (next < 0) {\n                    return -1L;\n                }\n                bitsCached = next & 0xFFL;\n                bitsCachedSize = 8;\n            }\n            final int take = Math.min(bitsCachedSize, bitsToRead);\n            long bits = (bitsCached >> (bitsCachedSize - take)) & MASKS[take];\n            result = (result << take) | bits;\n            bitsCached &= MASKS[bitsCachedSize - take];\n            bitsCachedSize -= take;\n            bitsToRead -= take;\n        }\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}