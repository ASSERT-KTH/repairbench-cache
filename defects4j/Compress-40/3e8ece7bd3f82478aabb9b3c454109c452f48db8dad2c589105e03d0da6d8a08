{
    "generation": "public long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n\n    // fill cache until we have enough bits, but no more than MAXIMUM_CACHE_SIZE bits\n    while (bitsCachedSize < count) {\n        if (bitsCachedSize > MAXIMUM_CACHE_SIZE - 8) {\n            // we cannot shift 8 more bits safely -> stop filling (will read fewer bits at next call)\n            break;\n        }\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= (nextByte << bitsCachedSize);\n        } else {\n            bitsCached = (bitsCached << 8) | nextByte;\n        }\n        bitsCachedSize += 8;\n    }\n\n    if (bitsCachedSize < count) {\n        // we can no longer read enough bits\n        return -1;\n    }\n\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = (bitsCached & MASKS[count]);\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n    }\n    bitsCachedSize -= count;\n\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}