{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        if (count == 0) {\n            return 0;\n        }\n\n        while (bitsCachedSize < count) {\n            // Prevent bitsCached from holding more than 64 bits.\n            // Since count is at most 63, if bitsCachedSize reaches 64,\n            // we have enough bits (or more) to satisfy the request.\n            if (bitsCachedSize >= 64) {\n                break;\n            }\n\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                return -1; // Indicate EOF if not enough bits could be read\n            }\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // For LITTLE_ENDIAN, new bytes are appended to the higher bits.\n                // e.g., if bitsCached has B0, B1 is read, bitsCached becomes (B1 << 8) | B0\n                // This correctly appends the new byte to the left (MSB) of the existing bits.\n                // The `bitsCachedSize` ensures the correct shift amount.\n                // With `bitsCachedSize >= 64` check above, `bitsCachedSize` won't grow beyond 64 here.\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else { // BIG_ENDIAN\n                // For BIG_ENDIAN, new bytes are appended to the lower bits,\n                // and existing bits are shifted left.\n                // e.g., if bitsCached has B0, B1 is read, bitsCached becomes (B0 << 8) | B1\n                // With `bitsCachedSize >= 64` check above, bitsCached won't be shifted if it contains 64 bits,\n                // preventing overflow of the `long` itself.\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            bitsCachedSize += 8;\n        }\n\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            // For LITTLE_ENDIAN, bits are taken from the least significant end.\n            bitsOut = (bitsCached & MASKS[count]);\n            // Shift out the consumed bits to leave only the remaining bits.\n            bitsCached >>>= count;\n        } else { // BIG_ENDIAN\n            // For BIG_ENDIAN, bits are taken from the most significant end.\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n            // After extracting, remove the consumed bits from bitsCached.\n            // The remaining bits are the (bitsCachedSize - count) least significant bits.\n            bitsCached &= MASKS[bitsCachedSize - count];\n        }\n        bitsCachedSize -= count;\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}