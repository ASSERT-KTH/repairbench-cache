{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            // Not enough bits left; return -1 only if we can't satisfy the request\n            if (bitsCachedSize == 0) {\n                return -1;\n            } else {\n                // If there is any data cached, just return what is available (as per\n                // usual bit stream semantics this is commonly not expected/used,\n                // but needed for correctness in case someone calls with fewer bits left)\n                break;\n            }\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= (nextByte << bitsCachedSize);\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    }\n\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        // Always mask result before shifting out bits (to return count requested)\n        bitsOut = bitsCached & MASKS[count];\n        bitsCached >>>= count;\n    } else {\n        // Calculate the number of extra bits at the MSB side\n        int shift = bitsCachedSize - count;\n        bitsOut = (bitsCached >> shift) & MASKS[count];\n        bitsCached &= MASKS[bitsCachedSize - count];\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}