{
    "generation": "    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // Fill the cache until enough bits are available or the stream is exhausted\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                // Not enough bits left in the stream\n                return -1;\n            }\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else {\n                bitsCached = (bitsCached << 8) | nextByte;\n            }\n            bitsCachedSize += 8;\n        }\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsOut = (bitsCached & MASKS[count]);\n            bitsCached >>>= count;\n        } else {\n            // get the top 'count' bits from the left\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n            bitsCachedSize -= count;\n            bitsCached &= MASKS[bitsCachedSize]; // keep only the remaining bits\n            return bitsOut;\n        }\n        bitsCachedSize -= count;\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}