{
    "generation": "public long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= (nextByte << bitsCachedSize);\n        } else {\n            bitsCached = (bitsCached << 8) | nextByte;\n        }\n        bitsCachedSize += 8;\n    }\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = bitsCached & MASKS[count];\n        bitsCached >>>= count;\n        bitsCachedSize -= count;\n    } else {\n        // In BIG_ENDIAN mode, the highest (bitsCachedSize - count) bits are still unread.\n        // We extract the top \"count\" bits and then remove them from the cache.\n        int newSize = bitsCachedSize - count;\n        bitsOut = (bitsCached >> newSize) & MASKS[count];\n        bitsCached &= MASKS[newSize];\n        bitsCachedSize = newSize;\n    }\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}