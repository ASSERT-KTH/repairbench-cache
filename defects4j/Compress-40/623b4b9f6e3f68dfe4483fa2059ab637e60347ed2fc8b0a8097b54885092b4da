{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // Ensure we have enough bits in the cache\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                // EOF reached before accumulating enough bits\n                return nextByte; // Return -1\n            }\n\n            // Treat the byte read as an unsigned long value\n            final long nextByteAsLong = nextByte & 0xffL;\n\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // Append bits to the high-order side of the cache\n                bitsCached |= (nextByteAsLong << bitsCachedSize);\n            } else { // BIG_ENDIAN\n                // Shift existing cache bits left, append new byte to low-order side\n                // Note: Potential overflow if bitsCachedSize > 56, losing high bits\n                bitsCached <<= 8;\n                bitsCached |= nextByteAsLong;\n            }\n            bitsCachedSize += 8;\n        }\n            // By this point, bitsCachedSize >= count\n\n        final long bitsOut;\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // Extract 'count' low-order bits\n                bitsOut = (bitsCached & MASKS[count]);\n                // Remove extracted bits by right-shifting the cache (unsigned)\n                bitsCached >>>= count;\n            } else { // BIG_ENDIAN\n                // Extract 'count' high-order bits\n                // Shift the desired bits to the low-order positions using signed shift >>\n                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n                // Remove extracted bits by clearing the top 'count' bits from the cache\n                // (Keep the lower 'bitsCachedSize - count' bits)\n                // MASKS[0] is 0, so this works even if bitsCachedSize == count\n                bitsCached &= MASKS[bitsCachedSize - count];\n            }\n            // Update the number of valid bits remaining in the cache\n            bitsCachedSize -= count;\n        return bitsOut;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}