{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            if (bitsCachedSize == 0) {\n                return -1;\n            } else {\n                // Not enough bits left, return what we have (only if bitsCachedSize > 0), else -1 (already covered)\n                if (bitsCachedSize < count) {\n                    return -1;\n                }\n            }\n        } else {\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else {\n                bitsCached = (bitsCached << 8) | nextByte;\n            }\n            bitsCachedSize += 8;\n        }\n    }\n\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = (bitsCached & MASKS[count]);\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n        bitsCached &= MASKS[bitsCachedSize - count];\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}