{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // Handle count == 0 early. Although MAXIMUM_CACHE_SIZE is 63, a 0 might be passed.\n        if (count == 0) {\n             return 0L;\n        }\n\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                return nextByte; // Return -1 on EOF\n            }\n\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // LE: Add new bits after existing bits. Shift handles overflow by discarding high bits.\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else {\n                // BE: Shift existing bits left, add new bits at bottom. Shift handles overflow by discarding high bits.\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            // bitsCachedSize can exceed 64 here, reflecting the conceptual number of bits processed.\n            bitsCachedSize += 8;\n        }\n            // bitsCachedSize >= count\n\n        final long bitsOut;\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // LE: Take bottom count bits\n                bitsOut = (bitsCached & MASKS[count]);\n                // LE: Remove bottom count bits using unsigned right shift\n                bitsCached >>>= count;\n            } else {\n                // BE: Take top count bits.\n                // Shift cache left so the (bitsCachedSize) conceptual bits are aligned with MSB.\n                // Need to handle bitsCachedSize potentially > 64.\n                // The effective shift needs to bring the bit that was originally at position (bitsCachedSize - 1)\n                // to position 63. This requires a left shift by (64 - bitsCachedSize).\n                // Java handles negative shifts by using the lower 6 bits of the shift count for longs.\n                // Then, shift right (unsigned) to bring the top 'count' bits to the LSB positions.\n                bitsOut = (bitsCached << (64 - bitsCachedSize)) >>> (64 - count);\n            }\n            // Update cache size. This is essential for the subsequent reads, especially for BE.\n            bitsCachedSize -= count;\n\n        return bitsOut;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}