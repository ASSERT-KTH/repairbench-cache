{
    "generation": "public long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        // If we're about to shift more than 63 bits, we need to prevent overflow by not shifting further\n        if (bitsCachedSize <= 55) { // 55 + 8 <= 63, safe to shift\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else {\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            bitsCachedSize += 8;\n        } else {\n            // Can't cache more bits safely, stop here\n            break;\n        }\n    }\n\n    if (bitsCachedSize < count) {\n        // attempt to fill one last time (stream may have ended during last loop)\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                return -1;\n            }\n            if (bitsCachedSize <= 55) {\n                if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                    bitsCached |= (nextByte << bitsCachedSize);\n                } else {\n                    bitsCached <<= 8;\n                    bitsCached |= nextByte;\n                }\n                bitsCachedSize += 8;\n            } else {\n                break;\n            }\n        }\n\n        if (bitsCachedSize < count) {\n            return -1; // couldn't read enough bits\n        }\n    }\n\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = (bitsCached & MASKS[count]);\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n        bitsCached &= MASKS[bitsCachedSize - count]; // discard the consumed bits\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}