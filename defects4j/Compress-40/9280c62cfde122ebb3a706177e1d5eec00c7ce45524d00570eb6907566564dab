{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // Ensure we have enough bits in the cache\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                // If EOF is reached, return -1. Note: The cache might contain\n                // some bits, but not enough to fulfill the request.\n                return -1L;\n            }\n\n            // Incorporate the byte into the cache based on byte order\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // Add new byte's bits to the more significant end of the cache\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else { // BIG_ENDIAN\n                // Shift cache left and add new byte's bits to the less significant end\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            bitsCachedSize += 8; // Increment the number of bits available in the cache\n        }\n        // bitsCachedSize >= count\n\n        // Extract the required number of bits\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            // For Little Endian, the first bits read are the least significant bits.\n            // Extract the 'count' least significant bits from the cache.\n            bitsOut = (bitsCached & MASKS[count]);\n            // Remove the extracted bits from the cache using logical right shift.\n            bitsCached >>>= count;\n        } else { // BIG_ENDIAN\n            // For Big Endian, the first bits read are the most significant bits.\n            // Extract the 'count' most significant bits from the relevant portion of the cache.\n            // Use logical right shift (>>>) to avoid sign extension issues if the cache value became negative\n            // due to overflow during accumulation, although the result should fit in a positive long.\n            // The shift amount positions the most significant 'count' bits at the LSB end.\n            bitsOut = (bitsCached >>> (bitsCachedSize - count)) & MASKS[count];\n            // For Big Endian, the cache implicitly keeps the most recent bits due to the left shift\n            // accumulation; consumed MSBs don't need explicit removal beyond updating the size.\n        }\n\n        // Update the number of valid bits remaining in the cache\n        bitsCachedSize -= count;\n\n        return bitsOut;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}