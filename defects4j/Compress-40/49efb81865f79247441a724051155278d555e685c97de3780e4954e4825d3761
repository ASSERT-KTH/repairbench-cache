{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        long bitsOut = 0;\n        for (int i = 0; i < count; i++) {\n            if (bitsCachedSize == 0) {\n                final long nextByte = in.read();\n                if (nextByte < 0) {\n                    return nextByte;\n                }\n                bitsCached = nextByte;\n                bitsCachedSize = 8;\n            }\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                bitsOut |= ((bitsCached & 1) << i);\n                bitsCached >>>= 1;\n            } else {\n                bitsOut |= (((bitsCached >> (bitsCachedSize - 1)) & 1) << i);\n                bitsCached &= ~(1L << (bitsCachedSize - 1));\n            }\n            bitsCachedSize--;\n        }\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}